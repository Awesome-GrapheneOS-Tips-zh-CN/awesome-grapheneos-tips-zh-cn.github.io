{"version":3,"file":"fastboot.min.mjs","sources":["../node_modules/@zip.js/zip.js/lib/core/streams/codecs/deflate.js","../node_modules/@zip.js/zip.js/lib/core/streams/codecs/inflate.js","../node_modules/@zip.js/zip.js/lib/core/constants.js","../node_modules/@zip.js/zip.js/lib/core/streams/stream-adapter.js","../node_modules/@zip.js/zip.js/lib/core/configuration.js","../node_modules/@zip.js/zip.js/lib/core/util/mime-type.js","../node_modules/@zip.js/zip.js/lib/core/streams/codecs/crc32.js","../node_modules/@zip.js/zip.js/lib/core/streams/crc32-stream.js","../node_modules/@zip.js/zip.js/lib/core/streams/codecs/sjcl.js","../node_modules/@zip.js/zip.js/lib/core/streams/common-crypto.js","../node_modules/@zip.js/zip.js/lib/core/streams/aes-crypto-stream.js","../node_modules/@zip.js/zip.js/lib/core/util/encode-text.js","../node_modules/@zip.js/zip.js/lib/core/streams/zip-crypto-stream.js","../node_modules/@zip.js/zip.js/lib/core/streams/zip-entry-stream.js","../node_modules/@zip.js/zip.js/lib/core/streams/codec-stream.js","../node_modules/@zip.js/zip.js/lib/core/codec-worker.js","../node_modules/@zip.js/zip.js/lib/core/codec-pool.js","../node_modules/@zip.js/zip.js/lib/core/io.js","../node_modules/@zip.js/zip.js/lib/core/util/cp437-decode.js","../node_modules/@zip.js/zip.js/lib/core/util/decode-text.js","../node_modules/@zip.js/zip.js/lib/core/zip-entry.js","../node_modules/@zip.js/zip.js/lib/core/zip-reader.js","../node_modules/@zip.js/zip.js/lib/zip-fs.js","../node_modules/@zip.js/zip.js/lib/z-worker-inline.js","../node_modules/@zip.js/zip.js/index.js","../src/common.ts","../src/sparse.ts","../src/factory-optimized.ts","../src/io.ts","../src/factory.ts","../src/fastboot.ts"],"sourcesContent":["/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n// deno-lint-ignore-file no-this-alias prefer-const\n\n// Global\n\nconst MAX_BITS = 15;\nconst D_CODES = 30;\nconst BL_CODES = 19;\n\nconst LENGTH_CODES = 29;\nconst LITERALS = 256;\nconst L_CODES = (LITERALS + 1 + LENGTH_CODES);\nconst HEAP_SIZE = (2 * L_CODES + 1);\n\nconst END_BLOCK = 256;\n\n// Bit length codes must not exceed MAX_BL_BITS bits\nconst MAX_BL_BITS = 7;\n\n// repeat previous bit length 3-6 times (2 bits of repeat count)\nconst REP_3_6 = 16;\n\n// repeat a zero length 3-10 times (3 bits of repeat count)\nconst REPZ_3_10 = 17;\n\n// repeat a zero length 11-138 times (7 bits of repeat count)\nconst REPZ_11_138 = 18;\n\n// The lengths of the bit length codes are sent in order of decreasing\n// probability, to avoid transmitting the lengths for unused bit\n// length codes.\n\nconst Buf_size = 8 * 2;\n\n// JZlib version : \"1.0.2\"\nconst Z_DEFAULT_COMPRESSION = -1;\n\n// compression strategy\nconst Z_FILTERED = 1;\nconst Z_HUFFMAN_ONLY = 2;\nconst Z_DEFAULT_STRATEGY = 0;\n\nconst Z_NO_FLUSH = 0;\nconst Z_PARTIAL_FLUSH = 1;\nconst Z_FULL_FLUSH = 3;\nconst Z_FINISH = 4;\n\nconst Z_OK = 0;\nconst Z_STREAM_END = 1;\nconst Z_NEED_DICT = 2;\nconst Z_STREAM_ERROR = -2;\nconst Z_DATA_ERROR = -3;\nconst Z_BUF_ERROR = -5;\n\n// Tree\n\nfunction extractArray(array) {\n\treturn flatArray(array.map(([length, value]) => (new Array(length)).fill(value, 0, length)));\n}\n\nfunction flatArray(array) {\n\treturn array.reduce((a, b) => a.concat(Array.isArray(b) ? flatArray(b) : b), []);\n}\n\n// see definition of array dist_code below\nconst _dist_code = [0, 1, 2, 3].concat(...extractArray([\n\t[2, 4], [2, 5], [4, 6], [4, 7], [8, 8], [8, 9], [16, 10], [16, 11], [32, 12], [32, 13], [64, 14], [64, 15], [2, 0], [1, 16],\n\t[1, 17], [2, 18], [2, 19], [4, 20], [4, 21], [8, 22], [8, 23], [16, 24], [16, 25], [32, 26], [32, 27], [64, 28], [64, 29]\n]));\n\nfunction Tree() {\n\tconst that = this;\n\n\t// dyn_tree; // the dynamic tree\n\t// max_code; // largest code with non zero frequency\n\t// stat_desc; // the corresponding static tree\n\n\t// Compute the optimal bit lengths for a tree and update the total bit\n\t// length\n\t// for the current block.\n\t// IN assertion: the fields freq and dad are set, heap[heap_max] and\n\t// above are the tree nodes sorted by increasing frequency.\n\t// OUT assertions: the field len is set to the optimal bit length, the\n\t// array bl_count contains the frequencies for each bit length.\n\t// The length opt_len is updated; static_len is also updated if stree is\n\t// not null.\n\tfunction gen_bitlen(s) {\n\t\tconst tree = that.dyn_tree;\n\t\tconst stree = that.stat_desc.static_tree;\n\t\tconst extra = that.stat_desc.extra_bits;\n\t\tconst base = that.stat_desc.extra_base;\n\t\tconst max_length = that.stat_desc.max_length;\n\t\tlet h; // heap index\n\t\tlet n, m; // iterate over the tree elements\n\t\tlet bits; // bit length\n\t\tlet xbits; // extra bits\n\t\tlet f; // frequency\n\t\tlet overflow = 0; // number of elements with bit length too large\n\n\t\tfor (bits = 0; bits <= MAX_BITS; bits++)\n\t\t\ts.bl_count[bits] = 0;\n\n\t\t// In a first pass, compute the optimal bit lengths (which may\n\t\t// overflow in the case of the bit length tree).\n\t\ttree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap\n\n\t\tfor (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n\t\t\tn = s.heap[h];\n\t\t\tbits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n\t\t\tif (bits > max_length) {\n\t\t\t\tbits = max_length;\n\t\t\t\toverflow++;\n\t\t\t}\n\t\t\ttree[n * 2 + 1] = bits;\n\t\t\t// We overwrite tree[n*2+1] which is no longer needed\n\n\t\t\tif (n > that.max_code)\n\t\t\t\tcontinue; // not a leaf node\n\n\t\t\ts.bl_count[bits]++;\n\t\t\txbits = 0;\n\t\t\tif (n >= base)\n\t\t\t\txbits = extra[n - base];\n\t\t\tf = tree[n * 2];\n\t\t\ts.opt_len += f * (bits + xbits);\n\t\t\tif (stree)\n\t\t\t\ts.static_len += f * (stree[n * 2 + 1] + xbits);\n\t\t}\n\t\tif (overflow === 0)\n\t\t\treturn;\n\n\t\t// This happens for example on obj2 and pic of the Calgary corpus\n\t\t// Find the first bit length which could increase:\n\t\tdo {\n\t\t\tbits = max_length - 1;\n\t\t\twhile (s.bl_count[bits] === 0)\n\t\t\t\tbits--;\n\t\t\ts.bl_count[bits]--; // move one leaf down the tree\n\t\t\ts.bl_count[bits + 1] += 2; // move one overflow item as its brother\n\t\t\ts.bl_count[max_length]--;\n\t\t\t// The brother of the overflow item also moves one step up,\n\t\t\t// but this does not affect bl_count[max_length]\n\t\t\toverflow -= 2;\n\t\t} while (overflow > 0);\n\n\t\tfor (bits = max_length; bits !== 0; bits--) {\n\t\t\tn = s.bl_count[bits];\n\t\t\twhile (n !== 0) {\n\t\t\t\tm = s.heap[--h];\n\t\t\t\tif (m > that.max_code)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (tree[m * 2 + 1] != bits) {\n\t\t\t\t\ts.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];\n\t\t\t\t\ttree[m * 2 + 1] = bits;\n\t\t\t\t}\n\t\t\t\tn--;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Reverse the first len bits of a code, using straightforward code (a\n\t// faster\n\t// method would use a table)\n\t// IN assertion: 1 <= len <= 15\n\tfunction bi_reverse(code, // the value to invert\n\t\tlen // its bit length\n\t) {\n\t\tlet res = 0;\n\t\tdo {\n\t\t\tres |= code & 1;\n\t\t\tcode >>>= 1;\n\t\t\tres <<= 1;\n\t\t} while (--len > 0);\n\t\treturn res >>> 1;\n\t}\n\n\t// Generate the codes for a given tree and bit counts (which need not be\n\t// optimal).\n\t// IN assertion: the array bl_count contains the bit length statistics for\n\t// the given tree and the field len is set for all tree elements.\n\t// OUT assertion: the field code is set for all tree elements of non\n\t// zero code length.\n\tfunction gen_codes(tree, // the tree to decorate\n\t\tmax_code, // largest code with non zero frequency\n\t\tbl_count // number of codes at each bit length\n\t) {\n\t\tconst next_code = []; // next code value for each\n\t\t// bit length\n\t\tlet code = 0; // running code value\n\t\tlet bits; // bit index\n\t\tlet n; // code index\n\t\tlet len;\n\n\t\t// The distribution counts are first used to generate the code values\n\t\t// without bit reversal.\n\t\tfor (bits = 1; bits <= MAX_BITS; bits++) {\n\t\t\tnext_code[bits] = code = ((code + bl_count[bits - 1]) << 1);\n\t\t}\n\n\t\t// Check that the bit counts in bl_count are consistent. The last code\n\t\t// must be all ones.\n\t\t// Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n\t\t// \"inconsistent bit counts\");\n\t\t// Tracev((stderr,\"gen_codes: max_code %d \", max_code));\n\n\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\tlen = tree[n * 2 + 1];\n\t\t\tif (len === 0)\n\t\t\t\tcontinue;\n\t\t\t// Now reverse the bits\n\t\t\ttree[n * 2] = bi_reverse(next_code[len]++, len);\n\t\t}\n\t}\n\n\t// Construct one Huffman tree and assigns the code bit strings and lengths.\n\t// Update the total bit length for the current block.\n\t// IN assertion: the field freq is set for all tree elements.\n\t// OUT assertions: the fields len and code are set to the optimal bit length\n\t// and corresponding code. The length opt_len is updated; static_len is\n\t// also updated if stree is not null. The field max_code is set.\n\tthat.build_tree = function (s) {\n\t\tconst tree = that.dyn_tree;\n\t\tconst stree = that.stat_desc.static_tree;\n\t\tconst elems = that.stat_desc.elems;\n\t\tlet n, m; // iterate over heap elements\n\t\tlet max_code = -1; // largest code with non zero frequency\n\t\tlet node; // new node being created\n\n\t\t// Construct the initial heap, with least frequent element in\n\t\t// heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n\t\t// heap[0] is not used.\n\t\ts.heap_len = 0;\n\t\ts.heap_max = HEAP_SIZE;\n\n\t\tfor (n = 0; n < elems; n++) {\n\t\t\tif (tree[n * 2] !== 0) {\n\t\t\t\ts.heap[++s.heap_len] = max_code = n;\n\t\t\t\ts.depth[n] = 0;\n\t\t\t} else {\n\t\t\t\ttree[n * 2 + 1] = 0;\n\t\t\t}\n\t\t}\n\n\t\t// The pkzip format requires that at least one distance code exists,\n\t\t// and that at least one bit should be sent even if there is only one\n\t\t// possible code. So to avoid special checks later on we force at least\n\t\t// two codes of non zero frequency.\n\t\twhile (s.heap_len < 2) {\n\t\t\tnode = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n\t\t\ttree[node * 2] = 1;\n\t\t\ts.depth[node] = 0;\n\t\t\ts.opt_len--;\n\t\t\tif (stree)\n\t\t\t\ts.static_len -= stree[node * 2 + 1];\n\t\t\t// node is 0 or 1 so it does not have extra bits\n\t\t}\n\t\tthat.max_code = max_code;\n\n\t\t// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n\t\t// establish sub-heaps of increasing lengths:\n\n\t\tfor (n = Math.floor(s.heap_len / 2); n >= 1; n--)\n\t\t\ts.pqdownheap(tree, n);\n\n\t\t// Construct the Huffman tree by repeatedly combining the least two\n\t\t// frequent nodes.\n\n\t\tnode = elems; // next internal node of the tree\n\t\tdo {\n\t\t\t// n = node of least frequency\n\t\t\tn = s.heap[1];\n\t\t\ts.heap[1] = s.heap[s.heap_len--];\n\t\t\ts.pqdownheap(tree, 1);\n\t\t\tm = s.heap[1]; // m = node of next least frequency\n\n\t\t\ts.heap[--s.heap_max] = n; // keep the nodes sorted by frequency\n\t\t\ts.heap[--s.heap_max] = m;\n\n\t\t\t// Create a new node father of n and m\n\t\t\ttree[node * 2] = (tree[n * 2] + tree[m * 2]);\n\t\t\ts.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;\n\t\t\ttree[n * 2 + 1] = tree[m * 2 + 1] = node;\n\n\t\t\t// and insert the new node in the heap\n\t\t\ts.heap[1] = node++;\n\t\t\ts.pqdownheap(tree, 1);\n\t\t} while (s.heap_len >= 2);\n\n\t\ts.heap[--s.heap_max] = s.heap[1];\n\n\t\t// At this point, the fields freq and dad are set. We can now\n\t\t// generate the bit lengths.\n\n\t\tgen_bitlen(s);\n\n\t\t// The field len is now set, we can generate the bit codes\n\t\tgen_codes(tree, that.max_code, s.bl_count);\n\t};\n\n}\n\nTree._length_code = [0, 1, 2, 3, 4, 5, 6, 7].concat(...extractArray([\n\t[2, 8], [2, 9], [2, 10], [2, 11], [4, 12], [4, 13], [4, 14], [4, 15], [8, 16], [8, 17], [8, 18], [8, 19],\n\t[16, 20], [16, 21], [16, 22], [16, 23], [32, 24], [32, 25], [32, 26], [31, 27], [1, 28]]));\n\nTree.base_length = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0];\n\nTree.base_dist = [0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384,\n\t24576];\n\n// Mapping from a distance to a distance code. dist is the distance - 1 and\n// must not have side effects. _dist_code[256] and _dist_code[257] are never\n// used.\nTree.d_code = function (dist) {\n\treturn ((dist) < 256 ? _dist_code[dist] : _dist_code[256 + ((dist) >>> 7)]);\n};\n\n// extra bits for each length code\nTree.extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];\n\n// extra bits for each distance code\nTree.extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];\n\n// extra bits for each bit length code\nTree.extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];\n\nTree.bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\n// StaticTree\n\nfunction StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {\n\tconst that = this;\n\tthat.static_tree = static_tree;\n\tthat.extra_bits = extra_bits;\n\tthat.extra_base = extra_base;\n\tthat.elems = elems;\n\tthat.max_length = max_length;\n}\n\nconst static_ltree2_first_part = [12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82,\n\t210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86,\n\t214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81,\n\t209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85,\n\t213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 19, 275, 147, 403, 83, 339, 211, 467, 51, 307,\n\t179, 435, 115, 371, 243, 499, 11, 267, 139, 395, 75, 331, 203, 459, 43, 299, 171, 427, 107, 363, 235, 491, 27, 283, 155, 411, 91, 347, 219, 475,\n\t59, 315, 187, 443, 123, 379, 251, 507, 7, 263, 135, 391, 71, 327, 199, 455, 39, 295, 167, 423, 103, 359, 231, 487, 23, 279, 151, 407, 87, 343, 215,\n\t471, 55, 311, 183, 439, 119, 375, 247, 503, 15, 271, 143, 399, 79, 335, 207, 463, 47, 303, 175, 431, 111, 367, 239, 495, 31, 287, 159, 415, 95,\n\t351, 223, 479, 63, 319, 191, 447, 127, 383, 255, 511, 0, 64, 32, 96, 16, 80, 48, 112, 8, 72, 40, 104, 24, 88, 56, 120, 4, 68, 36, 100, 20, 84, 52,\n\t116, 3, 131, 67, 195, 35, 163, 99, 227];\nconst static_ltree2_second_part = extractArray([[144, 8], [112, 9], [24, 7], [8, 8]]);\nStaticTree.static_ltree = flatArray(static_ltree2_first_part.map((value, index) => [value, static_ltree2_second_part[index]]));\n\nconst static_dtree_first_part = [0, 16, 8, 24, 4, 20, 12, 28, 2, 18, 10, 26, 6, 22, 14, 30, 1, 17, 9, 25, 5, 21, 13, 29, 3, 19, 11, 27, 7, 23];\nconst static_dtree_second_part = extractArray([[30, 5]]);\nStaticTree.static_dtree = flatArray(static_dtree_first_part.map((value, index) => [value, static_dtree_second_part[index]]));\n\nStaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n\nStaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);\n\nStaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);\n\n// Deflate\n\nconst MAX_MEM_LEVEL = 9;\nconst DEF_MEM_LEVEL = 8;\n\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\tconst that = this;\n\tthat.good_length = good_length;\n\tthat.max_lazy = max_lazy;\n\tthat.nice_length = nice_length;\n\tthat.max_chain = max_chain;\n\tthat.func = func;\n}\n\nconst STORED = 0;\nconst FAST = 1;\nconst SLOW = 2;\nconst config_table = [\n\tnew Config(0, 0, 0, 0, STORED),\n\tnew Config(4, 4, 8, 4, FAST),\n\tnew Config(4, 5, 16, 8, FAST),\n\tnew Config(4, 6, 32, 32, FAST),\n\tnew Config(4, 4, 16, 16, SLOW),\n\tnew Config(8, 16, 32, 32, SLOW),\n\tnew Config(8, 16, 128, 128, SLOW),\n\tnew Config(8, 32, 128, 256, SLOW),\n\tnew Config(32, 128, 258, 1024, SLOW),\n\tnew Config(32, 258, 258, 4096, SLOW)\n];\n\nconst z_errmsg = [\"need dictionary\", // Z_NEED_DICT\n\t// 2\n\t\"stream end\", // Z_STREAM_END 1\n\t\"\", // Z_OK 0\n\t\"\", // Z_ERRNO (-1)\n\t\"stream error\", // Z_STREAM_ERROR (-2)\n\t\"data error\", // Z_DATA_ERROR (-3)\n\t\"\", // Z_MEM_ERROR (-4)\n\t\"buffer error\", // Z_BUF_ERROR (-5)\n\t\"\",// Z_VERSION_ERROR (-6)\n\t\"\"];\n\n// block not completed, need more input or more output\nconst NeedMore = 0;\n\n// block flush performed\nconst BlockDone = 1;\n\n// finish started, need only more output at next deflate\nconst FinishStarted = 2;\n\n// finish done, accept no more input or output\nconst FinishDone = 3;\n\n// preset dictionary flag in zlib header\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE = 42;\nconst BUSY_STATE = 113;\nconst FINISH_STATE = 666;\n\n// The deflate compression method\nconst Z_DEFLATED = 8;\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES = 2;\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nfunction smaller(tree, n, m, depth) {\n\tconst tn2 = tree[n * 2];\n\tconst tm2 = tree[m * 2];\n\treturn (tn2 < tm2 || (tn2 == tm2 && depth[n] <= depth[m]));\n}\n\nfunction Deflate() {\n\n\tconst that = this;\n\tlet strm; // pointer back to this zlib stream\n\tlet status; // as the name implies\n\t// pending_buf; // output still pending\n\tlet pending_buf_size; // size of pending_buf\n\t// pending_out; // next pending byte to output to the stream\n\t// pending; // nb of bytes in the pending buffer\n\n\t// dist_buf; // buffer for distances\n\t// lc_buf; // buffer for literals or lengths\n\t// To simplify the code, dist_buf and lc_buf have the same number of elements.\n\t// To use different lengths, an extra flag array would be necessary.\n\n\tlet last_flush; // value of flush param for previous deflate call\n\n\tlet w_size; // LZ77 win size (32K by default)\n\tlet w_bits; // log2(w_size) (8..16)\n\tlet w_mask; // w_size - 1\n\n\tlet win;\n\t// Sliding win. Input bytes are read into the second half of the win,\n\t// and move to the first half later to keep a dictionary of at least wSize\n\t// bytes. With this organization, matches are limited to a distance of\n\t// wSize-MAX_MATCH bytes, but this ensures that IO is always\n\t// performed with a length multiple of the block size. Also, it limits\n\t// the win size to 64K, which is quite useful on MSDOS.\n\t// To do: use the user input buffer as sliding win.\n\n\tlet window_size;\n\t// Actual size of win: 2*wSize, except when the user input buffer\n\t// is directly used as sliding win.\n\n\tlet prev;\n\t// Link to older string with same hash index. To limit the size of this\n\t// array to 64K, this link is maintained only for the last 32K strings.\n\t// An index in this array is thus a win index modulo 32K.\n\n\tlet head; // Heads of the hash chains or NIL.\n\n\tlet ins_h; // hash index of string to be inserted\n\tlet hash_size; // number of elements in hash table\n\tlet hash_bits; // log2(hash_size)\n\tlet hash_mask; // hash_size-1\n\n\t// Number of bits by which ins_h must be shifted at each input\n\t// step. It must be such that after MIN_MATCH steps, the oldest\n\t// byte no longer takes part in the hash key, that is:\n\t// hash_shift * MIN_MATCH >= hash_bits\n\tlet hash_shift;\n\n\t// Window position at the beginning of the current output block. Gets\n\t// negative when the win is moved backwards.\n\n\tlet block_start;\n\n\tlet match_length; // length of best match\n\tlet prev_match; // previous match\n\tlet match_available; // set if previous match exists\n\tlet strstart; // start of string to insert\n\tlet match_start; // start of matching string\n\tlet lookahead; // number of valid bytes ahead in win\n\n\t// Length of the best match at previous step. Matches not greater than this\n\t// are discarded. This is used in the lazy match evaluation.\n\tlet prev_length;\n\n\t// To speed up deflation, hash chains are never searched beyond this\n\t// length. A higher limit improves compression ratio but degrades the speed.\n\tlet max_chain_length;\n\n\t// Attempt to find a better match only when the current match is strictly\n\t// smaller than this value. This mechanism is used only for compression\n\t// levels >= 4.\n\tlet max_lazy_match;\n\n\t// Insert new strings in the hash table only if the match length is not\n\t// greater than this length. This saves time but degrades compression.\n\t// max_insert_length is used only for compression levels <= 3.\n\n\tlet level; // compression level (1..9)\n\tlet strategy; // favor or force Huffman coding\n\n\t// Use a faster search when the previous match is longer than this\n\tlet good_match;\n\n\t// Stop searching when current match exceeds this\n\tlet nice_match;\n\n\tlet dyn_ltree; // literal and length tree\n\tlet dyn_dtree; // distance tree\n\tlet bl_tree; // Huffman tree for bit lengths\n\n\tconst l_desc = new Tree(); // desc for literal tree\n\tconst d_desc = new Tree(); // desc for distance tree\n\tconst bl_desc = new Tree(); // desc for bit length tree\n\n\t// that.heap_len; // number of elements in the heap\n\t// that.heap_max; // element of largest frequency\n\t// The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n\t// The same heap array is used to build all trees.\n\n\t// Depth of each subtree used as tie breaker for trees of equal frequency\n\tthat.depth = [];\n\n\t// Size of match buffer for literals/lengths. There are 4 reasons for\n\t// limiting lit_bufsize to 64K:\n\t// - frequencies can be kept in 16 bit counters\n\t// - if compression is not successful for the first block, all input\n\t// data is still in the win so we can still emit a stored block even\n\t// when input comes from standard input. (This can also be done for\n\t// all blocks if lit_bufsize is not greater than 32K.)\n\t// - if compression is not successful for a file smaller than 64K, we can\n\t// even emit a stored file instead of a stored block (saving 5 bytes).\n\t// This is applicable only for zip (not gzip or zlib).\n\t// - creating new Huffman trees less frequently may not provide fast\n\t// adaptation to changes in the input data statistics. (Take for\n\t// example a binary file with poorly compressible code followed by\n\t// a highly compressible string table.) Smaller buffer sizes give\n\t// fast adaptation but have of course the overhead of transmitting\n\t// trees more frequently.\n\t// - I can't count above 4\n\tlet lit_bufsize;\n\n\tlet last_lit; // running index in dist_buf and lc_buf\n\n\t// that.opt_len; // bit length of current block with optimal trees\n\t// that.static_len; // bit length of current block with static trees\n\tlet matches; // number of string matches in current block\n\tlet last_eob_len; // bit length of EOB code for last block\n\n\t// Output buffer. bits are inserted starting at the bottom (least\n\t// significant bits).\n\tlet bi_buf;\n\n\t// Number of valid bits in bi_buf. All bits above the last valid bit\n\t// are always zero.\n\tlet bi_valid;\n\n\t// number of codes at each bit length for an optimal tree\n\tthat.bl_count = [];\n\n\t// heap used to build the Huffman trees\n\tthat.heap = [];\n\n\tdyn_ltree = [];\n\tdyn_dtree = [];\n\tbl_tree = [];\n\n\tfunction lm_init() {\n\t\twindow_size = 2 * w_size;\n\n\t\thead[hash_size - 1] = 0;\n\t\tfor (let i = 0; i < hash_size - 1; i++) {\n\t\t\thead[i] = 0;\n\t\t}\n\n\t\t// Set the default configuration parameters:\n\t\tmax_lazy_match = config_table[level].max_lazy;\n\t\tgood_match = config_table[level].good_length;\n\t\tnice_match = config_table[level].nice_length;\n\t\tmax_chain_length = config_table[level].max_chain;\n\n\t\tstrstart = 0;\n\t\tblock_start = 0;\n\t\tlookahead = 0;\n\t\tmatch_length = prev_length = MIN_MATCH - 1;\n\t\tmatch_available = 0;\n\t\tins_h = 0;\n\t}\n\n\tfunction init_block() {\n\t\tlet i;\n\t\t// Initialize the trees.\n\t\tfor (i = 0; i < L_CODES; i++)\n\t\t\tdyn_ltree[i * 2] = 0;\n\t\tfor (i = 0; i < D_CODES; i++)\n\t\t\tdyn_dtree[i * 2] = 0;\n\t\tfor (i = 0; i < BL_CODES; i++)\n\t\t\tbl_tree[i * 2] = 0;\n\n\t\tdyn_ltree[END_BLOCK * 2] = 1;\n\t\tthat.opt_len = that.static_len = 0;\n\t\tlast_lit = matches = 0;\n\t}\n\n\t// Initialize the tree data structures for a new zlib stream.\n\tfunction tr_init() {\n\n\t\tl_desc.dyn_tree = dyn_ltree;\n\t\tl_desc.stat_desc = StaticTree.static_l_desc;\n\n\t\td_desc.dyn_tree = dyn_dtree;\n\t\td_desc.stat_desc = StaticTree.static_d_desc;\n\n\t\tbl_desc.dyn_tree = bl_tree;\n\t\tbl_desc.stat_desc = StaticTree.static_bl_desc;\n\n\t\tbi_buf = 0;\n\t\tbi_valid = 0;\n\t\tlast_eob_len = 8; // enough lookahead for inflate\n\n\t\t// Initialize the first block of the first file:\n\t\tinit_block();\n\t}\n\n\t// Restore the heap property by moving down the tree starting at node k,\n\t// exchanging a node with the smallest of its two sons if necessary,\n\t// stopping\n\t// when the heap property is re-established (each father smaller than its\n\t// two sons).\n\tthat.pqdownheap = function (tree, // the tree to restore\n\t\tk // node to move down\n\t) {\n\t\tconst heap = that.heap;\n\t\tconst v = heap[k];\n\t\tlet j = k << 1; // left son of k\n\t\twhile (j <= that.heap_len) {\n\t\t\t// Set j to the smallest of the two sons:\n\t\t\tif (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\t// Exit if v is smaller than both sons\n\t\t\tif (smaller(tree, v, heap[j], that.depth))\n\t\t\t\tbreak;\n\n\t\t\t// Exchange v with the smallest son\n\t\t\theap[k] = heap[j];\n\t\t\tk = j;\n\t\t\t// And continue down the tree, setting j to the left son of k\n\t\t\tj <<= 1;\n\t\t}\n\t\theap[k] = v;\n\t};\n\n\t// Scan a literal or distance tree to determine the frequencies of the codes\n\t// in the bit length tree.\n\tfunction scan_tree(tree,// the tree to be scanned\n\t\tmax_code // and its largest code of non zero frequency\n\t) {\n\t\tlet prevlen = -1; // last emitted length\n\t\tlet curlen; // length of current code\n\t\tlet nextlen = tree[0 * 2 + 1]; // length of next code\n\t\tlet count = 0; // repeat count of the current code\n\t\tlet max_count = 7; // max repeat count\n\t\tlet min_count = 4; // min repeat count\n\n\t\tif (nextlen === 0) {\n\t\t\tmax_count = 138;\n\t\t\tmin_count = 3;\n\t\t}\n\t\ttree[(max_code + 1) * 2 + 1] = 0xffff; // guard\n\n\t\tfor (let n = 0; n <= max_code; n++) {\n\t\t\tcurlen = nextlen;\n\t\t\tnextlen = tree[(n + 1) * 2 + 1];\n\t\t\tif (++count < max_count && curlen == nextlen) {\n\t\t\t\tcontinue;\n\t\t\t} else if (count < min_count) {\n\t\t\t\tbl_tree[curlen * 2] += count;\n\t\t\t} else if (curlen !== 0) {\n\t\t\t\tif (curlen != prevlen)\n\t\t\t\t\tbl_tree[curlen * 2]++;\n\t\t\t\tbl_tree[REP_3_6 * 2]++;\n\t\t\t} else if (count <= 10) {\n\t\t\t\tbl_tree[REPZ_3_10 * 2]++;\n\t\t\t} else {\n\t\t\t\tbl_tree[REPZ_11_138 * 2]++;\n\t\t\t}\n\t\t\tcount = 0;\n\t\t\tprevlen = curlen;\n\t\t\tif (nextlen === 0) {\n\t\t\t\tmax_count = 138;\n\t\t\t\tmin_count = 3;\n\t\t\t} else if (curlen == nextlen) {\n\t\t\t\tmax_count = 6;\n\t\t\t\tmin_count = 3;\n\t\t\t} else {\n\t\t\t\tmax_count = 7;\n\t\t\t\tmin_count = 4;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Construct the Huffman tree for the bit lengths and return the index in\n\t// bl_order of the last bit length code to send.\n\tfunction build_bl_tree() {\n\t\tlet max_blindex; // index of last bit length code of non zero freq\n\n\t\t// Determine the bit length frequencies for literal and distance trees\n\t\tscan_tree(dyn_ltree, l_desc.max_code);\n\t\tscan_tree(dyn_dtree, d_desc.max_code);\n\n\t\t// Build the bit length tree:\n\t\tbl_desc.build_tree(that);\n\t\t// opt_len now includes the length of the tree representations, except\n\t\t// the lengths of the bit lengths codes and the 5+5+4 bits for the\n\t\t// counts.\n\n\t\t// Determine the number of bit length codes to send. The pkzip format\n\t\t// requires that at least 4 bit length codes be sent. (appnote.txt says\n\t\t// 3 but the actual value used is 4.)\n\t\tfor (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n\t\t\tif (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0)\n\t\t\t\tbreak;\n\t\t}\n\t\t// Update opt_len to include the bit length tree and counts\n\t\tthat.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n\n\t\treturn max_blindex;\n\t}\n\n\t// Output a byte on the stream.\n\t// IN assertion: there is enough room in pending_buf.\n\tfunction put_byte(p) {\n\t\tthat.pending_buf[that.pending++] = p;\n\t}\n\n\tfunction put_short(w) {\n\t\tput_byte(w & 0xff);\n\t\tput_byte((w >>> 8) & 0xff);\n\t}\n\n\tfunction putShortMSB(b) {\n\t\tput_byte((b >> 8) & 0xff);\n\t\tput_byte((b & 0xff) & 0xff);\n\t}\n\n\tfunction send_bits(value, length) {\n\t\tlet val;\n\t\tconst len = length;\n\t\tif (bi_valid > Buf_size - len) {\n\t\t\tval = value;\n\t\t\t// bi_buf |= (val << bi_valid);\n\t\t\tbi_buf |= ((val << bi_valid) & 0xffff);\n\t\t\tput_short(bi_buf);\n\t\t\tbi_buf = val >>> (Buf_size - bi_valid);\n\t\t\tbi_valid += len - Buf_size;\n\t\t} else {\n\t\t\t// bi_buf |= (value) << bi_valid;\n\t\t\tbi_buf |= (((value) << bi_valid) & 0xffff);\n\t\t\tbi_valid += len;\n\t\t}\n\t}\n\n\tfunction send_code(c, tree) {\n\t\tconst c2 = c * 2;\n\t\tsend_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);\n\t}\n\n\t// Send a literal or distance tree in compressed form, using the codes in\n\t// bl_tree.\n\tfunction send_tree(tree,// the tree to be sent\n\t\tmax_code // and its largest code of non zero frequency\n\t) {\n\t\tlet n; // iterates over all tree elements\n\t\tlet prevlen = -1; // last emitted length\n\t\tlet curlen; // length of current code\n\t\tlet nextlen = tree[0 * 2 + 1]; // length of next code\n\t\tlet count = 0; // repeat count of the current code\n\t\tlet max_count = 7; // max repeat count\n\t\tlet min_count = 4; // min repeat count\n\n\t\tif (nextlen === 0) {\n\t\t\tmax_count = 138;\n\t\t\tmin_count = 3;\n\t\t}\n\n\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\tcurlen = nextlen;\n\t\t\tnextlen = tree[(n + 1) * 2 + 1];\n\t\t\tif (++count < max_count && curlen == nextlen) {\n\t\t\t\tcontinue;\n\t\t\t} else if (count < min_count) {\n\t\t\t\tdo {\n\t\t\t\t\tsend_code(curlen, bl_tree);\n\t\t\t\t} while (--count !== 0);\n\t\t\t} else if (curlen !== 0) {\n\t\t\t\tif (curlen != prevlen) {\n\t\t\t\t\tsend_code(curlen, bl_tree);\n\t\t\t\t\tcount--;\n\t\t\t\t}\n\t\t\t\tsend_code(REP_3_6, bl_tree);\n\t\t\t\tsend_bits(count - 3, 2);\n\t\t\t} else if (count <= 10) {\n\t\t\t\tsend_code(REPZ_3_10, bl_tree);\n\t\t\t\tsend_bits(count - 3, 3);\n\t\t\t} else {\n\t\t\t\tsend_code(REPZ_11_138, bl_tree);\n\t\t\t\tsend_bits(count - 11, 7);\n\t\t\t}\n\t\t\tcount = 0;\n\t\t\tprevlen = curlen;\n\t\t\tif (nextlen === 0) {\n\t\t\t\tmax_count = 138;\n\t\t\t\tmin_count = 3;\n\t\t\t} else if (curlen == nextlen) {\n\t\t\t\tmax_count = 6;\n\t\t\t\tmin_count = 3;\n\t\t\t} else {\n\t\t\t\tmax_count = 7;\n\t\t\t\tmin_count = 4;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Send the header for a block using dynamic Huffman trees: the counts, the\n\t// lengths of the bit length codes, the literal tree and the distance tree.\n\t// IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n\tfunction send_all_trees(lcodes, dcodes, blcodes) {\n\t\tlet rank; // index in bl_order\n\n\t\tsend_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\n\t\tsend_bits(dcodes - 1, 5);\n\t\tsend_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt\n\t\tfor (rank = 0; rank < blcodes; rank++) {\n\t\t\tsend_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);\n\t\t}\n\t\tsend_tree(dyn_ltree, lcodes - 1); // literal tree\n\t\tsend_tree(dyn_dtree, dcodes - 1); // distance tree\n\t}\n\n\t// Flush the bit buffer, keeping at most 7 bits in it.\n\tfunction bi_flush() {\n\t\tif (bi_valid == 16) {\n\t\t\tput_short(bi_buf);\n\t\t\tbi_buf = 0;\n\t\t\tbi_valid = 0;\n\t\t} else if (bi_valid >= 8) {\n\t\t\tput_byte(bi_buf & 0xff);\n\t\t\tbi_buf >>>= 8;\n\t\t\tbi_valid -= 8;\n\t\t}\n\t}\n\n\t// Send one empty static block to give enough lookahead for inflate.\n\t// This takes 10 bits, of which 7 may remain in the bit buffer.\n\t// The current inflate code requires 9 bits of lookahead. If the\n\t// last two codes for the previous block (real code plus EOB) were coded\n\t// on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode\n\t// the last real code. In this case we send two empty static blocks instead\n\t// of one. (There are no problems if the previous block is stored or fixed.)\n\t// To simplify the code, we assume the worst case of last real code encoded\n\t// on one bit only.\n\tfunction _tr_align() {\n\t\tsend_bits(STATIC_TREES << 1, 3);\n\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\n\n\t\tbi_flush();\n\n\t\t// Of the 10 bits for the empty block, we have already sent\n\t\t// (10 - bi_valid) bits. The lookahead for the last real code (before\n\t\t// the EOB of the previous block) was thus at least one plus the length\n\t\t// of the EOB plus what we have just sent of the empty static block.\n\t\tif (1 + last_eob_len + 10 - bi_valid < 9) {\n\t\t\tsend_bits(STATIC_TREES << 1, 3);\n\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\n\t\t\tbi_flush();\n\t\t}\n\t\tlast_eob_len = 7;\n\t}\n\n\t// Save the match info and tally the frequency counts. Return true if\n\t// the current block must be flushed.\n\tfunction _tr_tally(dist, // distance of matched string\n\t\tlc // match length-MIN_MATCH or unmatched char (if dist==0)\n\t) {\n\t\tlet out_length, in_length, dcode;\n\t\tthat.dist_buf[last_lit] = dist;\n\t\tthat.lc_buf[last_lit] = lc & 0xff;\n\t\tlast_lit++;\n\n\t\tif (dist === 0) {\n\t\t\t// lc is the unmatched char\n\t\t\tdyn_ltree[lc * 2]++;\n\t\t} else {\n\t\t\tmatches++;\n\t\t\t// Here, lc is the match length - MIN_MATCH\n\t\t\tdist--; // dist = match distance - 1\n\t\t\tdyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;\n\t\t\tdyn_dtree[Tree.d_code(dist) * 2]++;\n\t\t}\n\n\t\tif ((last_lit & 0x1fff) === 0 && level > 2) {\n\t\t\t// Compute an upper bound for the compressed length\n\t\t\tout_length = last_lit * 8;\n\t\t\tin_length = strstart - block_start;\n\t\t\tfor (dcode = 0; dcode < D_CODES; dcode++) {\n\t\t\t\tout_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);\n\t\t\t}\n\t\t\tout_length >>>= 3;\n\t\t\tif ((matches < Math.floor(last_lit / 2)) && out_length < Math.floor(in_length / 2))\n\t\t\t\treturn true;\n\t\t}\n\n\t\treturn (last_lit == lit_bufsize - 1);\n\t\t// We avoid equality with lit_bufsize because of wraparound at 64K\n\t\t// on 16 bit machines and because stored blocks are restricted to\n\t\t// 64K-1 bytes.\n\t}\n\n\t// Send the block data compressed using the given Huffman trees\n\tfunction compress_block(ltree, dtree) {\n\t\tlet dist; // distance of matched string\n\t\tlet lc; // match length or unmatched char (if dist === 0)\n\t\tlet lx = 0; // running index in dist_buf and lc_buf\n\t\tlet code; // the code to send\n\t\tlet extra; // number of extra bits to send\n\n\t\tif (last_lit !== 0) {\n\t\t\tdo {\n\t\t\t\tdist = that.dist_buf[lx];\n\t\t\t\tlc = that.lc_buf[lx];\n\t\t\t\tlx++;\n\n\t\t\t\tif (dist === 0) {\n\t\t\t\t\tsend_code(lc, ltree); // send a literal byte\n\t\t\t\t} else {\n\t\t\t\t\t// Here, lc is the match length - MIN_MATCH\n\t\t\t\t\tcode = Tree._length_code[lc];\n\n\t\t\t\t\tsend_code(code + LITERALS + 1, ltree); // send the length\n\t\t\t\t\t// code\n\t\t\t\t\textra = Tree.extra_lbits[code];\n\t\t\t\t\tif (extra !== 0) {\n\t\t\t\t\t\tlc -= Tree.base_length[code];\n\t\t\t\t\t\tsend_bits(lc, extra); // send the extra length bits\n\t\t\t\t\t}\n\t\t\t\t\tdist--; // dist is now the match distance - 1\n\t\t\t\t\tcode = Tree.d_code(dist);\n\n\t\t\t\t\tsend_code(code, dtree); // send the distance code\n\t\t\t\t\textra = Tree.extra_dbits[code];\n\t\t\t\t\tif (extra !== 0) {\n\t\t\t\t\t\tdist -= Tree.base_dist[code];\n\t\t\t\t\t\tsend_bits(dist, extra); // send the extra distance bits\n\t\t\t\t\t}\n\t\t\t\t} // literal or match pair ?\n\t\t\t} while (lx < last_lit);\n\t\t}\n\n\t\tsend_code(END_BLOCK, ltree);\n\t\tlast_eob_len = ltree[END_BLOCK * 2 + 1];\n\t}\n\n\t// Flush the bit buffer and align the output on a byte boundary\n\tfunction bi_windup() {\n\t\tif (bi_valid > 8) {\n\t\t\tput_short(bi_buf);\n\t\t} else if (bi_valid > 0) {\n\t\t\tput_byte(bi_buf & 0xff);\n\t\t}\n\t\tbi_buf = 0;\n\t\tbi_valid = 0;\n\t}\n\n\t// Copy a stored block, storing first the length and its\n\t// one's complement if requested.\n\tfunction copy_block(buf, // the input data\n\t\tlen, // its length\n\t\theader // true if block header must be written\n\t) {\n\t\tbi_windup(); // align on byte boundary\n\t\tlast_eob_len = 8; // enough lookahead for inflate\n\n\t\tif (header) {\n\t\t\tput_short(len);\n\t\t\tput_short(~len);\n\t\t}\n\n\t\tthat.pending_buf.set(win.subarray(buf, buf + len), that.pending);\n\t\tthat.pending += len;\n\t}\n\n\t// Send a stored block\n\tfunction _tr_stored_block(buf, // input block\n\t\tstored_len, // length of input block\n\t\teof // true if this is the last block for a file\n\t) {\n\t\tsend_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type\n\t\tcopy_block(buf, stored_len, true); // with header\n\t}\n\n\t// Determine the best encoding for the current block: dynamic trees, static\n\t// trees or store, and output the encoded block to the zip file.\n\tfunction _tr_flush_block(buf, // input block, or NULL if too old\n\t\tstored_len, // length of input block\n\t\teof // true if this is the last block for a file\n\t) {\n\t\tlet opt_lenb, static_lenb;// opt_len and static_len in bytes\n\t\tlet max_blindex = 0; // index of last bit length code of non zero freq\n\n\t\t// Build the Huffman trees unless a stored block is forced\n\t\tif (level > 0) {\n\t\t\t// Construct the literal and distance trees\n\t\t\tl_desc.build_tree(that);\n\n\t\t\td_desc.build_tree(that);\n\n\t\t\t// At this point, opt_len and static_len are the total bit lengths\n\t\t\t// of\n\t\t\t// the compressed block data, excluding the tree representations.\n\n\t\t\t// Build the bit length tree for the above two trees, and get the\n\t\t\t// index\n\t\t\t// in bl_order of the last bit length code to send.\n\t\t\tmax_blindex = build_bl_tree();\n\n\t\t\t// Determine the best encoding. Compute first the block length in\n\t\t\t// bytes\n\t\t\topt_lenb = (that.opt_len + 3 + 7) >>> 3;\n\t\t\tstatic_lenb = (that.static_len + 3 + 7) >>> 3;\n\n\t\t\tif (static_lenb <= opt_lenb)\n\t\t\t\topt_lenb = static_lenb;\n\t\t} else {\n\t\t\topt_lenb = static_lenb = stored_len + 5; // force a stored block\n\t\t}\n\n\t\tif ((stored_len + 4 <= opt_lenb) && buf != -1) {\n\t\t\t// 4: two words for the lengths\n\t\t\t// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n\t\t\t// Otherwise we can't have processed more than WSIZE input bytes\n\t\t\t// since\n\t\t\t// the last block flush, because compression would have been\n\t\t\t// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n\t\t\t// transform a block into a stored block.\n\t\t\t_tr_stored_block(buf, stored_len, eof);\n\t\t} else if (static_lenb == opt_lenb) {\n\t\t\tsend_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);\n\t\t\tcompress_block(StaticTree.static_ltree, StaticTree.static_dtree);\n\t\t} else {\n\t\t\tsend_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);\n\t\t\tsend_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);\n\t\t\tcompress_block(dyn_ltree, dyn_dtree);\n\t\t}\n\n\t\t// The above check is made mod 2^32, for files larger than 512 MB\n\t\t// and uLong implemented on 32 bits.\n\n\t\tinit_block();\n\n\t\tif (eof) {\n\t\t\tbi_windup();\n\t\t}\n\t}\n\n\tfunction flush_block_only(eof) {\n\t\t_tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);\n\t\tblock_start = strstart;\n\t\tstrm.flush_pending();\n\t}\n\n\t// Fill the win when the lookahead becomes insufficient.\n\t// Updates strstart and lookahead.\n\t//\n\t// IN assertion: lookahead < MIN_LOOKAHEAD\n\t// OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n\t// At least one byte has been read, or avail_in === 0; reads are\n\t// performed for at least two bytes (required for the zip translate_eol\n\t// option -- not supported here).\n\tfunction fill_window() {\n\t\tlet n, m;\n\t\tlet p;\n\t\tlet more; // Amount of free space at the end of the win.\n\n\t\tdo {\n\t\t\tmore = (window_size - lookahead - strstart);\n\n\t\t\t// Deal with !@#$% 64K limit:\n\t\t\tif (more === 0 && strstart === 0 && lookahead === 0) {\n\t\t\t\tmore = w_size;\n\t\t\t} else if (more == -1) {\n\t\t\t\t// Very unlikely, but possible on 16 bit machine if strstart ==\n\t\t\t\t// 0\n\t\t\t\t// and lookahead == 1 (input done one byte at time)\n\t\t\t\tmore--;\n\n\t\t\t\t// If the win is almost full and there is insufficient\n\t\t\t\t// lookahead,\n\t\t\t\t// move the upper half to the lower one to make room in the\n\t\t\t\t// upper half.\n\t\t\t} else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {\n\t\t\t\twin.set(win.subarray(w_size, w_size + w_size), 0);\n\n\t\t\t\tmatch_start -= w_size;\n\t\t\t\tstrstart -= w_size; // we now have strstart >= MAX_DIST\n\t\t\t\tblock_start -= w_size;\n\n\t\t\t\t// Slide the hash table (could be avoided with 32 bit values\n\t\t\t\t// at the expense of memory usage). We slide even when level ==\n\t\t\t\t// 0\n\t\t\t\t// to keep the hash table consistent if we switch back to level\n\t\t\t\t// > 0\n\t\t\t\t// later. (Using level 0 permanently is not an optimal usage of\n\t\t\t\t// zlib, so we don't care about this pathological case.)\n\n\t\t\t\tn = hash_size;\n\t\t\t\tp = n;\n\t\t\t\tdo {\n\t\t\t\t\tm = (head[--p] & 0xffff);\n\t\t\t\t\thead[p] = (m >= w_size ? m - w_size : 0);\n\t\t\t\t} while (--n !== 0);\n\n\t\t\t\tn = w_size;\n\t\t\t\tp = n;\n\t\t\t\tdo {\n\t\t\t\t\tm = (prev[--p] & 0xffff);\n\t\t\t\t\tprev[p] = (m >= w_size ? m - w_size : 0);\n\t\t\t\t\t// If n is not on any hash chain, prev[n] is garbage but\n\t\t\t\t\t// its value will never be used.\n\t\t\t\t} while (--n !== 0);\n\t\t\t\tmore += w_size;\n\t\t\t}\n\n\t\t\tif (strm.avail_in === 0)\n\t\t\t\treturn;\n\n\t\t\t// If there was no sliding:\n\t\t\t// strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n\t\t\t// more == window_size - lookahead - strstart\n\t\t\t// => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n\t\t\t// => more >= window_size - 2*WSIZE + 2\n\t\t\t// In the BIG_MEM or MMAP case (not yet supported),\n\t\t\t// window_size == input_size + MIN_LOOKAHEAD &&\n\t\t\t// strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n\t\t\t// Otherwise, window_size == 2*WSIZE so more >= 2.\n\t\t\t// If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n\n\t\t\tn = strm.read_buf(win, strstart + lookahead, more);\n\t\t\tlookahead += n;\n\n\t\t\t// Initialize the hash value now that we have some input:\n\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\tins_h = win[strstart] & 0xff;\n\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (win[strstart + 1] & 0xff)) & hash_mask;\n\t\t\t}\n\t\t\t// If the whole input has less than MIN_MATCH bytes, ins_h is\n\t\t\t// garbage,\n\t\t\t// but this is not important since only literal bytes will be\n\t\t\t// emitted.\n\t\t} while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);\n\t}\n\n\t// Copy without compression as much as possible from the input stream,\n\t// return\n\t// the current block state.\n\t// This function does not insert new strings in the dictionary since\n\t// uncompressible data is probably not useful. This function is used\n\t// only for the level=0 compression option.\n\t// NOTE: this function should be optimized to avoid extra copying from\n\t// win to pending_buf.\n\tfunction deflate_stored(flush) {\n\t\t// Stored blocks are limited to 0xffff bytes, pending_buf is limited\n\t\t// to pending_buf_size, and each stored block has a 5 byte header:\n\n\t\tlet max_block_size = 0xffff;\n\t\tlet max_start;\n\n\t\tif (max_block_size > pending_buf_size - 5) {\n\t\t\tmax_block_size = pending_buf_size - 5;\n\t\t}\n\n\t\t// Copy as much as possible from input to output:\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) {\n\t\t\t// Fill the win as much as possible:\n\t\t\tif (lookahead <= 1) {\n\t\t\t\tfill_window();\n\t\t\t\tif (lookahead === 0 && flush == Z_NO_FLUSH)\n\t\t\t\t\treturn NeedMore;\n\t\t\t\tif (lookahead === 0)\n\t\t\t\t\tbreak; // flush the current block\n\t\t\t}\n\n\t\t\tstrstart += lookahead;\n\t\t\tlookahead = 0;\n\n\t\t\t// Emit a stored block if pending_buf will be full:\n\t\t\tmax_start = block_start + max_block_size;\n\t\t\tif (strstart === 0 || strstart >= max_start) {\n\t\t\t\t// strstart === 0 is possible when wraparound on 16-bit machine\n\t\t\t\tlookahead = (strstart - max_start);\n\t\t\t\tstrstart = max_start;\n\n\t\t\t\tflush_block_only(false);\n\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\treturn NeedMore;\n\n\t\t\t}\n\n\t\t\t// Flush if we may have to slide, otherwise block_start may become\n\t\t\t// negative and the data will be gone:\n\t\t\tif (strstart - block_start >= w_size - MIN_LOOKAHEAD) {\n\t\t\t\tflush_block_only(false);\n\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\treturn NeedMore;\n\t\t\t}\n\t\t}\n\n\t\tflush_block_only(flush == Z_FINISH);\n\t\tif (strm.avail_out === 0)\n\t\t\treturn (flush == Z_FINISH) ? FinishStarted : NeedMore;\n\n\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t}\n\n\tfunction longest_match(cur_match) {\n\t\tlet chain_length = max_chain_length; // max hash chain length\n\t\tlet scan = strstart; // current string\n\t\tlet match; // matched string\n\t\tlet len; // length of current match\n\t\tlet best_len = prev_length; // best match length so far\n\t\tconst limit = strstart > (w_size - MIN_LOOKAHEAD) ? strstart - (w_size - MIN_LOOKAHEAD) : 0;\n\t\tlet _nice_match = nice_match;\n\n\t\t// Stop when cur_match becomes <= limit. To simplify the code,\n\t\t// we prevent matches with the string of win index 0.\n\n\t\tconst wmask = w_mask;\n\n\t\tconst strend = strstart + MAX_MATCH;\n\t\tlet scan_end1 = win[scan + best_len - 1];\n\t\tlet scan_end = win[scan + best_len];\n\n\t\t// The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of\n\t\t// 16.\n\t\t// It is easy to get rid of this optimization if necessary.\n\n\t\t// Do not waste too much time if we already have a good match:\n\t\tif (prev_length >= good_match) {\n\t\t\tchain_length >>= 2;\n\t\t}\n\n\t\t// Do not look for matches beyond the end of the input. This is\n\t\t// necessary\n\t\t// to make deflate deterministic.\n\t\tif (_nice_match > lookahead)\n\t\t\t_nice_match = lookahead;\n\n\t\tdo {\n\t\t\tmatch = cur_match;\n\n\t\t\t// Skip to next match if the match length cannot increase\n\t\t\t// or if the match length is less than 2:\n\t\t\tif (win[match + best_len] != scan_end || win[match + best_len - 1] != scan_end1 || win[match] != win[scan]\n\t\t\t\t|| win[++match] != win[scan + 1])\n\t\t\t\tcontinue;\n\n\t\t\t// The check at best_len-1 can be removed because it will be made\n\t\t\t// again later. (This heuristic is not always a win.)\n\t\t\t// It is not necessary to compare scan[2] and match[2] since they\n\t\t\t// are always equal when the other bytes match, given that\n\t\t\t// the hash keys are equal and that HASH_BITS >= 8.\n\t\t\tscan += 2;\n\t\t\tmatch++;\n\n\t\t\t// We check for insufficient lookahead only every 8th comparison;\n\t\t\t// the 256th check will be made at strstart+258.\n\t\t\t// eslint-disable-next-line no-empty\n\t\t\tdo {\n\t\t\t\t// empty block\n\t\t\t} while (win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match]\n\t\t\t&& win[++scan] == win[++match] && win[++scan] == win[++match] && win[++scan] == win[++match]\n\t\t\t&& win[++scan] == win[++match] && win[++scan] == win[++match] && scan < strend);\n\n\t\t\tlen = MAX_MATCH - (strend - scan);\n\t\t\tscan = strend - MAX_MATCH;\n\n\t\t\tif (len > best_len) {\n\t\t\t\tmatch_start = cur_match;\n\t\t\t\tbest_len = len;\n\t\t\t\tif (len >= _nice_match)\n\t\t\t\t\tbreak;\n\t\t\t\tscan_end1 = win[scan + best_len - 1];\n\t\t\t\tscan_end = win[scan + best_len];\n\t\t\t}\n\n\t\t} while ((cur_match = (prev[cur_match & wmask] & 0xffff)) > limit && --chain_length !== 0);\n\n\t\tif (best_len <= lookahead)\n\t\t\treturn best_len;\n\t\treturn lookahead;\n\t}\n\n\t// Compress as much as possible from the input stream, return the current\n\t// block state.\n\t// This function does not perform lazy evaluation of matches and inserts\n\t// new strings in the dictionary only for unmatched strings or for short\n\t// matches. It is used only for the fast compression options.\n\tfunction deflate_fast(flush) {\n\t\t// short hash_head = 0; // head of the hash chain\n\t\tlet hash_head = 0; // head of the hash chain\n\t\tlet bflush; // set if current block must be flushed\n\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) {\n\t\t\t// Make sure that we always have enough lookahead, except\n\t\t\t// at the end of the input file. We need MAX_MATCH bytes\n\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\n\t\t\t// string following the next match.\n\t\t\tif (lookahead < MIN_LOOKAHEAD) {\n\t\t\t\tfill_window();\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n\t\t\t\t\treturn NeedMore;\n\t\t\t\t}\n\t\t\t\tif (lookahead === 0)\n\t\t\t\t\tbreak; // flush the current block\n\t\t\t}\n\n\t\t\t// Insert the string win[strstart .. strstart+2] in the\n\t\t\t// dictionary, and set hash_head to the head of the hash chain:\n\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (win[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\n\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\thead[ins_h] = strstart;\n\t\t\t}\n\n\t\t\t// Find the longest match, discarding those <= prev_length.\n\t\t\t// At this point we have always match_length < MIN_MATCH\n\n\t\t\tif (hash_head !== 0 && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t// To simplify the code, we prevent matches with the string\n\t\t\t\t// of win index 0 (in particular we have to avoid a match\n\t\t\t\t// of the string with itself at the start of the input file).\n\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\n\t\t\t\t\tmatch_length = longest_match(hash_head);\n\t\t\t\t}\n\t\t\t\t// longest_match() sets match_start\n\t\t\t}\n\t\t\tif (match_length >= MIN_MATCH) {\n\t\t\t\t// check_match(strstart, match_start, match_length);\n\n\t\t\t\tbflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);\n\n\t\t\t\tlookahead -= match_length;\n\n\t\t\t\t// Insert new strings in the hash table only if the match length\n\t\t\t\t// is not too large. This saves time but degrades compression.\n\t\t\t\tif (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {\n\t\t\t\t\tmatch_length--; // string at strstart already in hash table\n\t\t\t\t\tdo {\n\t\t\t\t\t\tstrstart++;\n\n\t\t\t\t\t\tins_h = ((ins_h << hash_shift) ^ (win[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\t\thead[ins_h] = strstart;\n\n\t\t\t\t\t\t// strstart never exceeds WSIZE-MAX_MATCH, so there are\n\t\t\t\t\t\t// always MIN_MATCH bytes ahead.\n\t\t\t\t\t} while (--match_length !== 0);\n\t\t\t\t\tstrstart++;\n\t\t\t\t} else {\n\t\t\t\t\tstrstart += match_length;\n\t\t\t\t\tmatch_length = 0;\n\t\t\t\t\tins_h = win[strstart] & 0xff;\n\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (win[strstart + 1] & 0xff)) & hash_mask;\n\t\t\t\t\t// If lookahead < MIN_MATCH, ins_h is garbage, but it does\n\t\t\t\t\t// not\n\t\t\t\t\t// matter since it will be recomputed at next deflate call.\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// No match, output a literal byte\n\n\t\t\t\tbflush = _tr_tally(0, win[strstart] & 0xff);\n\t\t\t\tlookahead--;\n\t\t\t\tstrstart++;\n\t\t\t}\n\t\t\tif (bflush) {\n\n\t\t\t\tflush_block_only(false);\n\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\treturn NeedMore;\n\t\t\t}\n\t\t}\n\n\t\tflush_block_only(flush == Z_FINISH);\n\t\tif (strm.avail_out === 0) {\n\t\t\tif (flush == Z_FINISH)\n\t\t\t\treturn FinishStarted;\n\t\t\telse\n\t\t\t\treturn NeedMore;\n\t\t}\n\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t}\n\n\t// Same as above, but achieves better compression. We use a lazy\n\t// evaluation for matches: a match is finally adopted only if there is\n\t// no better match at the next win position.\n\tfunction deflate_slow(flush) {\n\t\t// short hash_head = 0; // head of hash chain\n\t\tlet hash_head = 0; // head of hash chain\n\t\tlet bflush; // set if current block must be flushed\n\t\tlet max_insert;\n\n\t\t// Process the input block.\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) {\n\t\t\t// Make sure that we always have enough lookahead, except\n\t\t\t// at the end of the input file. We need MAX_MATCH bytes\n\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\n\t\t\t// string following the next match.\n\n\t\t\tif (lookahead < MIN_LOOKAHEAD) {\n\t\t\t\tfill_window();\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n\t\t\t\t\treturn NeedMore;\n\t\t\t\t}\n\t\t\t\tif (lookahead === 0)\n\t\t\t\t\tbreak; // flush the current block\n\t\t\t}\n\n\t\t\t// Insert the string win[strstart .. strstart+2] in the\n\t\t\t// dictionary, and set hash_head to the head of the hash chain:\n\n\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (win[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\thead[ins_h] = strstart;\n\t\t\t}\n\n\t\t\t// Find the longest match, discarding those <= prev_length.\n\t\t\tprev_length = match_length;\n\t\t\tprev_match = match_start;\n\t\t\tmatch_length = MIN_MATCH - 1;\n\n\t\t\tif (hash_head !== 0 && prev_length < max_lazy_match && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t// To simplify the code, we prevent matches with the string\n\t\t\t\t// of win index 0 (in particular we have to avoid a match\n\t\t\t\t// of the string with itself at the start of the input file).\n\n\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\n\t\t\t\t\tmatch_length = longest_match(hash_head);\n\t\t\t\t}\n\t\t\t\t// longest_match() sets match_start\n\n\t\t\t\tif (match_length <= 5 && (strategy == Z_FILTERED || (match_length == MIN_MATCH && strstart - match_start > 4096))) {\n\n\t\t\t\t\t// If prev_match is also MIN_MATCH, match_start is garbage\n\t\t\t\t\t// but we will ignore the current match anyway.\n\t\t\t\t\tmatch_length = MIN_MATCH - 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If there was a match at the previous step and the current\n\t\t\t// match is not better, output the previous match:\n\t\t\tif (prev_length >= MIN_MATCH && match_length <= prev_length) {\n\t\t\t\tmax_insert = strstart + lookahead - MIN_MATCH;\n\t\t\t\t// Do not insert strings in hash table beyond this.\n\n\t\t\t\t// check_match(strstart-1, prev_match, prev_length);\n\n\t\t\t\tbflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);\n\n\t\t\t\t// Insert in hash table all strings up to the end of the match.\n\t\t\t\t// strstart-1 and strstart are already inserted. If there is not\n\t\t\t\t// enough lookahead, the last two strings are not inserted in\n\t\t\t\t// the hash table.\n\t\t\t\tlookahead -= prev_length - 1;\n\t\t\t\tprev_length -= 2;\n\t\t\t\tdo {\n\t\t\t\t\tif (++strstart <= max_insert) {\n\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (win[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t\t}\n\t\t\t\t} while (--prev_length !== 0);\n\t\t\t\tmatch_available = 0;\n\t\t\t\tmatch_length = MIN_MATCH - 1;\n\t\t\t\tstrstart++;\n\n\t\t\t\tif (bflush) {\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t}\n\t\t\t} else if (match_available !== 0) {\n\n\t\t\t\t// If there was no match at the previous position, output a\n\t\t\t\t// single literal. If there was a match but the current match\n\t\t\t\t// is longer, truncate the previous match to a single literal.\n\n\t\t\t\tbflush = _tr_tally(0, win[strstart - 1] & 0xff);\n\n\t\t\t\tif (bflush) {\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t}\n\t\t\t\tstrstart++;\n\t\t\t\tlookahead--;\n\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\treturn NeedMore;\n\t\t\t} else {\n\t\t\t\t// There is no previous match to compare with, wait for\n\t\t\t\t// the next step to decide.\n\n\t\t\t\tmatch_available = 1;\n\t\t\t\tstrstart++;\n\t\t\t\tlookahead--;\n\t\t\t}\n\t\t}\n\n\t\tif (match_available !== 0) {\n\t\t\tbflush = _tr_tally(0, win[strstart - 1] & 0xff);\n\t\t\tmatch_available = 0;\n\t\t}\n\t\tflush_block_only(flush == Z_FINISH);\n\n\t\tif (strm.avail_out === 0) {\n\t\t\tif (flush == Z_FINISH)\n\t\t\t\treturn FinishStarted;\n\t\t\telse\n\t\t\t\treturn NeedMore;\n\t\t}\n\n\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t}\n\n\tfunction deflateReset(strm) {\n\t\tstrm.total_in = strm.total_out = 0;\n\t\tstrm.msg = null; //\n\n\t\tthat.pending = 0;\n\t\tthat.pending_out = 0;\n\n\t\tstatus = BUSY_STATE;\n\n\t\tlast_flush = Z_NO_FLUSH;\n\n\t\ttr_init();\n\t\tlm_init();\n\t\treturn Z_OK;\n\t}\n\n\tthat.deflateInit = function (strm, _level, bits, _method, memLevel, _strategy) {\n\t\tif (!_method)\n\t\t\t_method = Z_DEFLATED;\n\t\tif (!memLevel)\n\t\t\tmemLevel = DEF_MEM_LEVEL;\n\t\tif (!_strategy)\n\t\t\t_strategy = Z_DEFAULT_STRATEGY;\n\n\t\t// byte[] my_version=ZLIB_VERSION;\n\n\t\t//\n\t\t// if (!version || version[0] != my_version[0]\n\t\t// || stream_size != sizeof(z_stream)) {\n\t\t// return Z_VERSION_ERROR;\n\t\t// }\n\n\t\tstrm.msg = null;\n\n\t\tif (_level == Z_DEFAULT_COMPRESSION)\n\t\t\t_level = 6;\n\n\t\tif (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0\n\t\t\t|| _strategy > Z_HUFFMAN_ONLY) {\n\t\t\treturn Z_STREAM_ERROR;\n\t\t}\n\n\t\tstrm.dstate = that;\n\n\t\tw_bits = bits;\n\t\tw_size = 1 << w_bits;\n\t\tw_mask = w_size - 1;\n\n\t\thash_bits = memLevel + 7;\n\t\thash_size = 1 << hash_bits;\n\t\thash_mask = hash_size - 1;\n\t\thash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n\t\twin = new Uint8Array(w_size * 2);\n\t\tprev = [];\n\t\thead = [];\n\n\t\tlit_bufsize = 1 << (memLevel + 6); // 16K elements by default\n\n\t\tthat.pending_buf = new Uint8Array(lit_bufsize * 4);\n\t\tpending_buf_size = lit_bufsize * 4;\n\n\t\tthat.dist_buf = new Uint16Array(lit_bufsize);\n\t\tthat.lc_buf = new Uint8Array(lit_bufsize);\n\n\t\tlevel = _level;\n\n\t\tstrategy = _strategy;\n\n\t\treturn deflateReset(strm);\n\t};\n\n\tthat.deflateEnd = function () {\n\t\tif (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {\n\t\t\treturn Z_STREAM_ERROR;\n\t\t}\n\t\t// Deallocate in reverse order of allocations:\n\t\tthat.lc_buf = null;\n\t\tthat.dist_buf = null;\n\t\tthat.pending_buf = null;\n\t\thead = null;\n\t\tprev = null;\n\t\twin = null;\n\t\t// free\n\t\tthat.dstate = null;\n\t\treturn status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;\n\t};\n\n\tthat.deflateParams = function (strm, _level, _strategy) {\n\t\tlet err = Z_OK;\n\n\t\tif (_level == Z_DEFAULT_COMPRESSION) {\n\t\t\t_level = 6;\n\t\t}\n\t\tif (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\n\t\t\treturn Z_STREAM_ERROR;\n\t\t}\n\n\t\tif (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {\n\t\t\t// Flush the last buffer:\n\t\t\terr = strm.deflate(Z_PARTIAL_FLUSH);\n\t\t}\n\n\t\tif (level != _level) {\n\t\t\tlevel = _level;\n\t\t\tmax_lazy_match = config_table[level].max_lazy;\n\t\t\tgood_match = config_table[level].good_length;\n\t\t\tnice_match = config_table[level].nice_length;\n\t\t\tmax_chain_length = config_table[level].max_chain;\n\t\t}\n\t\tstrategy = _strategy;\n\t\treturn err;\n\t};\n\n\tthat.deflateSetDictionary = function (_strm, dictionary, dictLength) {\n\t\tlet length = dictLength;\n\t\tlet n, index = 0;\n\n\t\tif (!dictionary || status != INIT_STATE)\n\t\t\treturn Z_STREAM_ERROR;\n\n\t\tif (length < MIN_MATCH)\n\t\t\treturn Z_OK;\n\t\tif (length > w_size - MIN_LOOKAHEAD) {\n\t\t\tlength = w_size - MIN_LOOKAHEAD;\n\t\t\tindex = dictLength - length; // use the tail of the dictionary\n\t\t}\n\t\twin.set(dictionary.subarray(index, index + length), 0);\n\n\t\tstrstart = length;\n\t\tblock_start = length;\n\n\t\t// Insert all strings in the hash table (except for the last two bytes).\n\t\t// s->lookahead stays null, so s->ins_h will be recomputed at the next\n\t\t// call of fill_window.\n\n\t\tins_h = win[0] & 0xff;\n\t\tins_h = (((ins_h) << hash_shift) ^ (win[1] & 0xff)) & hash_mask;\n\n\t\tfor (n = 0; n <= length - MIN_MATCH; n++) {\n\t\t\tins_h = (((ins_h) << hash_shift) ^ (win[(n) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\tprev[n & w_mask] = head[ins_h];\n\t\t\thead[ins_h] = n;\n\t\t}\n\t\treturn Z_OK;\n\t};\n\n\tthat.deflate = function (_strm, flush) {\n\t\tlet i, header, level_flags, old_flush, bstate;\n\n\t\tif (flush > Z_FINISH || flush < 0) {\n\t\t\treturn Z_STREAM_ERROR;\n\t\t}\n\n\t\tif (!_strm.next_out || (!_strm.next_in && _strm.avail_in !== 0) || (status == FINISH_STATE && flush != Z_FINISH)) {\n\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_STREAM_ERROR)];\n\t\t\treturn Z_STREAM_ERROR;\n\t\t}\n\t\tif (_strm.avail_out === 0) {\n\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\treturn Z_BUF_ERROR;\n\t\t}\n\n\t\tstrm = _strm; // just in case\n\t\told_flush = last_flush;\n\t\tlast_flush = flush;\n\n\t\t// Write the zlib header\n\t\tif (status == INIT_STATE) {\n\t\t\theader = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;\n\t\t\tlevel_flags = ((level - 1) & 0xff) >> 1;\n\n\t\t\tif (level_flags > 3)\n\t\t\t\tlevel_flags = 3;\n\t\t\theader |= (level_flags << 6);\n\t\t\tif (strstart !== 0)\n\t\t\t\theader |= PRESET_DICT;\n\t\t\theader += 31 - (header % 31);\n\n\t\t\tstatus = BUSY_STATE;\n\t\t\tputShortMSB(header);\n\t\t}\n\n\t\t// Flush as much pending output as possible\n\t\tif (that.pending !== 0) {\n\t\t\tstrm.flush_pending();\n\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t// console.log(\" avail_out==0\");\n\t\t\t\t// Since avail_out is 0, deflate will be called again with\n\t\t\t\t// more output space, but possibly with both pending and\n\t\t\t\t// avail_in equal to zero. There won't be anything to do,\n\t\t\t\t// but this is not an error situation so make sure we\n\t\t\t\t// return OK instead of BUF_ERROR at next call of deflate:\n\t\t\t\tlast_flush = -1;\n\t\t\t\treturn Z_OK;\n\t\t\t}\n\n\t\t\t// Make sure there is something to do and avoid duplicate\n\t\t\t// consecutive\n\t\t\t// flushes. For repeated and useless calls with Z_FINISH, we keep\n\t\t\t// returning Z_STREAM_END instead of Z_BUFF_ERROR.\n\t\t} else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {\n\t\t\tstrm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\treturn Z_BUF_ERROR;\n\t\t}\n\n\t\t// User must not provide more input after the first FINISH:\n\t\tif (status == FINISH_STATE && strm.avail_in !== 0) {\n\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\treturn Z_BUF_ERROR;\n\t\t}\n\n\t\t// Start a new block or continue the current one.\n\t\tif (strm.avail_in !== 0 || lookahead !== 0 || (flush != Z_NO_FLUSH && status != FINISH_STATE)) {\n\t\t\tbstate = -1;\n\t\t\tswitch (config_table[level].func) {\n\t\t\t\tcase STORED:\n\t\t\t\t\tbstate = deflate_stored(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FAST:\n\t\t\t\t\tbstate = deflate_fast(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SLOW:\n\t\t\t\t\tbstate = deflate_slow(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t}\n\n\t\t\tif (bstate == FinishStarted || bstate == FinishDone) {\n\t\t\t\tstatus = FINISH_STATE;\n\t\t\t}\n\t\t\tif (bstate == NeedMore || bstate == FinishStarted) {\n\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR next call, see above\n\t\t\t\t}\n\t\t\t\treturn Z_OK;\n\t\t\t\t// If flush != Z_NO_FLUSH && avail_out === 0, the next call\n\t\t\t\t// of deflate should use the same flush parameter to make sure\n\t\t\t\t// that the flush is complete. So we don't have to output an\n\t\t\t\t// empty block here, this will be done at next call. This also\n\t\t\t\t// ensures that for a very small output buffer, we emit at most\n\t\t\t\t// one empty block.\n\t\t\t}\n\n\t\t\tif (bstate == BlockDone) {\n\t\t\t\tif (flush == Z_PARTIAL_FLUSH) {\n\t\t\t\t\t_tr_align();\n\t\t\t\t} else { // FULL_FLUSH or SYNC_FLUSH\n\t\t\t\t\t_tr_stored_block(0, 0, false);\n\t\t\t\t\t// For a full flush, this empty block will be recognized\n\t\t\t\t\t// as a special marker by inflate_sync().\n\t\t\t\t\tif (flush == Z_FULL_FLUSH) {\n\t\t\t\t\t\t// state.head[s.hash_size-1]=0;\n\t\t\t\t\t\tfor (i = 0; i < hash_size/*-1*/; i++)\n\t\t\t\t\t\t\t// forget history\n\t\t\t\t\t\t\thead[i] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstrm.flush_pending();\n\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR at next call, see above\n\t\t\t\t\treturn Z_OK;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (flush != Z_FINISH)\n\t\t\treturn Z_OK;\n\t\treturn Z_STREAM_END;\n\t};\n}\n\n// ZStream\n\nfunction ZStream() {\n\tconst that = this;\n\tthat.next_in_index = 0;\n\tthat.next_out_index = 0;\n\t// that.next_in; // next input byte\n\tthat.avail_in = 0; // number of bytes available at next_in\n\tthat.total_in = 0; // total nb of input bytes read so far\n\t// that.next_out; // next output byte should be put there\n\tthat.avail_out = 0; // remaining free space at next_out\n\tthat.total_out = 0; // total nb of bytes output so far\n\t// that.msg;\n\t// that.dstate;\n}\n\nZStream.prototype = {\n\tdeflateInit(level, bits) {\n\t\tconst that = this;\n\t\tthat.dstate = new Deflate();\n\t\tif (!bits)\n\t\t\tbits = MAX_BITS;\n\t\treturn that.dstate.deflateInit(that, level, bits);\n\t},\n\n\tdeflate(flush) {\n\t\tconst that = this;\n\t\tif (!that.dstate) {\n\t\t\treturn Z_STREAM_ERROR;\n\t\t}\n\t\treturn that.dstate.deflate(that, flush);\n\t},\n\n\tdeflateEnd() {\n\t\tconst that = this;\n\t\tif (!that.dstate)\n\t\t\treturn Z_STREAM_ERROR;\n\t\tconst ret = that.dstate.deflateEnd();\n\t\tthat.dstate = null;\n\t\treturn ret;\n\t},\n\n\tdeflateParams(level, strategy) {\n\t\tconst that = this;\n\t\tif (!that.dstate)\n\t\t\treturn Z_STREAM_ERROR;\n\t\treturn that.dstate.deflateParams(that, level, strategy);\n\t},\n\n\tdeflateSetDictionary(dictionary, dictLength) {\n\t\tconst that = this;\n\t\tif (!that.dstate)\n\t\t\treturn Z_STREAM_ERROR;\n\t\treturn that.dstate.deflateSetDictionary(that, dictionary, dictLength);\n\t},\n\n\t// Read a new buffer from the current input stream, update the\n\t// total number of bytes read. All deflate() input goes through\n\t// this function so some applications may wish to modify it to avoid\n\t// allocating a large strm->next_in buffer and copying from it.\n\t// (See also flush_pending()).\n\tread_buf(buf, start, size) {\n\t\tconst that = this;\n\t\tlet len = that.avail_in;\n\t\tif (len > size)\n\t\t\tlen = size;\n\t\tif (len === 0)\n\t\t\treturn 0;\n\t\tthat.avail_in -= len;\n\t\tbuf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);\n\t\tthat.next_in_index += len;\n\t\tthat.total_in += len;\n\t\treturn len;\n\t},\n\n\t// Flush as much pending output as possible. All deflate() output goes\n\t// through this function so some applications may wish to modify it\n\t// to avoid allocating a large strm->next_out buffer and copying into it.\n\t// (See also read_buf()).\n\tflush_pending() {\n\t\tconst that = this;\n\t\tlet len = that.dstate.pending;\n\n\t\tif (len > that.avail_out)\n\t\t\tlen = that.avail_out;\n\t\tif (len === 0)\n\t\t\treturn;\n\n\t\t// if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index\n\t\t// || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +\n\t\t// len)) {\n\t\t// console.log(that.dstate.pending_buf.length + \", \" + that.dstate.pending_out + \", \" + that.next_out.length + \", \" +\n\t\t// that.next_out_index + \", \" + len);\n\t\t// console.log(\"avail_out=\" + that.avail_out);\n\t\t// }\n\n\t\tthat.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);\n\n\t\tthat.next_out_index += len;\n\t\tthat.dstate.pending_out += len;\n\t\tthat.total_out += len;\n\t\tthat.avail_out -= len;\n\t\tthat.dstate.pending -= len;\n\t\tif (that.dstate.pending === 0) {\n\t\t\tthat.dstate.pending_out = 0;\n\t\t}\n\t}\n};\n\n// Deflate\n\nfunction ZipDeflate(options) {\n\tconst that = this;\n\tconst z = new ZStream();\n\tconst bufsize = getMaximumCompressedSize(options && options.chunkSize ? options.chunkSize : 64 * 1024);\n\tconst flush = Z_NO_FLUSH;\n\tconst buf = new Uint8Array(bufsize);\n\tlet level = options ? options.level : Z_DEFAULT_COMPRESSION;\n\tif (typeof level == \"undefined\")\n\t\tlevel = Z_DEFAULT_COMPRESSION;\n\tz.deflateInit(level);\n\tz.next_out = buf;\n\n\tthat.append = function (data, onprogress) {\n\t\tlet err, array, lastIndex = 0, bufferIndex = 0, bufferSize = 0;\n\t\tconst buffers = [];\n\t\tif (!data.length)\n\t\t\treturn;\n\t\tz.next_in_index = 0;\n\t\tz.next_in = data;\n\t\tz.avail_in = data.length;\n\t\tdo {\n\t\t\tz.next_out_index = 0;\n\t\t\tz.avail_out = bufsize;\n\t\t\terr = z.deflate(flush);\n\t\t\tif (err != Z_OK)\n\t\t\t\tthrow new Error(\"deflating: \" + z.msg);\n\t\t\tif (z.next_out_index)\n\t\t\t\tif (z.next_out_index == bufsize)\n\t\t\t\t\tbuffers.push(new Uint8Array(buf));\n\t\t\t\telse\n\t\t\t\t\tbuffers.push(buf.slice(0, z.next_out_index));\n\t\t\tbufferSize += z.next_out_index;\n\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n\t\t\t\tonprogress(z.next_in_index);\n\t\t\t\tlastIndex = z.next_in_index;\n\t\t\t}\n\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\tif (buffers.length > 1) {\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function (chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t} else {\n\t\t\tarray = buffers[0] || new Uint8Array();\n\t\t}\n\t\treturn array;\n\t};\n\tthat.flush = function () {\n\t\tlet err, array, bufferIndex = 0, bufferSize = 0;\n\t\tconst buffers = [];\n\t\tdo {\n\t\t\tz.next_out_index = 0;\n\t\t\tz.avail_out = bufsize;\n\t\t\terr = z.deflate(Z_FINISH);\n\t\t\tif (err != Z_STREAM_END && err != Z_OK)\n\t\t\t\tthrow new Error(\"deflating: \" + z.msg);\n\t\t\tif (bufsize - z.avail_out > 0)\n\t\t\t\tbuffers.push(buf.slice(0, z.next_out_index));\n\t\t\tbufferSize += z.next_out_index;\n\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\tz.deflateEnd();\n\t\tarray = new Uint8Array(bufferSize);\n\t\tbuffers.forEach(function (chunk) {\n\t\t\tarray.set(chunk, bufferIndex);\n\t\t\tbufferIndex += chunk.length;\n\t\t});\n\t\treturn array;\n\t};\n}\n\nfunction getMaximumCompressedSize(uncompressedSize) {\n\treturn uncompressedSize + (5 * (Math.floor(uncompressedSize / 16383) + 1));\n}\n\nexport {\n\tZipDeflate as Deflate\n};","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n// deno-lint-ignore-file no-this-alias prefer-const\n\n// Global\n\nconst MAX_BITS = 15;\n\nconst Z_OK = 0;\nconst Z_STREAM_END = 1;\nconst Z_NEED_DICT = 2;\nconst Z_STREAM_ERROR = -2;\nconst Z_DATA_ERROR = -3;\nconst Z_MEM_ERROR = -4;\nconst Z_BUF_ERROR = -5;\n\nconst inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff,\n\t0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];\n\nconst MANY = 1440;\n\n// JZlib version : \"1.0.2\"\nconst Z_NO_FLUSH = 0;\nconst Z_FINISH = 4;\n\n// InfTree\nconst fixed_bl = 9;\nconst fixed_bd = 5;\n\nconst fixed_tl = [96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0,\n\t0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40,\n\t0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13,\n\t0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60,\n\t0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7,\n\t35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8,\n\t26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80,\n\t7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0,\n\t8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0,\n\t8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97,\n\t0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210,\n\t81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117,\n\t0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154,\n\t84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83,\n\t0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230,\n\t80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139,\n\t0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174,\n\t0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111,\n\t0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9,\n\t193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8,\n\t120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8,\n\t227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8,\n\t92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9,\n\t249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8,\n\t130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9,\n\t181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8,\n\t102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9,\n\t221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0,\n\t8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9,\n\t147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8,\n\t85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9,\n\t235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8,\n\t141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9,\n\t167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8,\n\t107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9,\n\t207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8,\n\t127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255];\nconst fixed_td = [80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5,\n\t8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5,\n\t24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577];\n\n// Tables for deflate from PKZIP's appnote.txt.\nconst cplens = [ // Copy lengths for literal codes 257..285\n\t3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];\n\n// see note #13 above about 258\nconst cplext = [ // Extra bits for literal codes 257..285\n\t0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 // 112==invalid\n];\n\nconst cpdist = [ // Copy offsets for distance codes 0..29\n\t1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];\n\nconst cpdext = [ // Extra bits for distance codes\n\t0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];\n\n// If BMAX needs to be larger than 16, then h and x[] should be uLong.\nconst BMAX = 15; // maximum bit length of any code\n\nfunction InfTree() {\n\tconst that = this;\n\n\tlet hn; // hufts used in space\n\tlet v; // work area for huft_build\n\tlet c; // bit length count table\n\tlet r; // table entry for structure assignment\n\tlet u; // table stack\n\tlet x; // bit offsets, then code stack\n\n\tfunction huft_build(b, // code lengths in bits (all assumed <=\n\t\t// BMAX)\n\t\tbindex, n, // number of codes (assumed <= 288)\n\t\ts, // number of simple-valued codes (0..s-1)\n\t\td, // list of base values for non-simple codes\n\t\te, // list of extra bits for non-simple codes\n\t\tt, // result: starting table\n\t\tm, // maximum lookup bits, returns actual\n\t\thp,// space for trees\n\t\thn,// hufts used in space\n\t\tv // working area: values in order of bit length\n\t) {\n\t\t// Given a list of code lengths and a maximum table size, make a set of\n\t\t// tables to decode that set of codes. Return Z_OK on success,\n\t\t// Z_BUF_ERROR\n\t\t// if the given code set is incomplete (the tables are still built in\n\t\t// this\n\t\t// case), Z_DATA_ERROR if the input is invalid (an over-subscribed set\n\t\t// of\n\t\t// lengths), or Z_MEM_ERROR if not enough memory.\n\n\t\tlet a; // counter for codes of length k\n\t\tlet f; // i repeats in table every f entries\n\t\tlet g; // maximum code length\n\t\tlet h; // table level\n\t\tlet i; // counter, current code\n\t\tlet j; // counter\n\t\tlet k; // number of bits in current code\n\t\tlet l; // bits per table (returned in m)\n\t\tlet mask; // (1 << w) - 1, to avoid cc -O bug on HP\n\t\tlet p; // pointer into c[], b[], or v[]\n\t\tlet q; // points to current table\n\t\tlet w; // bits before this table == (l * h)\n\t\tlet xp; // pointer into x\n\t\tlet y; // number of dummy codes added\n\t\tlet z; // number of entries in current table\n\n\t\t// Generate counts for each bit length\n\n\t\tp = 0;\n\t\ti = n;\n\t\tdo {\n\t\t\tc[b[bindex + p]]++;\n\t\t\tp++;\n\t\t\ti--; // assume all entries <= BMAX\n\t\t} while (i !== 0);\n\n\t\tif (c[0] == n) { // null input--all zero length codes\n\t\t\tt[0] = -1;\n\t\t\tm[0] = 0;\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\t// Find minimum and maximum length, bound *m by those\n\t\tl = m[0];\n\t\tfor (j = 1; j <= BMAX; j++)\n\t\t\tif (c[j] !== 0)\n\t\t\t\tbreak;\n\t\tk = j; // minimum code length\n\t\tif (l < j) {\n\t\t\tl = j;\n\t\t}\n\t\tfor (i = BMAX; i !== 0; i--) {\n\t\t\tif (c[i] !== 0)\n\t\t\t\tbreak;\n\t\t}\n\t\tg = i; // maximum code length\n\t\tif (l > i) {\n\t\t\tl = i;\n\t\t}\n\t\tm[0] = l;\n\n\t\t// Adjust last length count to fill out codes, if needed\n\t\tfor (y = 1 << j; j < i; j++, y <<= 1) {\n\t\t\tif ((y -= c[j]) < 0) {\n\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t}\n\t\t}\n\t\tif ((y -= c[i]) < 0) {\n\t\t\treturn Z_DATA_ERROR;\n\t\t}\n\t\tc[i] += y;\n\n\t\t// Generate starting offsets into the value table for each length\n\t\tx[1] = j = 0;\n\t\tp = 1;\n\t\txp = 2;\n\t\twhile (--i !== 0) { // note that i == g from above\n\t\t\tx[xp] = (j += c[p]);\n\t\t\txp++;\n\t\t\tp++;\n\t\t}\n\n\t\t// Make a table of values in order of bit lengths\n\t\ti = 0;\n\t\tp = 0;\n\t\tdo {\n\t\t\tif ((j = b[bindex + p]) !== 0) {\n\t\t\t\tv[x[j]++] = i;\n\t\t\t}\n\t\t\tp++;\n\t\t} while (++i < n);\n\t\tn = x[g]; // set n to length of v\n\n\t\t// Generate the Huffman codes and for each, make the table entries\n\t\tx[0] = i = 0; // first Huffman code is zero\n\t\tp = 0; // grab values in bit order\n\t\th = -1; // no tables yet--level -1\n\t\tw = -l; // bits decoded == (l * h)\n\t\tu[0] = 0; // just to keep compilers happy\n\t\tq = 0; // ditto\n\t\tz = 0; // ditto\n\n\t\t// go through the bit lengths (k already is bits in shortest code)\n\t\tfor (; k <= g; k++) {\n\t\t\ta = c[k];\n\t\t\twhile (a-- !== 0) {\n\t\t\t\t// here i is the Huffman code of length k bits for value *p\n\t\t\t\t// make tables up to required level\n\t\t\t\twhile (k > w + l) {\n\t\t\t\t\th++;\n\t\t\t\t\tw += l; // previous table always l bits\n\t\t\t\t\t// compute minimum size table less than or equal to l bits\n\t\t\t\t\tz = g - w;\n\t\t\t\t\tz = (z > l) ? l : z; // table size upper limit\n\t\t\t\t\tif ((f = 1 << (j = k - w)) > a + 1) { // try a k-w bit table\n\t\t\t\t\t\t// too few codes for\n\t\t\t\t\t\t// k-w bit table\n\t\t\t\t\t\tf -= a + 1; // deduct codes from patterns left\n\t\t\t\t\t\txp = k;\n\t\t\t\t\t\tif (j < z) {\n\t\t\t\t\t\t\twhile (++j < z) { // try smaller tables up to z bits\n\t\t\t\t\t\t\t\tif ((f <<= 1) <= c[++xp])\n\t\t\t\t\t\t\t\t\tbreak; // enough codes to use up j bits\n\t\t\t\t\t\t\t\tf -= c[xp]; // else deduct codes from patterns\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tz = 1 << j; // table entries for j-bit table\n\n\t\t\t\t\t// allocate new table\n\t\t\t\t\tif (hn[0] + z > MANY) { // (note: doesn't matter for fixed)\n\t\t\t\t\t\treturn Z_DATA_ERROR; // overflow of MANY\n\t\t\t\t\t}\n\t\t\t\t\tu[h] = q = /* hp+ */hn[0]; // DEBUG\n\t\t\t\t\thn[0] += z;\n\n\t\t\t\t\t// connect to last table, if there is one\n\t\t\t\t\tif (h !== 0) {\n\t\t\t\t\t\tx[h] = i; // save pattern for backing up\n\t\t\t\t\t\tr[0] = /* (byte) */j; // bits in this table\n\t\t\t\t\t\tr[1] = /* (byte) */l; // bits to dump before this table\n\t\t\t\t\t\tj = i >>> (w - l);\n\t\t\t\t\t\tr[2] = /* (int) */(q - u[h - 1] - j); // offset to this table\n\t\t\t\t\t\thp.set(r, (u[h - 1] + j) * 3);\n\t\t\t\t\t\t// to\n\t\t\t\t\t\t// last\n\t\t\t\t\t\t// table\n\t\t\t\t\t} else {\n\t\t\t\t\t\tt[0] = q; // first table is returned result\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// set up table entry in r\n\t\t\t\tr[1] = /* (byte) */(k - w);\n\t\t\t\tif (p >= n) {\n\t\t\t\t\tr[0] = 128 + 64; // out of values--invalid code\n\t\t\t\t} else if (v[p] < s) {\n\t\t\t\t\tr[0] = /* (byte) */(v[p] < 256 ? 0 : 32 + 64); // 256 is\n\t\t\t\t\t// end-of-block\n\t\t\t\t\tr[2] = v[p++]; // simple code is just the value\n\t\t\t\t} else {\n\t\t\t\t\tr[0] = /* (byte) */(e[v[p] - s] + 16 + 64); // non-simple--look\n\t\t\t\t\t// up in lists\n\t\t\t\t\tr[2] = d[v[p++] - s];\n\t\t\t\t}\n\n\t\t\t\t// fill code-like entries with r\n\t\t\t\tf = 1 << (k - w);\n\t\t\t\tfor (j = i >>> w; j < z; j += f) {\n\t\t\t\t\thp.set(r, (q + j) * 3);\n\t\t\t\t}\n\n\t\t\t\t// backwards increment the k-bit code i\n\t\t\t\tfor (j = 1 << (k - 1); (i & j) !== 0; j >>>= 1) {\n\t\t\t\t\ti ^= j;\n\t\t\t\t}\n\t\t\t\ti ^= j;\n\n\t\t\t\t// backup over finished tables\n\t\t\t\tmask = (1 << w) - 1; // needed on HP, cc -O bug\n\t\t\t\twhile ((i & mask) != x[h]) {\n\t\t\t\t\th--; // don't need to update q\n\t\t\t\t\tw -= l;\n\t\t\t\t\tmask = (1 << w) - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Return Z_BUF_ERROR if we were given an incomplete table\n\t\treturn y !== 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n\t}\n\n\tfunction initWorkArea(vsize) {\n\t\tlet i;\n\t\tif (!hn) {\n\t\t\thn = []; // []; //new Array(1);\n\t\t\tv = []; // new Array(vsize);\n\t\t\tc = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n\t\t\tr = []; // new Array(3);\n\t\t\tu = new Int32Array(BMAX); // new Array(BMAX);\n\t\t\tx = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n\t\t}\n\t\tif (v.length < vsize) {\n\t\t\tv = []; // new Array(vsize);\n\t\t}\n\t\tfor (i = 0; i < vsize; i++) {\n\t\t\tv[i] = 0;\n\t\t}\n\t\tfor (i = 0; i < BMAX + 1; i++) {\n\t\t\tc[i] = 0;\n\t\t}\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\tr[i] = 0;\n\t\t}\n\t\t// for(int i=0; i<BMAX; i++){u[i]=0;}\n\t\tu.set(c.subarray(0, BMAX), 0);\n\t\t// for(int i=0; i<BMAX+1; i++){x[i]=0;}\n\t\tx.set(c.subarray(0, BMAX + 1), 0);\n\t}\n\n\tthat.inflate_trees_bits = function (c, // 19 code lengths\n\t\tbb, // bits tree desired/actual depth\n\t\ttb, // bits tree result\n\t\thp, // space for trees\n\t\tz // for messages\n\t) {\n\t\tlet result;\n\t\tinitWorkArea(19);\n\t\thn[0] = 0;\n\t\tresult = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, hn, v);\n\n\t\tif (result == Z_DATA_ERROR) {\n\t\t\tz.msg = \"oversubscribed dynamic bit lengths tree\";\n\t\t} else if (result == Z_BUF_ERROR || bb[0] === 0) {\n\t\t\tz.msg = \"incomplete dynamic bit lengths tree\";\n\t\t\tresult = Z_DATA_ERROR;\n\t\t}\n\t\treturn result;\n\t};\n\n\tthat.inflate_trees_dynamic = function (nl, // number of literal/length codes\n\t\tnd, // number of distance codes\n\t\tc, // that many (total) code lengths\n\t\tbl, // literal desired/actual bit depth\n\t\tbd, // distance desired/actual bit depth\n\t\ttl, // literal/length tree result\n\t\ttd, // distance tree result\n\t\thp, // space for trees\n\t\tz // for messages\n\t) {\n\t\tlet result;\n\n\t\t// build literal/length tree\n\t\tinitWorkArea(288);\n\t\thn[0] = 0;\n\t\tresult = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);\n\t\tif (result != Z_OK || bl[0] === 0) {\n\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\tz.msg = \"oversubscribed literal/length tree\";\n\t\t\t} else if (result != Z_MEM_ERROR) {\n\t\t\t\tz.msg = \"incomplete literal/length tree\";\n\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t// build distance tree\n\t\tinitWorkArea(288);\n\t\tresult = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);\n\n\t\tif (result != Z_OK || (bd[0] === 0 && nl > 257)) {\n\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\tz.msg = \"oversubscribed distance tree\";\n\t\t\t} else if (result == Z_BUF_ERROR) {\n\t\t\t\tz.msg = \"incomplete distance tree\";\n\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t} else if (result != Z_MEM_ERROR) {\n\t\t\t\tz.msg = \"empty distance tree with lengths\";\n\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\treturn Z_OK;\n\t};\n\n}\n\nInfTree.inflate_trees_fixed = function (bl, // literal desired/actual bit depth\n\tbd, // distance desired/actual bit depth\n\ttl,// literal/length tree result\n\ttd// distance tree result\n) {\n\tbl[0] = fixed_bl;\n\tbd[0] = fixed_bd;\n\ttl[0] = fixed_tl;\n\ttd[0] = fixed_td;\n\treturn Z_OK;\n};\n\n// InfCodes\n\n// waiting for \"i:\"=input,\n// \"o:\"=output,\n// \"x:\"=nothing\nconst START = 0; // x: set up for LEN\nconst LEN = 1; // i: get length/literal/eob next\nconst LENEXT = 2; // i: getting length extra (have base)\nconst DIST = 3; // i: get distance next\nconst DISTEXT = 4;// i: getting distance extra\nconst COPY = 5; // o: copying bytes in win, waiting\n// for space\nconst LIT = 6; // o: got literal, waiting for output\n// space\nconst WASH = 7; // o: got eob, possibly still output\n// waiting\nconst END = 8; // x: got eob and all data flushed\nconst BADCODE = 9;// x: got error\n\nfunction InfCodes() {\n\tconst that = this;\n\n\tlet mode; // current inflate_codes mode\n\n\t// mode dependent information\n\tlet len = 0;\n\n\tlet tree; // pointer into tree\n\tlet tree_index = 0;\n\tlet need = 0; // bits needed\n\n\tlet lit = 0;\n\n\t// if EXT or COPY, where and how much\n\tlet get = 0; // bits to get for extra\n\tlet dist = 0; // distance back to copy from\n\n\tlet lbits = 0; // ltree bits decoded per branch\n\tlet dbits = 0; // dtree bits decoder per branch\n\tlet ltree; // literal/length/eob tree\n\tlet ltree_index = 0; // literal/length/eob tree\n\tlet dtree; // distance tree\n\tlet dtree_index = 0; // distance tree\n\n\t// Called with number of bytes left to write in win at least 258\n\t// (the maximum string length) and number of input bytes available\n\t// at least ten. The ten bytes are six bytes for the longest length/\n\t// distance pair plus four bytes for overloading the bit buffer.\n\n\tfunction inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {\n\t\tlet t; // temporary pointer\n\t\tlet tp; // temporary pointer\n\t\tlet tp_index; // temporary pointer\n\t\tlet e; // extra bits or operation\n\t\tlet b; // bit buffer\n\t\tlet k; // bits in bit buffer\n\t\tlet p; // input data pointer\n\t\tlet n; // bytes available there\n\t\tlet q; // output win write pointer\n\t\tlet m; // bytes to end of win or read pointer\n\t\tlet ml; // mask for literal/length tree\n\t\tlet md; // mask for distance tree\n\t\tlet c; // bytes to copy\n\t\tlet d; // distance back to copy from\n\t\tlet r; // copy source pointer\n\n\t\tlet tp_index_t_3; // (tp_index+t)*3\n\n\t\t// load input, output, bit values\n\t\tp = z.next_in_index;\n\t\tn = z.avail_in;\n\t\tb = s.bitb;\n\t\tk = s.bitk;\n\t\tq = s.write;\n\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t// initialize masks\n\t\tml = inflate_mask[bl];\n\t\tmd = inflate_mask[bd];\n\n\t\t// do until not enough input or output space for fast loop\n\t\tdo { // assume called with m >= 258 && n >= 10\n\t\t\t// get literal/length code\n\t\t\twhile (k < (20)) { // max bits for literal/length code\n\t\t\t\tn--;\n\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\tk += 8;\n\t\t\t}\n\n\t\t\tt = b & ml;\n\t\t\ttp = tl;\n\t\t\ttp_index = tl_index;\n\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\tif ((e = tp[tp_index_t_3]) === 0) {\n\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\ts.win[q++] = /* (byte) */tp[tp_index_t_3 + 2];\n\t\t\t\tm--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tdo {\n\n\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\tif ((e & 16) !== 0) {\n\t\t\t\t\te &= 15;\n\t\t\t\t\tc = tp[tp_index_t_3 + 2] + (/* (int) */b & inflate_mask[e]);\n\n\t\t\t\t\tb >>= e;\n\t\t\t\t\tk -= e;\n\n\t\t\t\t\t// decode distance base of block to copy\n\t\t\t\t\twhile (k < (15)) { // max bits for distance code\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tt = b & md;\n\t\t\t\t\ttp = td;\n\t\t\t\t\ttp_index = td_index;\n\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\te = tp[tp_index_t_3];\n\n\t\t\t\t\tdo {\n\n\t\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\t\tif ((e & 16) !== 0) {\n\t\t\t\t\t\t\t// get extra bits to add to distance base\n\t\t\t\t\t\t\te &= 15;\n\t\t\t\t\t\t\twhile (k < (e)) { // get extra bits (up to 13)\n\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\td = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);\n\n\t\t\t\t\t\t\tb >>= (e);\n\t\t\t\t\t\t\tk -= (e);\n\n\t\t\t\t\t\t\t// do the copy\n\t\t\t\t\t\t\tm -= c;\n\t\t\t\t\t\t\tif (q >= d) { // offset before dest\n\t\t\t\t\t\t\t\t// just copy\n\t\t\t\t\t\t\t\tr = q - d;\n\t\t\t\t\t\t\t\tif (q - r > 0 && 2 > (q - r)) {\n\t\t\t\t\t\t\t\t\ts.win[q++] = s.win[r++]; // minimum\n\t\t\t\t\t\t\t\t\t// count is\n\t\t\t\t\t\t\t\t\t// three,\n\t\t\t\t\t\t\t\t\ts.win[q++] = s.win[r++]; // so unroll\n\t\t\t\t\t\t\t\t\t// loop a\n\t\t\t\t\t\t\t\t\t// little\n\t\t\t\t\t\t\t\t\tc -= 2;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts.win.set(s.win.subarray(r, r + 2), q);\n\t\t\t\t\t\t\t\t\tq += 2;\n\t\t\t\t\t\t\t\t\tr += 2;\n\t\t\t\t\t\t\t\t\tc -= 2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else { // else offset after destination\n\t\t\t\t\t\t\t\tr = q - d;\n\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\tr += s.end; // force pointer in win\n\t\t\t\t\t\t\t\t} while (r < 0); // covers invalid distances\n\t\t\t\t\t\t\t\te = s.end - r;\n\t\t\t\t\t\t\t\tif (c > e) { // if source crosses,\n\t\t\t\t\t\t\t\t\tc -= e; // wrapped copy\n\t\t\t\t\t\t\t\t\tif (q - r > 0 && e > (q - r)) {\n\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\ts.win[q++] = s.win[r++];\n\t\t\t\t\t\t\t\t\t\t} while (--e !== 0);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts.win.set(s.win.subarray(r, r + e), q);\n\t\t\t\t\t\t\t\t\t\tq += e;\n\t\t\t\t\t\t\t\t\t\tr += e;\n\t\t\t\t\t\t\t\t\t\te = 0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tr = 0; // copy rest from start of win\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// copy all or what's left\n\t\t\t\t\t\t\tif (q - r > 0 && c > (q - r)) {\n\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\ts.win[q++] = s.win[r++];\n\t\t\t\t\t\t\t\t} while (--c !== 0);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts.win.set(s.win.subarray(r, r + c), q);\n\t\t\t\t\t\t\t\tq += c;\n\t\t\t\t\t\t\t\tr += c;\n\t\t\t\t\t\t\t\tc = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if ((e & 64) === 0) {\n\t\t\t\t\t\t\tt += tp[tp_index_t_3 + 2];\n\t\t\t\t\t\t\tt += (b & inflate_mask[e]);\n\t\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\t\te = tp[tp_index_t_3];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tz.msg = \"invalid distance code\";\n\n\t\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\t\tn += c;\n\t\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// eslint-disable-next-line no-constant-condition\n\t\t\t\t\t} while (true);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ((e & 64) === 0) {\n\t\t\t\t\tt += tp[tp_index_t_3 + 2];\n\t\t\t\t\tt += (b & inflate_mask[e]);\n\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\tif ((e = tp[tp_index_t_3]) === 0) {\n\n\t\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\t\ts.win[q++] = /* (byte) */tp[tp_index_t_3 + 2];\n\t\t\t\t\t\tm--;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if ((e & 32) !== 0) {\n\n\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\tn += c;\n\t\t\t\t\tp -= c;\n\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\n\t\t\t\t\treturn Z_STREAM_END;\n\t\t\t\t} else {\n\t\t\t\t\tz.msg = \"invalid literal/length code\";\n\n\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\tn += c;\n\t\t\t\t\tp -= c;\n\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\n\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t\t// eslint-disable-next-line no-constant-condition\n\t\t\t} while (true);\n\t\t} while (m >= 258 && n >= 10);\n\n\t\t// not enough input or output--restore pointers and return\n\t\tc = z.avail_in - n;\n\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\tn += c;\n\t\tp -= c;\n\t\tk -= c << 3;\n\n\t\ts.bitb = b;\n\t\ts.bitk = k;\n\t\tz.avail_in = n;\n\t\tz.total_in += p - z.next_in_index;\n\t\tz.next_in_index = p;\n\t\ts.write = q;\n\n\t\treturn Z_OK;\n\t}\n\n\tthat.init = function (bl, bd, tl, tl_index, td, td_index) {\n\t\tmode = START;\n\t\tlbits = /* (byte) */bl;\n\t\tdbits = /* (byte) */bd;\n\t\tltree = tl;\n\t\tltree_index = tl_index;\n\t\tdtree = td;\n\t\tdtree_index = td_index;\n\t\ttree = null;\n\t};\n\n\tthat.proc = function (s, z, r) {\n\t\tlet j; // temporary storage\n\t\tlet tindex; // temporary pointer\n\t\tlet e; // extra bits or operation\n\t\tlet b = 0; // bit buffer\n\t\tlet k = 0; // bits in bit buffer\n\t\tlet p = 0; // input data pointer\n\t\tlet n; // bytes available there\n\t\tlet q; // output win write pointer\n\t\tlet m; // bytes to end of win or read pointer\n\t\tlet f; // pointer to copy strings from\n\n\t\t// copy input/output information to locals (UPDATE macro restores)\n\t\tp = z.next_in_index;\n\t\tn = z.avail_in;\n\t\tb = s.bitb;\n\t\tk = s.bitk;\n\t\tq = s.write;\n\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t// process input and output based on current state\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) {\n\t\t\tswitch (mode) {\n\t\t\t\t// waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n\t\t\t\tcase START: // x: set up for LEN\n\t\t\t\t\tif (m >= 258 && n >= 10) {\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\tr = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);\n\n\t\t\t\t\t\tp = z.next_in_index;\n\t\t\t\t\t\tn = z.avail_in;\n\t\t\t\t\t\tb = s.bitb;\n\t\t\t\t\t\tk = s.bitk;\n\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\tif (r != Z_OK) {\n\t\t\t\t\t\t\tmode = r == Z_STREAM_END ? WASH : BADCODE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tneed = lbits;\n\t\t\t\t\ttree = ltree;\n\t\t\t\t\ttree_index = ltree_index;\n\n\t\t\t\t\tmode = LEN;\n\t\t\t\t/* falls through */\n\t\t\t\tcase LEN: // i: get length/literal/eob next\n\t\t\t\t\tj = need;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttindex = (tree_index + (b & inflate_mask[j])) * 3;\n\n\t\t\t\t\tb >>>= (tree[tindex + 1]);\n\t\t\t\t\tk -= (tree[tindex + 1]);\n\n\t\t\t\t\te = tree[tindex];\n\n\t\t\t\t\tif (e === 0) { // literal\n\t\t\t\t\t\tlit = tree[tindex + 2];\n\t\t\t\t\t\tmode = LIT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 16) !== 0) { // length\n\t\t\t\t\t\tget = e & 15;\n\t\t\t\t\t\tlen = tree[tindex + 2];\n\t\t\t\t\t\tmode = LENEXT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 64) === 0) { // next table\n\t\t\t\t\t\tneed = e;\n\t\t\t\t\t\ttree_index = tindex / 3 + tree[tindex + 2];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 32) !== 0) { // end of block\n\t\t\t\t\t\tmode = WASH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = BADCODE; // invalid code\n\t\t\t\t\tz.msg = \"invalid literal/length code\";\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase LENEXT: // i: getting length extra (have base)\n\t\t\t\t\tj = get;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tlen += (b & inflate_mask[j]);\n\n\t\t\t\t\tb >>= j;\n\t\t\t\t\tk -= j;\n\n\t\t\t\t\tneed = dbits;\n\t\t\t\t\ttree = dtree;\n\t\t\t\t\ttree_index = dtree_index;\n\t\t\t\t\tmode = DIST;\n\t\t\t\t/* falls through */\n\t\t\t\tcase DIST: // i: get distance next\n\t\t\t\t\tj = need;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttindex = (tree_index + (b & inflate_mask[j])) * 3;\n\n\t\t\t\t\tb >>= tree[tindex + 1];\n\t\t\t\t\tk -= tree[tindex + 1];\n\n\t\t\t\t\te = (tree[tindex]);\n\t\t\t\t\tif ((e & 16) !== 0) { // distance\n\t\t\t\t\t\tget = e & 15;\n\t\t\t\t\t\tdist = tree[tindex + 2];\n\t\t\t\t\t\tmode = DISTEXT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 64) === 0) { // next table\n\t\t\t\t\t\tneed = e;\n\t\t\t\t\t\ttree_index = tindex / 3 + tree[tindex + 2];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = BADCODE; // invalid code\n\t\t\t\t\tz.msg = \"invalid distance code\";\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase DISTEXT: // i: getting distance extra\n\t\t\t\t\tj = get;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tdist += (b & inflate_mask[j]);\n\n\t\t\t\t\tb >>= j;\n\t\t\t\t\tk -= j;\n\n\t\t\t\t\tmode = COPY;\n\t\t\t\t/* falls through */\n\t\t\t\tcase COPY: // o: copying bytes in win, waiting for space\n\t\t\t\t\tf = q - dist;\n\t\t\t\t\twhile (f < 0) { // modulo win size-\"while\" instead\n\t\t\t\t\t\tf += s.end; // of \"if\" handles invalid distances\n\t\t\t\t\t}\n\t\t\t\t\twhile (len !== 0) {\n\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ts.win[q++] = s.win[f++];\n\t\t\t\t\t\tm--;\n\n\t\t\t\t\t\tif (f == s.end)\n\t\t\t\t\t\t\tf = 0;\n\t\t\t\t\t\tlen--;\n\t\t\t\t\t}\n\t\t\t\t\tmode = START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase LIT: // o: got literal, waiting for output space\n\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t\ts.win[q++] = /* (byte) */lit;\n\t\t\t\t\tm--;\n\n\t\t\t\t\tmode = START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase WASH: // o: got eob, possibly more output\n\t\t\t\t\tif (k > 7) { // return unused byte, if any\n\t\t\t\t\t\tk -= 8;\n\t\t\t\t\t\tn++;\n\t\t\t\t\t\tp--; // can always return one\n\t\t\t\t\t}\n\n\t\t\t\t\ts.write = q;\n\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\tq = s.write;\n\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\tif (s.read != s.write) {\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tmode = END;\n\t\t\t\t/* falls through */\n\t\t\t\tcase END:\n\t\t\t\t\tr = Z_STREAM_END;\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase BADCODE: // x: got error\n\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tdefault:\n\t\t\t\t\tr = Z_STREAM_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t}\n\t\t}\n\t};\n\n\tthat.free = function () {\n\t\t// ZFREE(z, c);\n\t};\n\n}\n\n// InfBlocks\n\n// Table for deflate from PKZIP's appnote.txt.\nconst border = [ // Order of the bit length code lengths\n\t16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\nconst TYPE = 0; // get type bits (3, including end bit)\nconst LENS = 1; // get lengths for stored\nconst STORED = 2;// processing stored block\nconst TABLE = 3; // get table lengths\nconst BTREE = 4; // get bit lengths tree for a dynamic\n// block\nconst DTREE = 5; // get length, distance trees for a\n// dynamic block\nconst CODES = 6; // processing fixed or dynamic block\nconst DRY = 7; // output remaining win bytes\nconst DONELOCKS = 8; // finished last block, done\nconst BADBLOCKS = 9; // ot a data error--stuck here\n\nfunction InfBlocks(z, w) {\n\tconst that = this;\n\n\tlet mode = TYPE; // current inflate_block mode\n\n\tlet left = 0; // if STORED, bytes left to copy\n\n\tlet table = 0; // table lengths (14 bits)\n\tlet index = 0; // index into blens (or border)\n\tlet blens; // bit lengths of codes\n\tconst bb = [0]; // bit length tree depth\n\tconst tb = [0]; // bit length decoding tree\n\n\tconst codes = new InfCodes(); // if CODES, current state\n\n\tlet last = 0; // true if this block is the last block\n\n\tlet hufts = new Int32Array(MANY * 3); // single malloc for tree space\n\tconst check = 0; // check on output\n\tconst inftree = new InfTree();\n\n\tthat.bitk = 0; // bits in bit buffer\n\tthat.bitb = 0; // bit buffer\n\tthat.win = new Uint8Array(w); // sliding win\n\tthat.end = w; // one byte after sliding win\n\tthat.read = 0; // win read pointer\n\tthat.write = 0; // win write pointer\n\n\tthat.reset = function (z, c) {\n\t\tif (c)\n\t\t\tc[0] = check;\n\t\t// if (mode == BTREE || mode == DTREE) {\n\t\t// }\n\t\tif (mode == CODES) {\n\t\t\tcodes.free(z);\n\t\t}\n\t\tmode = TYPE;\n\t\tthat.bitk = 0;\n\t\tthat.bitb = 0;\n\t\tthat.read = that.write = 0;\n\t};\n\n\tthat.reset(z, null);\n\n\t// copy as much as possible from the sliding win to the output area\n\tthat.inflate_flush = function (z, r) {\n\t\tlet n;\n\t\tlet p;\n\t\tlet q;\n\n\t\t// local copies of source and destination pointers\n\t\tp = z.next_out_index;\n\t\tq = that.read;\n\n\t\t// compute number of bytes to copy as far as end of win\n\t\tn = /* (int) */((q <= that.write ? that.write : that.end) - q);\n\t\tif (n > z.avail_out)\n\t\t\tn = z.avail_out;\n\t\tif (n !== 0 && r == Z_BUF_ERROR)\n\t\t\tr = Z_OK;\n\n\t\t// update counters\n\t\tz.avail_out -= n;\n\t\tz.total_out += n;\n\n\t\t// copy as far as end of win\n\t\tz.next_out.set(that.win.subarray(q, q + n), p);\n\t\tp += n;\n\t\tq += n;\n\n\t\t// see if more to copy at beginning of win\n\t\tif (q == that.end) {\n\t\t\t// wrap pointers\n\t\t\tq = 0;\n\t\t\tif (that.write == that.end)\n\t\t\t\tthat.write = 0;\n\n\t\t\t// compute bytes to copy\n\t\t\tn = that.write - q;\n\t\t\tif (n > z.avail_out)\n\t\t\t\tn = z.avail_out;\n\t\t\tif (n !== 0 && r == Z_BUF_ERROR)\n\t\t\t\tr = Z_OK;\n\n\t\t\t// update counters\n\t\t\tz.avail_out -= n;\n\t\t\tz.total_out += n;\n\n\t\t\t// copy\n\t\t\tz.next_out.set(that.win.subarray(q, q + n), p);\n\t\t\tp += n;\n\t\t\tq += n;\n\t\t}\n\n\t\t// update pointers\n\t\tz.next_out_index = p;\n\t\tthat.read = q;\n\n\t\t// done\n\t\treturn r;\n\t};\n\n\tthat.proc = function (z, r) {\n\t\tlet t; // temporary storage\n\t\tlet b; // bit buffer\n\t\tlet k; // bits in bit buffer\n\t\tlet p; // input data pointer\n\t\tlet n; // bytes available there\n\t\tlet q; // output win write pointer\n\t\tlet m; // bytes to end of win or read pointer\n\n\t\tlet i;\n\n\t\t// copy input/output information to locals (UPDATE macro restores)\n\t\t// {\n\t\tp = z.next_in_index;\n\t\tn = z.avail_in;\n\t\tb = that.bitb;\n\t\tk = that.bitk;\n\t\t// }\n\t\t// {\n\t\tq = that.write;\n\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t// }\n\n\t\t// process input based on current state\n\t\t// DEBUG dtree\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) {\n\t\t\tlet bl, bd, tl, td, bl_, bd_, tl_, td_;\n\t\t\tswitch (mode) {\n\t\t\t\tcase TYPE:\n\n\t\t\t\t\twhile (k < (3)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\t\t\t\t\tt = /* (int) */(b & 7);\n\t\t\t\t\tlast = t & 1;\n\n\t\t\t\t\tswitch (t >>> 1) {\n\t\t\t\t\t\tcase 0: // stored\n\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\tt = k & 7; // go to byte boundary\n\n\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\t\tk -= (t);\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\tmode = LENS; // get length of stored block\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 1: // fixed\n\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\tbl = []; // new Array(1);\n\t\t\t\t\t\t\tbd = []; // new Array(1);\n\t\t\t\t\t\t\ttl = [[]]; // new Array(1);\n\t\t\t\t\t\t\ttd = [[]]; // new Array(1);\n\n\t\t\t\t\t\t\tInfTree.inflate_trees_fixed(bl, bd, tl, td);\n\t\t\t\t\t\t\tcodes.init(bl[0], bd[0], tl[0], 0, td[0], 0);\n\t\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t\tmode = CODES;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2: // dynamic\n\n\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t\tmode = TABLE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3: // illegal\n\n\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t\tz.msg = \"invalid block type\";\n\t\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase LENS:\n\n\t\t\t\t\twhile (k < (32)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)) {\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = \"invalid stored block lengths\";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tleft = (b & 0xffff);\n\t\t\t\t\tb = k = 0; // dump bits\n\t\t\t\t\tmode = left !== 0 ? STORED : (last !== 0 ? DRY : TYPE);\n\t\t\t\t\tbreak;\n\t\t\t\tcase STORED:\n\t\t\t\t\tif (n === 0) {\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\tif (q == that.end && that.read !== 0) {\n\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\tr = that.inflate_flush(z, r);\n\t\t\t\t\t\t\tq = that.write;\n\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t\tif (q == that.end && that.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t\tt = left;\n\t\t\t\t\tif (t > n)\n\t\t\t\t\t\tt = n;\n\t\t\t\t\tif (t > m)\n\t\t\t\t\t\tt = m;\n\t\t\t\t\tthat.win.set(z.read_buf(p, t), q);\n\t\t\t\t\tp += t;\n\t\t\t\t\tn -= t;\n\t\t\t\t\tq += t;\n\t\t\t\t\tm -= t;\n\t\t\t\t\tif ((left -= t) !== 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tmode = last !== 0 ? DRY : TYPE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TABLE:\n\n\t\t\t\t\twhile (k < (14)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttable = t = (b & 0x3fff);\n\t\t\t\t\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = \"too many length or distance symbols\";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\n\t\t\t\t\tif (!blens || blens.length < t) {\n\t\t\t\t\t\tblens = []; // new Array(t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (i = 0; i < t; i++) {\n\t\t\t\t\t\t\tblens[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// {\n\t\t\t\t\tb >>>= (14);\n\t\t\t\t\tk -= (14);\n\t\t\t\t\t// }\n\n\t\t\t\t\tindex = 0;\n\t\t\t\t\tmode = BTREE;\n\t\t\t\t/* falls through */\n\t\t\t\tcase BTREE:\n\t\t\t\t\twhile (index < 4 + (table >>> 10)) {\n\t\t\t\t\t\twhile (k < (3)) {\n\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tblens[border[index++]] = b & 7;\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\n\t\t\t\t\twhile (index < 19) {\n\t\t\t\t\t\tblens[border[index++]] = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbb[0] = 7;\n\t\t\t\t\tt = inftree.inflate_trees_bits(blens, bb, tb, hufts, z);\n\t\t\t\t\tif (t != Z_OK) {\n\t\t\t\t\t\tr = t;\n\t\t\t\t\t\tif (r == Z_DATA_ERROR) {\n\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\n\t\t\t\t\tindex = 0;\n\t\t\t\t\tmode = DTREE;\n\t\t\t\t/* falls through */\n\t\t\t\tcase DTREE:\n\t\t\t\t\t// eslint-disable-next-line no-constant-condition\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tt = table;\n\t\t\t\t\t\tif (index >= 258 + (t & 0x1f) + ((t >> 5) & 0x1f)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet j, c;\n\n\t\t\t\t\t\tt = bb[0];\n\n\t\t\t\t\t\twhile (k < (t)) {\n\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if (tb[0] == -1) {\n\t\t\t\t\t\t// System.err.println(\"null...\");\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tt = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];\n\t\t\t\t\t\tc = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];\n\n\t\t\t\t\t\tif (c < 16) {\n\t\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\t\tk -= (t);\n\t\t\t\t\t\t\tblens[index++] = c;\n\t\t\t\t\t\t} else { // c == 16..18\n\t\t\t\t\t\t\ti = c == 18 ? 7 : c - 14;\n\t\t\t\t\t\t\tj = c == 18 ? 11 : 3;\n\n\t\t\t\t\t\t\twhile (k < (t + i)) {\n\t\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\t\tk -= (t);\n\n\t\t\t\t\t\t\tj += (b & inflate_mask[i]);\n\n\t\t\t\t\t\t\tb >>>= (i);\n\t\t\t\t\t\t\tk -= (i);\n\n\t\t\t\t\t\t\ti = index;\n\t\t\t\t\t\t\tt = table;\n\t\t\t\t\t\t\tif (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {\n\t\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t\t\tz.msg = \"invalid bit length repeat\";\n\t\t\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tc = c == 16 ? blens[i - 1] : 0;\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tblens[i++] = c;\n\t\t\t\t\t\t\t} while (--j !== 0);\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\ttb[0] = -1;\n\t\t\t\t\t// {\n\t\t\t\t\tbl_ = []; // new Array(1);\n\t\t\t\t\tbd_ = []; // new Array(1);\n\t\t\t\t\ttl_ = []; // new Array(1);\n\t\t\t\t\ttd_ = []; // new Array(1);\n\t\t\t\t\tbl_[0] = 9; // must be <= 9 for lookahead assumptions\n\t\t\t\t\tbd_[0] = 6; // must be <= 9 for lookahead assumptions\n\n\t\t\t\t\tt = table;\n\t\t\t\t\tt = inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + ((t >> 5) & 0x1f), blens, bl_, bd_, tl_, td_, hufts, z);\n\n\t\t\t\t\tif (t != Z_OK) {\n\t\t\t\t\t\tif (t == Z_DATA_ERROR) {\n\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr = t;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tcodes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]);\n\t\t\t\t\t// }\n\t\t\t\t\tmode = CODES;\n\t\t\t\t/* falls through */\n\t\t\t\tcase CODES:\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\n\t\t\t\t\tif ((r = codes.proc(that, z, r)) != Z_STREAM_END) {\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\t\t\t\t\tcodes.free(z);\n\n\t\t\t\t\tp = z.next_in_index;\n\t\t\t\t\tn = z.avail_in;\n\t\t\t\t\tb = that.bitb;\n\t\t\t\t\tk = that.bitk;\n\t\t\t\t\tq = that.write;\n\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\n\t\t\t\t\tif (last === 0) {\n\t\t\t\t\t\tmode = TYPE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = DRY;\n\t\t\t\t/* falls through */\n\t\t\t\tcase DRY:\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\tr = that.inflate_flush(z, r);\n\t\t\t\t\tq = that.write;\n\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\tif (that.read != that.write) {\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tmode = DONELOCKS;\n\t\t\t\t/* falls through */\n\t\t\t\tcase DONELOCKS:\n\t\t\t\t\tr = Z_STREAM_END;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\tcase BADBLOCKS:\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\n\t\t\t\tdefault:\n\t\t\t\t\tr = Z_STREAM_ERROR;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t}\n\t\t}\n\t};\n\n\tthat.free = function (z) {\n\t\tthat.reset(z, null);\n\t\tthat.win = null;\n\t\thufts = null;\n\t\t// ZFREE(z, s);\n\t};\n\n\tthat.set_dictionary = function (d, start, n) {\n\t\tthat.win.set(d.subarray(start, start + n), 0);\n\t\tthat.read = that.write = n;\n\t};\n\n\t// Returns true if inflate is currently at the end of a block generated\n\t// by Z_SYNC_FLUSH or Z_FULL_FLUSH.\n\tthat.sync_point = function () {\n\t\treturn mode == LENS ? 1 : 0;\n\t};\n\n}\n\n// Inflate\n\n// preset dictionary flag in zlib header\nconst PRESET_DICT = 0x20;\n\nconst Z_DEFLATED = 8;\n\nconst METHOD = 0; // waiting for method byte\nconst FLAG = 1; // waiting for flag byte\nconst DICT4 = 2; // four dictionary check bytes to go\nconst DICT3 = 3; // three dictionary check bytes to go\nconst DICT2 = 4; // two dictionary check bytes to go\nconst DICT1 = 5; // one dictionary check byte to go\nconst DICT0 = 6; // waiting for inflateSetDictionary\nconst BLOCKS = 7; // decompressing blocks\nconst DONE = 12; // finished check, done\nconst BAD = 13; // got an error--stay here\n\nconst mark = [0, 0, 0xff, 0xff];\n\nfunction Inflate() {\n\tconst that = this;\n\n\tthat.mode = 0; // current inflate mode\n\n\t// mode dependent information\n\tthat.method = 0; // if FLAGS, method byte\n\n\t// if CHECK, check values to compare\n\tthat.was = [0]; // new Array(1); // computed check value\n\tthat.need = 0; // stream check value\n\n\t// if BAD, inflateSync's marker bytes count\n\tthat.marker = 0;\n\n\t// mode independent information\n\tthat.wbits = 0; // log2(win size) (8..15, defaults to 15)\n\n\t// this.blocks; // current inflate_blocks state\n\n\tfunction inflateReset(z) {\n\t\tif (!z || !z.istate)\n\t\t\treturn Z_STREAM_ERROR;\n\n\t\tz.total_in = z.total_out = 0;\n\t\tz.msg = null;\n\t\tz.istate.mode = BLOCKS;\n\t\tz.istate.blocks.reset(z, null);\n\t\treturn Z_OK;\n\t}\n\n\tthat.inflateEnd = function (z) {\n\t\tif (that.blocks)\n\t\t\tthat.blocks.free(z);\n\t\tthat.blocks = null;\n\t\t// ZFREE(z, z->state);\n\t\treturn Z_OK;\n\t};\n\n\tthat.inflateInit = function (z, w) {\n\t\tz.msg = null;\n\t\tthat.blocks = null;\n\n\t\t// set win size\n\t\tif (w < 8 || w > 15) {\n\t\t\tthat.inflateEnd(z);\n\t\t\treturn Z_STREAM_ERROR;\n\t\t}\n\t\tthat.wbits = w;\n\n\t\tz.istate.blocks = new InfBlocks(z, 1 << w);\n\n\t\t// reset state\n\t\tinflateReset(z);\n\t\treturn Z_OK;\n\t};\n\n\tthat.inflate = function (z, f) {\n\t\tlet r;\n\t\tlet b;\n\n\t\tif (!z || !z.istate || !z.next_in)\n\t\t\treturn Z_STREAM_ERROR;\n\t\tconst istate = z.istate;\n\t\tf = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n\t\tr = Z_BUF_ERROR;\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) {\n\t\t\tswitch (istate.mode) {\n\t\t\t\tcase METHOD:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tif (((istate.method = z.read_byte(z.next_in_index++)) & 0xf) != Z_DEFLATED) {\n\t\t\t\t\t\tistate.mode = BAD;\n\t\t\t\t\t\tz.msg = \"unknown compression method\";\n\t\t\t\t\t\tistate.marker = 5; // can't try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((istate.method >> 4) + 8 > istate.wbits) {\n\t\t\t\t\t\tistate.mode = BAD;\n\t\t\t\t\t\tz.msg = \"invalid win size\";\n\t\t\t\t\t\tistate.marker = 5; // can't try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tistate.mode = FLAG;\n\t\t\t\t/* falls through */\n\t\t\t\tcase FLAG:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tb = (z.read_byte(z.next_in_index++)) & 0xff;\n\n\t\t\t\t\tif ((((istate.method << 8) + b) % 31) !== 0) {\n\t\t\t\t\t\tistate.mode = BAD;\n\t\t\t\t\t\tz.msg = \"incorrect header check\";\n\t\t\t\t\t\tistate.marker = 5; // can't try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((b & PRESET_DICT) === 0) {\n\t\t\t\t\t\tistate.mode = BLOCKS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tistate.mode = DICT4;\n\t\t\t\t/* falls through */\n\t\t\t\tcase DICT4:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tistate.need = ((z.read_byte(z.next_in_index++) & 0xff) << 24) & 0xff000000;\n\t\t\t\t\tistate.mode = DICT3;\n\t\t\t\t/* falls through */\n\t\t\t\tcase DICT3:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tistate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 16) & 0xff0000;\n\t\t\t\t\tistate.mode = DICT2;\n\t\t\t\t/* falls through */\n\t\t\t\tcase DICT2:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tistate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 8) & 0xff00;\n\t\t\t\t\tistate.mode = DICT1;\n\t\t\t\t/* falls through */\n\t\t\t\tcase DICT1:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tistate.need += (z.read_byte(z.next_in_index++) & 0xff);\n\t\t\t\t\tistate.mode = DICT0;\n\t\t\t\t\treturn Z_NEED_DICT;\n\t\t\t\tcase DICT0:\n\t\t\t\t\tistate.mode = BAD;\n\t\t\t\t\tz.msg = \"need dictionary\";\n\t\t\t\t\tistate.marker = 0; // can try inflateSync\n\t\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t\tcase BLOCKS:\n\n\t\t\t\t\tr = istate.blocks.proc(z, r);\n\t\t\t\t\tif (r == Z_DATA_ERROR) {\n\t\t\t\t\t\tistate.mode = BAD;\n\t\t\t\t\t\tistate.marker = 0; // can try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (r == Z_OK) {\n\t\t\t\t\t\tr = f;\n\t\t\t\t\t}\n\t\t\t\t\tif (r != Z_STREAM_END) {\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t}\n\t\t\t\t\tr = f;\n\t\t\t\t\tistate.blocks.reset(z, istate.was);\n\t\t\t\t\tistate.mode = DONE;\n\t\t\t\t/* falls through */\n\t\t\t\tcase DONE:\n\t\t\t\t\tz.avail_in = 0;\n\t\t\t\t\treturn Z_STREAM_END;\n\t\t\t\tcase BAD:\n\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\tdefault:\n\t\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t}\n\t};\n\n\tthat.inflateSetDictionary = function (z, dictionary, dictLength) {\n\t\tlet index = 0, length = dictLength;\n\t\tif (!z || !z.istate || z.istate.mode != DICT0)\n\t\t\treturn Z_STREAM_ERROR;\n\t\tconst istate = z.istate;\n\t\tif (length >= (1 << istate.wbits)) {\n\t\t\tlength = (1 << istate.wbits) - 1;\n\t\t\tindex = dictLength - length;\n\t\t}\n\t\tistate.blocks.set_dictionary(dictionary, index, length);\n\t\tistate.mode = BLOCKS;\n\t\treturn Z_OK;\n\t};\n\n\tthat.inflateSync = function (z) {\n\t\tlet n; // number of bytes to look at\n\t\tlet p; // pointer to bytes\n\t\tlet m; // number of marker bytes found in a row\n\t\tlet r, w; // temporaries to save total_in and total_out\n\n\t\t// set up\n\t\tif (!z || !z.istate)\n\t\t\treturn Z_STREAM_ERROR;\n\t\tconst istate = z.istate;\n\t\tif (istate.mode != BAD) {\n\t\t\tistate.mode = BAD;\n\t\t\tistate.marker = 0;\n\t\t}\n\t\tif ((n = z.avail_in) === 0)\n\t\t\treturn Z_BUF_ERROR;\n\t\tp = z.next_in_index;\n\t\tm = istate.marker;\n\n\t\t// search\n\t\twhile (n !== 0 && m < 4) {\n\t\t\tif (z.read_byte(p) == mark[m]) {\n\t\t\t\tm++;\n\t\t\t} else if (z.read_byte(p) !== 0) {\n\t\t\t\tm = 0;\n\t\t\t} else {\n\t\t\t\tm = 4 - m;\n\t\t\t}\n\t\t\tp++;\n\t\t\tn--;\n\t\t}\n\n\t\t// restore\n\t\tz.total_in += p - z.next_in_index;\n\t\tz.next_in_index = p;\n\t\tz.avail_in = n;\n\t\tistate.marker = m;\n\n\t\t// return no joy or set up to restart on a new block\n\t\tif (m != 4) {\n\t\t\treturn Z_DATA_ERROR;\n\t\t}\n\t\tr = z.total_in;\n\t\tw = z.total_out;\n\t\tinflateReset(z);\n\t\tz.total_in = r;\n\t\tz.total_out = w;\n\t\tistate.mode = BLOCKS;\n\t\treturn Z_OK;\n\t};\n\n\t// Returns true if inflate is currently at the end of a block generated\n\t// by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n\t// implementation to provide an additional safety check. PPP uses\n\t// Z_SYNC_FLUSH\n\t// but removes the length bytes of the resulting empty stored block. When\n\t// decompressing, PPP checks that at the end of input packet, inflate is\n\t// waiting for these length bytes.\n\tthat.inflateSyncPoint = function (z) {\n\t\tif (!z || !z.istate || !z.istate.blocks)\n\t\t\treturn Z_STREAM_ERROR;\n\t\treturn z.istate.blocks.sync_point();\n\t};\n}\n\n// ZStream\n\nfunction ZStream() {\n}\n\nZStream.prototype = {\n\tinflateInit(bits) {\n\t\tconst that = this;\n\t\tthat.istate = new Inflate();\n\t\tif (!bits)\n\t\t\tbits = MAX_BITS;\n\t\treturn that.istate.inflateInit(that, bits);\n\t},\n\n\tinflate(f) {\n\t\tconst that = this;\n\t\tif (!that.istate)\n\t\t\treturn Z_STREAM_ERROR;\n\t\treturn that.istate.inflate(that, f);\n\t},\n\n\tinflateEnd() {\n\t\tconst that = this;\n\t\tif (!that.istate)\n\t\t\treturn Z_STREAM_ERROR;\n\t\tconst ret = that.istate.inflateEnd(that);\n\t\tthat.istate = null;\n\t\treturn ret;\n\t},\n\n\tinflateSync() {\n\t\tconst that = this;\n\t\tif (!that.istate)\n\t\t\treturn Z_STREAM_ERROR;\n\t\treturn that.istate.inflateSync(that);\n\t},\n\tinflateSetDictionary(dictionary, dictLength) {\n\t\tconst that = this;\n\t\tif (!that.istate)\n\t\t\treturn Z_STREAM_ERROR;\n\t\treturn that.istate.inflateSetDictionary(that, dictionary, dictLength);\n\t},\n\tread_byte(start) {\n\t\tconst that = this;\n\t\treturn that.next_in[start];\n\t},\n\tread_buf(start, size) {\n\t\tconst that = this;\n\t\treturn that.next_in.subarray(start, start + size);\n\t}\n};\n\n// Inflater\n\nfunction ZipInflate(options) {\n\tconst that = this;\n\tconst z = new ZStream();\n\tconst bufsize = options && options.chunkSize ? Math.floor(options.chunkSize * 2) : 128 * 1024;\n\tconst flush = Z_NO_FLUSH;\n\tconst buf = new Uint8Array(bufsize);\n\tlet nomoreinput = false;\n\n\tz.inflateInit();\n\tz.next_out = buf;\n\n\tthat.append = function (data, onprogress) {\n\t\tconst buffers = [];\n\t\tlet err, array, lastIndex = 0, bufferIndex = 0, bufferSize = 0;\n\t\tif (data.length === 0)\n\t\t\treturn;\n\t\tz.next_in_index = 0;\n\t\tz.next_in = data;\n\t\tz.avail_in = data.length;\n\t\tdo {\n\t\t\tz.next_out_index = 0;\n\t\t\tz.avail_out = bufsize;\n\t\t\tif ((z.avail_in === 0) && (!nomoreinput)) { // if buffer is empty and more input is available, refill it\n\t\t\t\tz.next_in_index = 0;\n\t\t\t\tnomoreinput = true;\n\t\t\t}\n\t\t\terr = z.inflate(flush);\n\t\t\tif (nomoreinput && (err === Z_BUF_ERROR)) {\n\t\t\t\tif (z.avail_in !== 0)\n\t\t\t\t\tthrow new Error(\"inflating: bad input\");\n\t\t\t} else if (err !== Z_OK && err !== Z_STREAM_END)\n\t\t\t\tthrow new Error(\"inflating: \" + z.msg);\n\t\t\tif ((nomoreinput || err === Z_STREAM_END) && (z.avail_in === data.length))\n\t\t\t\tthrow new Error(\"inflating: bad input\");\n\t\t\tif (z.next_out_index)\n\t\t\t\tif (z.next_out_index === bufsize)\n\t\t\t\t\tbuffers.push(new Uint8Array(buf));\n\t\t\t\telse\n\t\t\t\t\tbuffers.push(buf.slice(0, z.next_out_index));\n\t\t\tbufferSize += z.next_out_index;\n\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n\t\t\t\tonprogress(z.next_in_index);\n\t\t\t\tlastIndex = z.next_in_index;\n\t\t\t}\n\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\tif (buffers.length > 1) {\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function (chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t} else {\n\t\t\tarray = buffers[0] || new Uint8Array();\n\t\t}\n\t\treturn array;\n\t};\n\tthat.flush = function () {\n\t\tz.inflateEnd();\n\t};\n}\n\nexport {\n\tZipInflate as Inflate\n};","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst MAX_32_BITS = 0xffffffff;\nconst MAX_16_BITS = 0xffff;\nconst COMPRESSION_METHOD_DEFLATE = 0x08;\nconst COMPRESSION_METHOD_STORE = 0x00;\nconst COMPRESSION_METHOD_AES = 0x63;\n\nconst LOCAL_FILE_HEADER_SIGNATURE = 0x04034b50;\nconst SPLIT_ZIP_FILE_SIGNATURE = 0x08074b50;\nconst DATA_DESCRIPTOR_RECORD_SIGNATURE = SPLIT_ZIP_FILE_SIGNATURE;\nconst CENTRAL_FILE_HEADER_SIGNATURE = 0x02014b50;\nconst END_OF_CENTRAL_DIR_SIGNATURE = 0x06054b50;\nconst ZIP64_END_OF_CENTRAL_DIR_SIGNATURE = 0x06064b50;\nconst ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE = 0x07064b50;\nconst END_OF_CENTRAL_DIR_LENGTH = 22;\nconst ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH = 20;\nconst ZIP64_END_OF_CENTRAL_DIR_LENGTH = 56;\nconst ZIP64_END_OF_CENTRAL_DIR_TOTAL_LENGTH = END_OF_CENTRAL_DIR_LENGTH + ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH + ZIP64_END_OF_CENTRAL_DIR_LENGTH;\n\nconst EXTRAFIELD_TYPE_ZIP64 = 0x0001;\nconst EXTRAFIELD_TYPE_AES = 0x9901;\nconst EXTRAFIELD_TYPE_NTFS = 0x000a;\nconst EXTRAFIELD_TYPE_NTFS_TAG1 = 0x0001;\nconst EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP = 0x5455;\nconst EXTRAFIELD_TYPE_UNICODE_PATH = 0x7075;\nconst EXTRAFIELD_TYPE_UNICODE_COMMENT = 0x6375;\n\nconst BITFLAG_ENCRYPTED = 0x01;\nconst BITFLAG_LEVEL = 0x06;\nconst BITFLAG_DATA_DESCRIPTOR = 0x0008;\nconst BITFLAG_LANG_ENCODING_FLAG = 0x0800;\nconst FILE_ATTR_MSDOS_DIR_MASK = 0x10;\n\nconst VERSION_DEFLATE = 0x14;\nconst VERSION_ZIP64 = 0x2D;\nconst VERSION_AES = 0x33;\n\nconst DIRECTORY_SIGNATURE = \"/\";\n\nconst MAX_DATE = new Date(2107, 11, 31);\nconst MIN_DATE = new Date(1980, 0, 1);\n\nconst UNDEFINED_VALUE = undefined;\nconst UNDEFINED_TYPE = \"undefined\";\nconst FUNCTION_TYPE = \"function\";\n\nexport {\n\tMAX_32_BITS,\n\tMAX_16_BITS,\n\tCOMPRESSION_METHOD_DEFLATE,\n\tCOMPRESSION_METHOD_STORE,\n\tCOMPRESSION_METHOD_AES,\n\tSPLIT_ZIP_FILE_SIGNATURE,\n\tLOCAL_FILE_HEADER_SIGNATURE,\n\tDATA_DESCRIPTOR_RECORD_SIGNATURE,\n\tCENTRAL_FILE_HEADER_SIGNATURE,\n\tEND_OF_CENTRAL_DIR_SIGNATURE,\n\tZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE,\n\tZIP64_END_OF_CENTRAL_DIR_SIGNATURE,\n\tEXTRAFIELD_TYPE_ZIP64,\n\tEXTRAFIELD_TYPE_AES,\n\tEXTRAFIELD_TYPE_NTFS,\n\tEXTRAFIELD_TYPE_NTFS_TAG1,\n\tEXTRAFIELD_TYPE_EXTENDED_TIMESTAMP,\n\tEXTRAFIELD_TYPE_UNICODE_PATH,\n\tEXTRAFIELD_TYPE_UNICODE_COMMENT,\n\tEND_OF_CENTRAL_DIR_LENGTH,\n\tZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH,\n\tZIP64_END_OF_CENTRAL_DIR_LENGTH,\n\tZIP64_END_OF_CENTRAL_DIR_TOTAL_LENGTH,\n\tBITFLAG_ENCRYPTED,\n\tBITFLAG_LEVEL,\n\tBITFLAG_DATA_DESCRIPTOR,\n\tBITFLAG_LANG_ENCODING_FLAG,\n\tFILE_ATTR_MSDOS_DIR_MASK,\n\tVERSION_DEFLATE,\n\tVERSION_ZIP64,\n\tVERSION_AES,\n\tDIRECTORY_SIGNATURE,\n\tMIN_DATE,\n\tMAX_DATE,\n\tUNDEFINED_VALUE,\n\tUNDEFINED_TYPE,\n\tFUNCTION_TYPE\n};","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TransformStream */\n\nexport {\n\tStreamAdapter\n};\n\nclass StreamAdapter {\n\n\tconstructor(Codec) {\n\t\treturn class extends TransformStream {\n\t\t\tconstructor(_format, options) {\n\t\t\t\tconst codec = new Codec(options);\n\t\t\t\tsuper({\n\t\t\t\t\ttransform(chunk, controller) {\n\t\t\t\t\t\tcontroller.enqueue(codec.append(chunk));\n\t\t\t\t\t},\n\t\t\t\t\tflush(controller) {\n\t\t\t\t\t\tconst chunk = codec.flush();\n\t\t\t\t\t\tif (chunk) {\n\t\t\t\t\t\t\tcontroller.enqueue(chunk);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global navigator, CompressionStream, DecompressionStream */\n\nimport {\n\tUNDEFINED_VALUE,\n\tUNDEFINED_TYPE\n} from \"./constants.js\";\nimport { StreamAdapter } from \"./streams/stream-adapter.js\";\n\nconst MINIMUM_CHUNK_SIZE = 64;\nlet maxWorkers = 2;\ntry {\n\tif (typeof navigator != UNDEFINED_TYPE && navigator.hardwareConcurrency) {\n\t\tmaxWorkers = navigator.hardwareConcurrency;\n\t}\n} catch (_error) {\n\t// ignored\n}\nconst DEFAULT_CONFIGURATION = {\n\tchunkSize: 512 * 1024,\n\tmaxWorkers,\n\tterminateWorkerTimeout: 5000,\n\tuseWebWorkers: true,\n\tuseCompressionStream: true,\n\tworkerScripts: UNDEFINED_VALUE,\n\tCompressionStreamNative: typeof CompressionStream != UNDEFINED_TYPE && CompressionStream,\n\tDecompressionStreamNative: typeof DecompressionStream != UNDEFINED_TYPE && DecompressionStream\n};\n\nconst config = Object.assign({}, DEFAULT_CONFIGURATION);\n\nexport {\n\tconfigure,\n\tgetConfiguration,\n\tgetChunkSize\n};\n\nfunction getConfiguration() {\n\treturn config;\n}\n\nfunction getChunkSize(config) {\n\treturn Math.max(config.chunkSize, MINIMUM_CHUNK_SIZE);\n}\n\nfunction configure(configuration) {\n\tconst {\n\t\tbaseURL,\n\t\tchunkSize,\n\t\tmaxWorkers,\n\t\tterminateWorkerTimeout,\n\t\tuseCompressionStream,\n\t\tuseWebWorkers,\n\t\tDeflate,\n\t\tInflate,\n\t\tCompressionStream,\n\t\tDecompressionStream,\n\t\tworkerScripts\n\t} = configuration;\n\tsetIfDefined(\"baseURL\", baseURL);\n\tsetIfDefined(\"chunkSize\", chunkSize);\n\tsetIfDefined(\"maxWorkers\", maxWorkers);\n\tsetIfDefined(\"terminateWorkerTimeout\", terminateWorkerTimeout);\n\tsetIfDefined(\"useCompressionStream\", useCompressionStream);\n\tsetIfDefined(\"useWebWorkers\", useWebWorkers);\n\tif (Deflate) {\n\t\tconfig.CompressionStream = new StreamAdapter(Deflate);\n\t}\n\tif (Inflate) {\n\t\tconfig.DecompressionStream = new StreamAdapter(Inflate);\n\t}\n\tsetIfDefined(\"CompressionStream\", CompressionStream);\n\tsetIfDefined(\"DecompressionStream\", DecompressionStream);\n\tif (workerScripts !== UNDEFINED_VALUE) {\n\t\tconst { deflate, inflate } = workerScripts;\n\t\tif (deflate || inflate) {\n\t\t\tif (!config.workerScripts) {\n\t\t\t\tconfig.workerScripts = {};\n\t\t\t}\n\t\t}\n\t\tif (deflate) {\n\t\t\tif (!Array.isArray(deflate)) {\n\t\t\t\tthrow new Error(\"workerScripts.deflate must be an array\");\n\t\t\t}\n\t\t\tconfig.workerScripts.deflate = deflate;\n\t\t}\n\t\tif (inflate) {\n\t\t\tif (!Array.isArray(inflate)) {\n\t\t\t\tthrow new Error(\"workerScripts.inflate must be an array\");\n\t\t\t}\n\t\t\tconfig.workerScripts.inflate = inflate;\n\t\t}\n\t}\n}\n\nfunction setIfDefined(propertyName, propertyValue) {\n\tif (propertyValue !== UNDEFINED_VALUE) {\n\t\tconfig[propertyName] = propertyValue;\n\t}\n}\n","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// deno-lint-ignore-file no-prototype-builtins\n\nimport { getMimeType as getDefaultMimeType } from \"./default-mime-type.js\";\n\nconst table = {\n\t\"application\": {\n\t\t\"andrew-inset\": \"ez\",\n\t\t\"annodex\": \"anx\",\n\t\t\"atom+xml\": \"atom\",\n\t\t\"atomcat+xml\": \"atomcat\",\n\t\t\"atomserv+xml\": \"atomsrv\",\n\t\t\"bbolin\": \"lin\",\n\t\t\"cap\": [\"cap\", \"pcap\"],\n\t\t\"cu-seeme\": \"cu\",\n\t\t\"davmount+xml\": \"davmount\",\n\t\t\"dsptype\": \"tsp\",\n\t\t\"ecmascript\": [\"es\", \"ecma\"],\n\t\t\"futuresplash\": \"spl\",\n\t\t\"hta\": \"hta\",\n\t\t\"java-archive\": \"jar\",\n\t\t\"java-serialized-object\": \"ser\",\n\t\t\"java-vm\": \"class\",\n\t\t\"javascript\": \"js\",\n\t\t\"m3g\": \"m3g\",\n\t\t\"mac-binhex40\": \"hqx\",\n\t\t\"mathematica\": [\"nb\", \"ma\", \"mb\"],\n\t\t\"msaccess\": \"mdb\",\n\t\t\"msword\": [\"doc\", \"dot\"],\n\t\t\"mxf\": \"mxf\",\n\t\t\"oda\": \"oda\",\n\t\t\"ogg\": \"ogx\",\n\t\t\"pdf\": \"pdf\",\n\t\t\"pgp-keys\": \"key\",\n\t\t\"pgp-signature\": [\"asc\", \"sig\"],\n\t\t\"pics-rules\": \"prf\",\n\t\t\"postscript\": [\"ps\", \"ai\", \"eps\", \"epsi\", \"epsf\", \"eps2\", \"eps3\"],\n\t\t\"rar\": \"rar\",\n\t\t\"rdf+xml\": \"rdf\",\n\t\t\"rss+xml\": \"rss\",\n\t\t\"rtf\": \"rtf\",\n\t\t\"smil\": [\"smi\", \"smil\"],\n\t\t\"xhtml+xml\": [\"xhtml\", \"xht\"],\n\t\t\"xml\": [\"xml\", \"xsl\", \"xsd\"],\n\t\t\"xspf+xml\": \"xspf\",\n\t\t\"zip\": \"zip\",\n\t\t\"vnd.android.package-archive\": \"apk\",\n\t\t\"vnd.cinderella\": \"cdy\",\n\t\t\"vnd.google-earth.kml+xml\": \"kml\",\n\t\t\"vnd.google-earth.kmz\": \"kmz\",\n\t\t\"vnd.mozilla.xul+xml\": \"xul\",\n\t\t\"vnd.ms-excel\": [\"xls\", \"xlb\", \"xlt\", \"xlm\", \"xla\", \"xlc\", \"xlw\"],\n\t\t\"vnd.ms-pki.seccat\": \"cat\",\n\t\t\"vnd.ms-pki.stl\": \"stl\",\n\t\t\"vnd.ms-powerpoint\": [\"ppt\", \"pps\", \"pot\"],\n\t\t\"vnd.oasis.opendocument.chart\": \"odc\",\n\t\t\"vnd.oasis.opendocument.database\": \"odb\",\n\t\t\"vnd.oasis.opendocument.formula\": \"odf\",\n\t\t\"vnd.oasis.opendocument.graphics\": \"odg\",\n\t\t\"vnd.oasis.opendocument.graphics-template\": \"otg\",\n\t\t\"vnd.oasis.opendocument.image\": \"odi\",\n\t\t\"vnd.oasis.opendocument.presentation\": \"odp\",\n\t\t\"vnd.oasis.opendocument.presentation-template\": \"otp\",\n\t\t\"vnd.oasis.opendocument.spreadsheet\": \"ods\",\n\t\t\"vnd.oasis.opendocument.spreadsheet-template\": \"ots\",\n\t\t\"vnd.oasis.opendocument.text\": \"odt\",\n\t\t\"vnd.oasis.opendocument.text-master\": \"odm\",\n\t\t\"vnd.oasis.opendocument.text-template\": \"ott\",\n\t\t\"vnd.oasis.opendocument.text-web\": \"oth\",\n\t\t\"vnd.openxmlformats-officedocument.spreadsheetml.sheet\": \"xlsx\",\n\t\t\"vnd.openxmlformats-officedocument.spreadsheetml.template\": \"xltx\",\n\t\t\"vnd.openxmlformats-officedocument.presentationml.presentation\": \"pptx\",\n\t\t\"vnd.openxmlformats-officedocument.presentationml.slideshow\": \"ppsx\",\n\t\t\"vnd.openxmlformats-officedocument.presentationml.template\": \"potx\",\n\t\t\"vnd.openxmlformats-officedocument.wordprocessingml.document\": \"docx\",\n\t\t\"vnd.openxmlformats-officedocument.wordprocessingml.template\": \"dotx\",\n\t\t\"vnd.smaf\": \"mmf\",\n\t\t\"vnd.stardivision.calc\": \"sdc\",\n\t\t\"vnd.stardivision.chart\": \"sds\",\n\t\t\"vnd.stardivision.draw\": \"sda\",\n\t\t\"vnd.stardivision.impress\": \"sdd\",\n\t\t\"vnd.stardivision.math\": [\"sdf\", \"smf\"],\n\t\t\"vnd.stardivision.writer\": [\"sdw\", \"vor\"],\n\t\t\"vnd.stardivision.writer-global\": \"sgl\",\n\t\t\"vnd.sun.xml.calc\": \"sxc\",\n\t\t\"vnd.sun.xml.calc.template\": \"stc\",\n\t\t\"vnd.sun.xml.draw\": \"sxd\",\n\t\t\"vnd.sun.xml.draw.template\": \"std\",\n\t\t\"vnd.sun.xml.impress\": \"sxi\",\n\t\t\"vnd.sun.xml.impress.template\": \"sti\",\n\t\t\"vnd.sun.xml.math\": \"sxm\",\n\t\t\"vnd.sun.xml.writer\": \"sxw\",\n\t\t\"vnd.sun.xml.writer.global\": \"sxg\",\n\t\t\"vnd.sun.xml.writer.template\": \"stw\",\n\t\t\"vnd.symbian.install\": [\"sis\", \"sisx\"],\n\t\t\"vnd.visio\": [\"vsd\", \"vst\", \"vss\", \"vsw\"],\n\t\t\"vnd.wap.wbxml\": \"wbxml\",\n\t\t\"vnd.wap.wmlc\": \"wmlc\",\n\t\t\"vnd.wap.wmlscriptc\": \"wmlsc\",\n\t\t\"vnd.wordperfect\": \"wpd\",\n\t\t\"vnd.wordperfect5.1\": \"wp5\",\n\t\t\"x-123\": \"wk\",\n\t\t\"x-7z-compressed\": \"7z\",\n\t\t\"x-abiword\": \"abw\",\n\t\t\"x-apple-diskimage\": \"dmg\",\n\t\t\"x-bcpio\": \"bcpio\",\n\t\t\"x-bittorrent\": \"torrent\",\n\t\t\"x-cbr\": [\"cbr\", \"cba\", \"cbt\", \"cb7\"],\n\t\t\"x-cbz\": \"cbz\",\n\t\t\"x-cdf\": [\"cdf\", \"cda\"],\n\t\t\"x-cdlink\": \"vcd\",\n\t\t\"x-chess-pgn\": \"pgn\",\n\t\t\"x-cpio\": \"cpio\",\n\t\t\"x-csh\": \"csh\",\n\t\t\"x-debian-package\": [\"deb\", \"udeb\"],\n\t\t\"x-director\": [\"dcr\", \"dir\", \"dxr\", \"cst\", \"cct\", \"cxt\", \"w3d\", \"fgd\", \"swa\"],\n\t\t\"x-dms\": \"dms\",\n\t\t\"x-doom\": \"wad\",\n\t\t\"x-dvi\": \"dvi\",\n\t\t\"x-httpd-eruby\": \"rhtml\",\n\t\t\"x-font\": \"pcf.Z\",\n\t\t\"x-freemind\": \"mm\",\n\t\t\"x-gnumeric\": \"gnumeric\",\n\t\t\"x-go-sgf\": \"sgf\",\n\t\t\"x-graphing-calculator\": \"gcf\",\n\t\t\"x-gtar\": [\"gtar\", \"taz\"],\n\t\t\"x-hdf\": \"hdf\",\n\t\t\"x-httpd-php\": [\"phtml\", \"pht\", \"php\"],\n\t\t\"x-httpd-php-source\": \"phps\",\n\t\t\"x-httpd-php3\": \"php3\",\n\t\t\"x-httpd-php3-preprocessed\": \"php3p\",\n\t\t\"x-httpd-php4\": \"php4\",\n\t\t\"x-httpd-php5\": \"php5\",\n\t\t\"x-ica\": \"ica\",\n\t\t\"x-info\": \"info\",\n\t\t\"x-internet-signup\": [\"ins\", \"isp\"],\n\t\t\"x-iphone\": \"iii\",\n\t\t\"x-iso9660-image\": \"iso\",\n\t\t\"x-java-jnlp-file\": \"jnlp\",\n\t\t\"x-jmol\": \"jmz\",\n\t\t\"x-killustrator\": \"kil\",\n\t\t\"x-koan\": [\"skp\", \"skd\", \"skt\", \"skm\"],\n\t\t\"x-kpresenter\": [\"kpr\", \"kpt\"],\n\t\t\"x-kword\": [\"kwd\", \"kwt\"],\n\t\t\"x-latex\": \"latex\",\n\t\t\"x-lha\": \"lha\",\n\t\t\"x-lyx\": \"lyx\",\n\t\t\"x-lzh\": \"lzh\",\n\t\t\"x-lzx\": \"lzx\",\n\t\t\"x-maker\": [\"frm\", \"maker\", \"frame\", \"fm\", \"fb\", \"book\", \"fbdoc\"],\n\t\t\"x-ms-wmd\": \"wmd\",\n\t\t\"x-ms-wmz\": \"wmz\",\n\t\t\"x-msdos-program\": [\"com\", \"exe\", \"bat\", \"dll\"],\n\t\t\"x-msi\": \"msi\",\n\t\t\"x-netcdf\": [\"nc\", \"cdf\"],\n\t\t\"x-ns-proxy-autoconfig\": [\"pac\", \"dat\"],\n\t\t\"x-nwc\": \"nwc\",\n\t\t\"x-object\": \"o\",\n\t\t\"x-oz-application\": \"oza\",\n\t\t\"x-pkcs7-certreqresp\": \"p7r\",\n\t\t\"x-python-code\": [\"pyc\", \"pyo\"],\n\t\t\"x-qgis\": [\"qgs\", \"shp\", \"shx\"],\n\t\t\"x-quicktimeplayer\": \"qtl\",\n\t\t\"x-redhat-package-manager\": \"rpm\",\n\t\t\"x-ruby\": \"rb\",\n\t\t\"x-sh\": \"sh\",\n\t\t\"x-shar\": \"shar\",\n\t\t\"x-shockwave-flash\": [\"swf\", \"swfl\"],\n\t\t\"x-silverlight\": \"scr\",\n\t\t\"x-stuffit\": \"sit\",\n\t\t\"x-sv4cpio\": \"sv4cpio\",\n\t\t\"x-sv4crc\": \"sv4crc\",\n\t\t\"x-tar\": \"tar\",\n\t\t\"x-tcl\": \"tcl\",\n\t\t\"x-tex-gf\": \"gf\",\n\t\t\"x-tex-pk\": \"pk\",\n\t\t\"x-texinfo\": [\"texinfo\", \"texi\"],\n\t\t\"x-trash\": [\"~\", \"%\", \"bak\", \"old\", \"sik\"],\n\t\t\"x-troff\": [\"t\", \"tr\", \"roff\"],\n\t\t\"x-troff-man\": \"man\",\n\t\t\"x-troff-me\": \"me\",\n\t\t\"x-troff-ms\": \"ms\",\n\t\t\"x-ustar\": \"ustar\",\n\t\t\"x-wais-source\": \"src\",\n\t\t\"x-wingz\": \"wz\",\n\t\t\"x-x509-ca-cert\": [\"crt\", \"der\", \"cer\"],\n\t\t\"x-xcf\": \"xcf\",\n\t\t\"x-xfig\": \"fig\",\n\t\t\"x-xpinstall\": \"xpi\",\n\t\t\"applixware\": \"aw\",\n\t\t\"atomsvc+xml\": \"atomsvc\",\n\t\t\"ccxml+xml\": \"ccxml\",\n\t\t\"cdmi-capability\": \"cdmia\",\n\t\t\"cdmi-container\": \"cdmic\",\n\t\t\"cdmi-domain\": \"cdmid\",\n\t\t\"cdmi-object\": \"cdmio\",\n\t\t\"cdmi-queue\": \"cdmiq\",\n\t\t\"docbook+xml\": \"dbk\",\n\t\t\"dssc+der\": \"dssc\",\n\t\t\"dssc+xml\": \"xdssc\",\n\t\t\"emma+xml\": \"emma\",\n\t\t\"epub+zip\": \"epub\",\n\t\t\"exi\": \"exi\",\n\t\t\"font-tdpfr\": \"pfr\",\n\t\t\"gml+xml\": \"gml\",\n\t\t\"gpx+xml\": \"gpx\",\n\t\t\"gxf\": \"gxf\",\n\t\t\"hyperstudio\": \"stk\",\n\t\t\"inkml+xml\": [\"ink\", \"inkml\"],\n\t\t\"ipfix\": \"ipfix\",\n\t\t\"json\": \"json\",\n\t\t\"jsonml+json\": \"jsonml\",\n\t\t\"lost+xml\": \"lostxml\",\n\t\t\"mads+xml\": \"mads\",\n\t\t\"marc\": \"mrc\",\n\t\t\"marcxml+xml\": \"mrcx\",\n\t\t\"mathml+xml\": \"mathml\",\n\t\t\"mbox\": \"mbox\",\n\t\t\"mediaservercontrol+xml\": \"mscml\",\n\t\t\"metalink+xml\": \"metalink\",\n\t\t\"metalink4+xml\": \"meta4\",\n\t\t\"mets+xml\": \"mets\",\n\t\t\"mods+xml\": \"mods\",\n\t\t\"mp21\": [\"m21\", \"mp21\"],\n\t\t\"mp4\": \"mp4s\",\n\t\t\"oebps-package+xml\": \"opf\",\n\t\t\"omdoc+xml\": \"omdoc\",\n\t\t\"onenote\": [\"onetoc\", \"onetoc2\", \"onetmp\", \"onepkg\"],\n\t\t\"oxps\": \"oxps\",\n\t\t\"patch-ops-error+xml\": \"xer\",\n\t\t\"pgp-encrypted\": \"pgp\",\n\t\t\"pkcs10\": \"p10\",\n\t\t\"pkcs7-mime\": [\"p7m\", \"p7c\"],\n\t\t\"pkcs7-signature\": \"p7s\",\n\t\t\"pkcs8\": \"p8\",\n\t\t\"pkix-attr-cert\": \"ac\",\n\t\t\"pkix-crl\": \"crl\",\n\t\t\"pkix-pkipath\": \"pkipath\",\n\t\t\"pkixcmp\": \"pki\",\n\t\t\"pls+xml\": \"pls\",\n\t\t\"prs.cww\": \"cww\",\n\t\t\"pskc+xml\": \"pskcxml\",\n\t\t\"reginfo+xml\": \"rif\",\n\t\t\"relax-ng-compact-syntax\": \"rnc\",\n\t\t\"resource-lists+xml\": \"rl\",\n\t\t\"resource-lists-diff+xml\": \"rld\",\n\t\t\"rls-services+xml\": \"rs\",\n\t\t\"rpki-ghostbusters\": \"gbr\",\n\t\t\"rpki-manifest\": \"mft\",\n\t\t\"rpki-roa\": \"roa\",\n\t\t\"rsd+xml\": \"rsd\",\n\t\t\"sbml+xml\": \"sbml\",\n\t\t\"scvp-cv-request\": \"scq\",\n\t\t\"scvp-cv-response\": \"scs\",\n\t\t\"scvp-vp-request\": \"spq\",\n\t\t\"scvp-vp-response\": \"spp\",\n\t\t\"sdp\": \"sdp\",\n\t\t\"set-payment-initiation\": \"setpay\",\n\t\t\"set-registration-initiation\": \"setreg\",\n\t\t\"shf+xml\": \"shf\",\n\t\t\"sparql-query\": \"rq\",\n\t\t\"sparql-results+xml\": \"srx\",\n\t\t\"srgs\": \"gram\",\n\t\t\"srgs+xml\": \"grxml\",\n\t\t\"sru+xml\": \"sru\",\n\t\t\"ssdl+xml\": \"ssdl\",\n\t\t\"ssml+xml\": \"ssml\",\n\t\t\"tei+xml\": [\"tei\", \"teicorpus\"],\n\t\t\"thraud+xml\": \"tfi\",\n\t\t\"timestamped-data\": \"tsd\",\n\t\t\"vnd.3gpp.pic-bw-large\": \"plb\",\n\t\t\"vnd.3gpp.pic-bw-small\": \"psb\",\n\t\t\"vnd.3gpp.pic-bw-var\": \"pvb\",\n\t\t\"vnd.3gpp2.tcap\": \"tcap\",\n\t\t\"vnd.3m.post-it-notes\": \"pwn\",\n\t\t\"vnd.accpac.simply.aso\": \"aso\",\n\t\t\"vnd.accpac.simply.imp\": \"imp\",\n\t\t\"vnd.acucobol\": \"acu\",\n\t\t\"vnd.acucorp\": [\"atc\", \"acutc\"],\n\t\t\"vnd.adobe.air-application-installer-package+zip\": \"air\",\n\t\t\"vnd.adobe.formscentral.fcdt\": \"fcdt\",\n\t\t\"vnd.adobe.fxp\": [\"fxp\", \"fxpl\"],\n\t\t\"vnd.adobe.xdp+xml\": \"xdp\",\n\t\t\"vnd.adobe.xfdf\": \"xfdf\",\n\t\t\"vnd.ahead.space\": \"ahead\",\n\t\t\"vnd.airzip.filesecure.azf\": \"azf\",\n\t\t\"vnd.airzip.filesecure.azs\": \"azs\",\n\t\t\"vnd.amazon.ebook\": \"azw\",\n\t\t\"vnd.americandynamics.acc\": \"acc\",\n\t\t\"vnd.amiga.ami\": \"ami\",\n\t\t\"vnd.anser-web-certificate-issue-initiation\": \"cii\",\n\t\t\"vnd.anser-web-funds-transfer-initiation\": \"fti\",\n\t\t\"vnd.antix.game-component\": \"atx\",\n\t\t\"vnd.apple.installer+xml\": \"mpkg\",\n\t\t\"vnd.apple.mpegurl\": \"m3u8\",\n\t\t\"vnd.aristanetworks.swi\": \"swi\",\n\t\t\"vnd.astraea-software.iota\": \"iota\",\n\t\t\"vnd.audiograph\": \"aep\",\n\t\t\"vnd.blueice.multipass\": \"mpm\",\n\t\t\"vnd.bmi\": \"bmi\",\n\t\t\"vnd.businessobjects\": \"rep\",\n\t\t\"vnd.chemdraw+xml\": \"cdxml\",\n\t\t\"vnd.chipnuts.karaoke-mmd\": \"mmd\",\n\t\t\"vnd.claymore\": \"cla\",\n\t\t\"vnd.cloanto.rp9\": \"rp9\",\n\t\t\"vnd.clonk.c4group\": [\"c4g\", \"c4d\", \"c4f\", \"c4p\", \"c4u\"],\n\t\t\"vnd.cluetrust.cartomobile-config\": \"c11amc\",\n\t\t\"vnd.cluetrust.cartomobile-config-pkg\": \"c11amz\",\n\t\t\"vnd.commonspace\": \"csp\",\n\t\t\"vnd.contact.cmsg\": \"cdbcmsg\",\n\t\t\"vnd.cosmocaller\": \"cmc\",\n\t\t\"vnd.crick.clicker\": \"clkx\",\n\t\t\"vnd.crick.clicker.keyboard\": \"clkk\",\n\t\t\"vnd.crick.clicker.palette\": \"clkp\",\n\t\t\"vnd.crick.clicker.template\": \"clkt\",\n\t\t\"vnd.crick.clicker.wordbank\": \"clkw\",\n\t\t\"vnd.criticaltools.wbs+xml\": \"wbs\",\n\t\t\"vnd.ctc-posml\": \"pml\",\n\t\t\"vnd.cups-ppd\": \"ppd\",\n\t\t\"vnd.curl.car\": \"car\",\n\t\t\"vnd.curl.pcurl\": \"pcurl\",\n\t\t\"vnd.dart\": \"dart\",\n\t\t\"vnd.data-vision.rdz\": \"rdz\",\n\t\t\"vnd.dece.data\": [\"uvf\", \"uvvf\", \"uvd\", \"uvvd\"],\n\t\t\"vnd.dece.ttml+xml\": [\"uvt\", \"uvvt\"],\n\t\t\"vnd.dece.unspecified\": [\"uvx\", \"uvvx\"],\n\t\t\"vnd.dece.zip\": [\"uvz\", \"uvvz\"],\n\t\t\"vnd.denovo.fcselayout-link\": \"fe_launch\",\n\t\t\"vnd.dna\": \"dna\",\n\t\t\"vnd.dolby.mlp\": \"mlp\",\n\t\t\"vnd.dpgraph\": \"dpg\",\n\t\t\"vnd.dreamfactory\": \"dfac\",\n\t\t\"vnd.ds-keypoint\": \"kpxx\",\n\t\t\"vnd.dvb.ait\": \"ait\",\n\t\t\"vnd.dvb.service\": \"svc\",\n\t\t\"vnd.dynageo\": \"geo\",\n\t\t\"vnd.ecowin.chart\": \"mag\",\n\t\t\"vnd.enliven\": \"nml\",\n\t\t\"vnd.epson.esf\": \"esf\",\n\t\t\"vnd.epson.msf\": \"msf\",\n\t\t\"vnd.epson.quickanime\": \"qam\",\n\t\t\"vnd.epson.salt\": \"slt\",\n\t\t\"vnd.epson.ssf\": \"ssf\",\n\t\t\"vnd.eszigno3+xml\": [\"es3\", \"et3\"],\n\t\t\"vnd.ezpix-album\": \"ez2\",\n\t\t\"vnd.ezpix-package\": \"ez3\",\n\t\t\"vnd.fdf\": \"fdf\",\n\t\t\"vnd.fdsn.mseed\": \"mseed\",\n\t\t\"vnd.fdsn.seed\": [\"seed\", \"dataless\"],\n\t\t\"vnd.flographit\": \"gph\",\n\t\t\"vnd.fluxtime.clip\": \"ftc\",\n\t\t\"vnd.framemaker\": [\"fm\", \"frame\", \"maker\", \"book\"],\n\t\t\"vnd.frogans.fnc\": \"fnc\",\n\t\t\"vnd.frogans.ltf\": \"ltf\",\n\t\t\"vnd.fsc.weblaunch\": \"fsc\",\n\t\t\"vnd.fujitsu.oasys\": \"oas\",\n\t\t\"vnd.fujitsu.oasys2\": \"oa2\",\n\t\t\"vnd.fujitsu.oasys3\": \"oa3\",\n\t\t\"vnd.fujitsu.oasysgp\": \"fg5\",\n\t\t\"vnd.fujitsu.oasysprs\": \"bh2\",\n\t\t\"vnd.fujixerox.ddd\": \"ddd\",\n\t\t\"vnd.fujixerox.docuworks\": \"xdw\",\n\t\t\"vnd.fujixerox.docuworks.binder\": \"xbd\",\n\t\t\"vnd.fuzzysheet\": \"fzs\",\n\t\t\"vnd.genomatix.tuxedo\": \"txd\",\n\t\t\"vnd.geogebra.file\": \"ggb\",\n\t\t\"vnd.geogebra.tool\": \"ggt\",\n\t\t\"vnd.geometry-explorer\": [\"gex\", \"gre\"],\n\t\t\"vnd.geonext\": \"gxt\",\n\t\t\"vnd.geoplan\": \"g2w\",\n\t\t\"vnd.geospace\": \"g3w\",\n\t\t\"vnd.gmx\": \"gmx\",\n\t\t\"vnd.grafeq\": [\"gqf\", \"gqs\"],\n\t\t\"vnd.groove-account\": \"gac\",\n\t\t\"vnd.groove-help\": \"ghf\",\n\t\t\"vnd.groove-identity-message\": \"gim\",\n\t\t\"vnd.groove-injector\": \"grv\",\n\t\t\"vnd.groove-tool-message\": \"gtm\",\n\t\t\"vnd.groove-tool-template\": \"tpl\",\n\t\t\"vnd.groove-vcard\": \"vcg\",\n\t\t\"vnd.hal+xml\": \"hal\",\n\t\t\"vnd.handheld-entertainment+xml\": \"zmm\",\n\t\t\"vnd.hbci\": \"hbci\",\n\t\t\"vnd.hhe.lesson-player\": \"les\",\n\t\t\"vnd.hp-hpgl\": \"hpgl\",\n\t\t\"vnd.hp-hpid\": \"hpid\",\n\t\t\"vnd.hp-hps\": \"hps\",\n\t\t\"vnd.hp-jlyt\": \"jlt\",\n\t\t\"vnd.hp-pcl\": \"pcl\",\n\t\t\"vnd.hp-pclxl\": \"pclxl\",\n\t\t\"vnd.hydrostatix.sof-data\": \"sfd-hdstx\",\n\t\t\"vnd.ibm.minipay\": \"mpy\",\n\t\t\"vnd.ibm.modcap\": [\"afp\", \"listafp\", \"list3820\"],\n\t\t\"vnd.ibm.rights-management\": \"irm\",\n\t\t\"vnd.ibm.secure-container\": \"sc\",\n\t\t\"vnd.iccprofile\": [\"icc\", \"icm\"],\n\t\t\"vnd.igloader\": \"igl\",\n\t\t\"vnd.immervision-ivp\": \"ivp\",\n\t\t\"vnd.immervision-ivu\": \"ivu\",\n\t\t\"vnd.insors.igm\": \"igm\",\n\t\t\"vnd.intercon.formnet\": [\"xpw\", \"xpx\"],\n\t\t\"vnd.intergeo\": \"i2g\",\n\t\t\"vnd.intu.qbo\": \"qbo\",\n\t\t\"vnd.intu.qfx\": \"qfx\",\n\t\t\"vnd.ipunplugged.rcprofile\": \"rcprofile\",\n\t\t\"vnd.irepository.package+xml\": \"irp\",\n\t\t\"vnd.is-xpr\": \"xpr\",\n\t\t\"vnd.isac.fcs\": \"fcs\",\n\t\t\"vnd.jam\": \"jam\",\n\t\t\"vnd.jcp.javame.midlet-rms\": \"rms\",\n\t\t\"vnd.jisp\": \"jisp\",\n\t\t\"vnd.joost.joda-archive\": \"joda\",\n\t\t\"vnd.kahootz\": [\"ktz\", \"ktr\"],\n\t\t\"vnd.kde.karbon\": \"karbon\",\n\t\t\"vnd.kde.kchart\": \"chrt\",\n\t\t\"vnd.kde.kformula\": \"kfo\",\n\t\t\"vnd.kde.kivio\": \"flw\",\n\t\t\"vnd.kde.kontour\": \"kon\",\n\t\t\"vnd.kde.kpresenter\": [\"kpr\", \"kpt\"],\n\t\t\"vnd.kde.kspread\": \"ksp\",\n\t\t\"vnd.kde.kword\": [\"kwd\", \"kwt\"],\n\t\t\"vnd.kenameaapp\": \"htke\",\n\t\t\"vnd.kidspiration\": \"kia\",\n\t\t\"vnd.kinar\": [\"kne\", \"knp\"],\n\t\t\"vnd.koan\": [\"skp\", \"skd\", \"skt\", \"skm\"],\n\t\t\"vnd.kodak-descriptor\": \"sse\",\n\t\t\"vnd.las.las+xml\": \"lasxml\",\n\t\t\"vnd.llamagraphics.life-balance.desktop\": \"lbd\",\n\t\t\"vnd.llamagraphics.life-balance.exchange+xml\": \"lbe\",\n\t\t\"vnd.lotus-1-2-3\": \"123\",\n\t\t\"vnd.lotus-approach\": \"apr\",\n\t\t\"vnd.lotus-freelance\": \"pre\",\n\t\t\"vnd.lotus-notes\": \"nsf\",\n\t\t\"vnd.lotus-organizer\": \"org\",\n\t\t\"vnd.lotus-screencam\": \"scm\",\n\t\t\"vnd.lotus-wordpro\": \"lwp\",\n\t\t\"vnd.macports.portpkg\": \"portpkg\",\n\t\t\"vnd.mcd\": \"mcd\",\n\t\t\"vnd.medcalcdata\": \"mc1\",\n\t\t\"vnd.mediastation.cdkey\": \"cdkey\",\n\t\t\"vnd.mfer\": \"mwf\",\n\t\t\"vnd.mfmp\": \"mfm\",\n\t\t\"vnd.micrografx.flo\": \"flo\",\n\t\t\"vnd.micrografx.igx\": \"igx\",\n\t\t\"vnd.mif\": \"mif\",\n\t\t\"vnd.mobius.daf\": \"daf\",\n\t\t\"vnd.mobius.dis\": \"dis\",\n\t\t\"vnd.mobius.mbk\": \"mbk\",\n\t\t\"vnd.mobius.mqy\": \"mqy\",\n\t\t\"vnd.mobius.msl\": \"msl\",\n\t\t\"vnd.mobius.plc\": \"plc\",\n\t\t\"vnd.mobius.txf\": \"txf\",\n\t\t\"vnd.mophun.application\": \"mpn\",\n\t\t\"vnd.mophun.certificate\": \"mpc\",\n\t\t\"vnd.ms-artgalry\": \"cil\",\n\t\t\"vnd.ms-cab-compressed\": \"cab\",\n\t\t\"vnd.ms-excel.addin.macroenabled.12\": \"xlam\",\n\t\t\"vnd.ms-excel.sheet.binary.macroenabled.12\": \"xlsb\",\n\t\t\"vnd.ms-excel.sheet.macroenabled.12\": \"xlsm\",\n\t\t\"vnd.ms-excel.template.macroenabled.12\": \"xltm\",\n\t\t\"vnd.ms-fontobject\": \"eot\",\n\t\t\"vnd.ms-htmlhelp\": \"chm\",\n\t\t\"vnd.ms-ims\": \"ims\",\n\t\t\"vnd.ms-lrm\": \"lrm\",\n\t\t\"vnd.ms-officetheme\": \"thmx\",\n\t\t\"vnd.ms-powerpoint.addin.macroenabled.12\": \"ppam\",\n\t\t\"vnd.ms-powerpoint.presentation.macroenabled.12\": \"pptm\",\n\t\t\"vnd.ms-powerpoint.slide.macroenabled.12\": \"sldm\",\n\t\t\"vnd.ms-powerpoint.slideshow.macroenabled.12\": \"ppsm\",\n\t\t\"vnd.ms-powerpoint.template.macroenabled.12\": \"potm\",\n\t\t\"vnd.ms-project\": [\"mpp\", \"mpt\"],\n\t\t\"vnd.ms-word.document.macroenabled.12\": \"docm\",\n\t\t\"vnd.ms-word.template.macroenabled.12\": \"dotm\",\n\t\t\"vnd.ms-works\": [\"wps\", \"wks\", \"wcm\", \"wdb\"],\n\t\t\"vnd.ms-wpl\": \"wpl\",\n\t\t\"vnd.ms-xpsdocument\": \"xps\",\n\t\t\"vnd.mseq\": \"mseq\",\n\t\t\"vnd.musician\": \"mus\",\n\t\t\"vnd.muvee.style\": \"msty\",\n\t\t\"vnd.mynfc\": \"taglet\",\n\t\t\"vnd.neurolanguage.nlu\": \"nlu\",\n\t\t\"vnd.nitf\": [\"ntf\", \"nitf\"],\n\t\t\"vnd.noblenet-directory\": \"nnd\",\n\t\t\"vnd.noblenet-sealer\": \"nns\",\n\t\t\"vnd.noblenet-web\": \"nnw\",\n\t\t\"vnd.nokia.n-gage.data\": \"ngdat\",\n\t\t\"vnd.nokia.n-gage.symbian.install\": \"n-gage\",\n\t\t\"vnd.nokia.radio-preset\": \"rpst\",\n\t\t\"vnd.nokia.radio-presets\": \"rpss\",\n\t\t\"vnd.novadigm.edm\": \"edm\",\n\t\t\"vnd.novadigm.edx\": \"edx\",\n\t\t\"vnd.novadigm.ext\": \"ext\",\n\t\t\"vnd.oasis.opendocument.chart-template\": \"otc\",\n\t\t\"vnd.oasis.opendocument.formula-template\": \"odft\",\n\t\t\"vnd.oasis.opendocument.image-template\": \"oti\",\n\t\t\"vnd.olpc-sugar\": \"xo\",\n\t\t\"vnd.oma.dd2+xml\": \"dd2\",\n\t\t\"vnd.openofficeorg.extension\": \"oxt\",\n\t\t\"vnd.openxmlformats-officedocument.presentationml.slide\": \"sldx\",\n\t\t\"vnd.osgeo.mapguide.package\": \"mgp\",\n\t\t\"vnd.osgi.dp\": \"dp\",\n\t\t\"vnd.osgi.subsystem\": \"esa\",\n\t\t\"vnd.palm\": [\"pdb\", \"pqa\", \"oprc\"],\n\t\t\"vnd.pawaafile\": \"paw\",\n\t\t\"vnd.pg.format\": \"str\",\n\t\t\"vnd.pg.osasli\": \"ei6\",\n\t\t\"vnd.picsel\": \"efif\",\n\t\t\"vnd.pmi.widget\": \"wg\",\n\t\t\"vnd.pocketlearn\": \"plf\",\n\t\t\"vnd.powerbuilder6\": \"pbd\",\n\t\t\"vnd.previewsystems.box\": \"box\",\n\t\t\"vnd.proteus.magazine\": \"mgz\",\n\t\t\"vnd.publishare-delta-tree\": \"qps\",\n\t\t\"vnd.pvi.ptid1\": \"ptid\",\n\t\t\"vnd.quark.quarkxpress\": [\"qxd\", \"qxt\", \"qwd\", \"qwt\", \"qxl\", \"qxb\"],\n\t\t\"vnd.realvnc.bed\": \"bed\",\n\t\t\"vnd.recordare.musicxml\": \"mxl\",\n\t\t\"vnd.recordare.musicxml+xml\": \"musicxml\",\n\t\t\"vnd.rig.cryptonote\": \"cryptonote\",\n\t\t\"vnd.rn-realmedia\": \"rm\",\n\t\t\"vnd.rn-realmedia-vbr\": \"rmvb\",\n\t\t\"vnd.route66.link66+xml\": \"link66\",\n\t\t\"vnd.sailingtracker.track\": \"st\",\n\t\t\"vnd.seemail\": \"see\",\n\t\t\"vnd.sema\": \"sema\",\n\t\t\"vnd.semd\": \"semd\",\n\t\t\"vnd.semf\": \"semf\",\n\t\t\"vnd.shana.informed.formdata\": \"ifm\",\n\t\t\"vnd.shana.informed.formtemplate\": \"itp\",\n\t\t\"vnd.shana.informed.interchange\": \"iif\",\n\t\t\"vnd.shana.informed.package\": \"ipk\",\n\t\t\"vnd.simtech-mindmapper\": [\"twd\", \"twds\"],\n\t\t\"vnd.smart.teacher\": \"teacher\",\n\t\t\"vnd.solent.sdkm+xml\": [\"sdkm\", \"sdkd\"],\n\t\t\"vnd.spotfire.dxp\": \"dxp\",\n\t\t\"vnd.spotfire.sfs\": \"sfs\",\n\t\t\"vnd.stepmania.package\": \"smzip\",\n\t\t\"vnd.stepmania.stepchart\": \"sm\",\n\t\t\"vnd.sus-calendar\": [\"sus\", \"susp\"],\n\t\t\"vnd.svd\": \"svd\",\n\t\t\"vnd.syncml+xml\": \"xsm\",\n\t\t\"vnd.syncml.dm+wbxml\": \"bdm\",\n\t\t\"vnd.syncml.dm+xml\": \"xdm\",\n\t\t\"vnd.tao.intent-module-archive\": \"tao\",\n\t\t\"vnd.tcpdump.pcap\": [\"pcap\", \"cap\", \"dmp\"],\n\t\t\"vnd.tmobile-livetv\": \"tmo\",\n\t\t\"vnd.trid.tpt\": \"tpt\",\n\t\t\"vnd.triscape.mxs\": \"mxs\",\n\t\t\"vnd.trueapp\": \"tra\",\n\t\t\"vnd.ufdl\": [\"ufd\", \"ufdl\"],\n\t\t\"vnd.uiq.theme\": \"utz\",\n\t\t\"vnd.umajin\": \"umj\",\n\t\t\"vnd.unity\": \"unityweb\",\n\t\t\"vnd.uoml+xml\": \"uoml\",\n\t\t\"vnd.vcx\": \"vcx\",\n\t\t\"vnd.visionary\": \"vis\",\n\t\t\"vnd.vsf\": \"vsf\",\n\t\t\"vnd.webturbo\": \"wtb\",\n\t\t\"vnd.wolfram.player\": \"nbp\",\n\t\t\"vnd.wqd\": \"wqd\",\n\t\t\"vnd.wt.stf\": \"stf\",\n\t\t\"vnd.xara\": \"xar\",\n\t\t\"vnd.xfdl\": \"xfdl\",\n\t\t\"vnd.yamaha.hv-dic\": \"hvd\",\n\t\t\"vnd.yamaha.hv-script\": \"hvs\",\n\t\t\"vnd.yamaha.hv-voice\": \"hvp\",\n\t\t\"vnd.yamaha.openscoreformat\": \"osf\",\n\t\t\"vnd.yamaha.openscoreformat.osfpvg+xml\": \"osfpvg\",\n\t\t\"vnd.yamaha.smaf-audio\": \"saf\",\n\t\t\"vnd.yamaha.smaf-phrase\": \"spf\",\n\t\t\"vnd.yellowriver-custom-menu\": \"cmp\",\n\t\t\"vnd.zul\": [\"zir\", \"zirz\"],\n\t\t\"vnd.zzazz.deck+xml\": \"zaz\",\n\t\t\"voicexml+xml\": \"vxml\",\n\t\t\"widget\": \"wgt\",\n\t\t\"winhlp\": \"hlp\",\n\t\t\"wsdl+xml\": \"wsdl\",\n\t\t\"wspolicy+xml\": \"wspolicy\",\n\t\t\"x-ace-compressed\": \"ace\",\n\t\t\"x-authorware-bin\": [\"aab\", \"x32\", \"u32\", \"vox\"],\n\t\t\"x-authorware-map\": \"aam\",\n\t\t\"x-authorware-seg\": \"aas\",\n\t\t\"x-blorb\": [\"blb\", \"blorb\"],\n\t\t\"x-bzip\": \"bz\",\n\t\t\"x-bzip2\": [\"bz2\", \"boz\"],\n\t\t\"x-cfs-compressed\": \"cfs\",\n\t\t\"x-chat\": \"chat\",\n\t\t\"x-conference\": \"nsc\",\n\t\t\"x-dgc-compressed\": \"dgc\",\n\t\t\"x-dtbncx+xml\": \"ncx\",\n\t\t\"x-dtbook+xml\": \"dtb\",\n\t\t\"x-dtbresource+xml\": \"res\",\n\t\t\"x-eva\": \"eva\",\n\t\t\"x-font-bdf\": \"bdf\",\n\t\t\"x-font-ghostscript\": \"gsf\",\n\t\t\"x-font-linux-psf\": \"psf\",\n\t\t\"x-font-otf\": \"otf\",\n\t\t\"x-font-pcf\": \"pcf\",\n\t\t\"x-font-snf\": \"snf\",\n\t\t\"x-font-ttf\": [\"ttf\", \"ttc\"],\n\t\t\"x-font-type1\": [\"pfa\", \"pfb\", \"pfm\", \"afm\"],\n\t\t\"x-font-woff\": \"woff\",\n\t\t\"x-freearc\": \"arc\",\n\t\t\"x-gca-compressed\": \"gca\",\n\t\t\"x-glulx\": \"ulx\",\n\t\t\"x-gramps-xml\": \"gramps\",\n\t\t\"x-install-instructions\": \"install\",\n\t\t\"x-lzh-compressed\": [\"lzh\", \"lha\"],\n\t\t\"x-mie\": \"mie\",\n\t\t\"x-mobipocket-ebook\": [\"prc\", \"mobi\"],\n\t\t\"x-ms-application\": \"application\",\n\t\t\"x-ms-shortcut\": \"lnk\",\n\t\t\"x-ms-xbap\": \"xbap\",\n\t\t\"x-msbinder\": \"obd\",\n\t\t\"x-mscardfile\": \"crd\",\n\t\t\"x-msclip\": \"clp\",\n\t\t\"x-msdownload\": [\"exe\", \"dll\", \"com\", \"bat\", \"msi\"],\n\t\t\"x-msmediaview\": [\"mvb\", \"m13\", \"m14\"],\n\t\t\"x-msmetafile\": [\"wmf\", \"wmz\", \"emf\", \"emz\"],\n\t\t\"x-msmoney\": \"mny\",\n\t\t\"x-mspublisher\": \"pub\",\n\t\t\"x-msschedule\": \"scd\",\n\t\t\"x-msterminal\": \"trm\",\n\t\t\"x-mswrite\": \"wri\",\n\t\t\"x-nzb\": \"nzb\",\n\t\t\"x-pkcs12\": [\"p12\", \"pfx\"],\n\t\t\"x-pkcs7-certificates\": [\"p7b\", \"spc\"],\n\t\t\"x-research-info-systems\": \"ris\",\n\t\t\"x-silverlight-app\": \"xap\",\n\t\t\"x-sql\": \"sql\",\n\t\t\"x-stuffitx\": \"sitx\",\n\t\t\"x-subrip\": \"srt\",\n\t\t\"x-t3vm-image\": \"t3\",\n\t\t\"x-tads\": \"gam\",\n\t\t\"x-tex\": \"tex\",\n\t\t\"x-tex-tfm\": \"tfm\",\n\t\t\"x-tgif\": \"obj\",\n\t\t\"x-xliff+xml\": \"xlf\",\n\t\t\"x-xz\": \"xz\",\n\t\t\"x-zmachine\": [\"z1\", \"z2\", \"z3\", \"z4\", \"z5\", \"z6\", \"z7\", \"z8\"],\n\t\t\"xaml+xml\": \"xaml\",\n\t\t\"xcap-diff+xml\": \"xdf\",\n\t\t\"xenc+xml\": \"xenc\",\n\t\t\"xml-dtd\": \"dtd\",\n\t\t\"xop+xml\": \"xop\",\n\t\t\"xproc+xml\": \"xpl\",\n\t\t\"xslt+xml\": \"xslt\",\n\t\t\"xv+xml\": [\"mxml\", \"xhvml\", \"xvml\", \"xvm\"],\n\t\t\"yang\": \"yang\",\n\t\t\"yin+xml\": \"yin\",\n\t\t\"envoy\": \"evy\",\n\t\t\"fractals\": \"fif\",\n\t\t\"internet-property-stream\": \"acx\",\n\t\t\"olescript\": \"axs\",\n\t\t\"vnd.ms-outlook\": \"msg\",\n\t\t\"vnd.ms-pkicertstore\": \"sst\",\n\t\t\"x-compress\": \"z\",\n\t\t\"x-compressed\": \"tgz\",\n\t\t\"x-gzip\": \"gz\",\n\t\t\"x-perfmon\": [\"pma\", \"pmc\", \"pml\", \"pmr\", \"pmw\"],\n\t\t\"x-pkcs7-mime\": [\"p7c\", \"p7m\"],\n\t\t\"ynd.ms-pkipko\": \"pko\"\n\t},\n\t\"audio\": {\n\t\t\"amr\": \"amr\",\n\t\t\"amr-wb\": \"awb\",\n\t\t\"annodex\": \"axa\",\n\t\t\"basic\": [\"au\", \"snd\"],\n\t\t\"flac\": \"flac\",\n\t\t\"midi\": [\"mid\", \"midi\", \"kar\", \"rmi\"],\n\t\t\"mpeg\": [\"mpga\", \"mpega\", \"mp2\", \"mp3\", \"m4a\", \"mp2a\", \"m2a\", \"m3a\"],\n\t\t\"mpegurl\": \"m3u\",\n\t\t\"ogg\": [\"oga\", \"ogg\", \"spx\"],\n\t\t\"prs.sid\": \"sid\",\n\t\t\"x-aiff\": [\"aif\", \"aiff\", \"aifc\"],\n\t\t\"x-gsm\": \"gsm\",\n\t\t\"x-ms-wma\": \"wma\",\n\t\t\"x-ms-wax\": \"wax\",\n\t\t\"x-pn-realaudio\": \"ram\",\n\t\t\"x-realaudio\": \"ra\",\n\t\t\"x-sd2\": \"sd2\",\n\t\t\"x-wav\": \"wav\",\n\t\t\"adpcm\": \"adp\",\n\t\t\"mp4\": \"mp4a\",\n\t\t\"s3m\": \"s3m\",\n\t\t\"silk\": \"sil\",\n\t\t\"vnd.dece.audio\": [\"uva\", \"uvva\"],\n\t\t\"vnd.digital-winds\": \"eol\",\n\t\t\"vnd.dra\": \"dra\",\n\t\t\"vnd.dts\": \"dts\",\n\t\t\"vnd.dts.hd\": \"dtshd\",\n\t\t\"vnd.lucent.voice\": \"lvp\",\n\t\t\"vnd.ms-playready.media.pya\": \"pya\",\n\t\t\"vnd.nuera.ecelp4800\": \"ecelp4800\",\n\t\t\"vnd.nuera.ecelp7470\": \"ecelp7470\",\n\t\t\"vnd.nuera.ecelp9600\": \"ecelp9600\",\n\t\t\"vnd.rip\": \"rip\",\n\t\t\"webm\": \"weba\",\n\t\t\"x-aac\": \"aac\",\n\t\t\"x-caf\": \"caf\",\n\t\t\"x-matroska\": \"mka\",\n\t\t\"x-pn-realaudio-plugin\": \"rmp\",\n\t\t\"xm\": \"xm\",\n\t\t\"mid\": [\"mid\", \"rmi\"]\n\t},\n\t\"chemical\": {\n\t\t\"x-alchemy\": \"alc\",\n\t\t\"x-cache\": [\"cac\", \"cache\"],\n\t\t\"x-cache-csf\": \"csf\",\n\t\t\"x-cactvs-binary\": [\"cbin\", \"cascii\", \"ctab\"],\n\t\t\"x-cdx\": \"cdx\",\n\t\t\"x-chem3d\": \"c3d\",\n\t\t\"x-cif\": \"cif\",\n\t\t\"x-cmdf\": \"cmdf\",\n\t\t\"x-cml\": \"cml\",\n\t\t\"x-compass\": \"cpa\",\n\t\t\"x-crossfire\": \"bsd\",\n\t\t\"x-csml\": [\"csml\", \"csm\"],\n\t\t\"x-ctx\": \"ctx\",\n\t\t\"x-cxf\": [\"cxf\", \"cef\"],\n\t\t\"x-embl-dl-nucleotide\": [\"emb\", \"embl\"],\n\t\t\"x-gamess-input\": [\"inp\", \"gam\", \"gamin\"],\n\t\t\"x-gaussian-checkpoint\": [\"fch\", \"fchk\"],\n\t\t\"x-gaussian-cube\": \"cub\",\n\t\t\"x-gaussian-input\": [\"gau\", \"gjc\", \"gjf\"],\n\t\t\"x-gaussian-log\": \"gal\",\n\t\t\"x-gcg8-sequence\": \"gcg\",\n\t\t\"x-genbank\": \"gen\",\n\t\t\"x-hin\": \"hin\",\n\t\t\"x-isostar\": [\"istr\", \"ist\"],\n\t\t\"x-jcamp-dx\": [\"jdx\", \"dx\"],\n\t\t\"x-kinemage\": \"kin\",\n\t\t\"x-macmolecule\": \"mcm\",\n\t\t\"x-macromodel-input\": [\"mmd\", \"mmod\"],\n\t\t\"x-mdl-molfile\": \"mol\",\n\t\t\"x-mdl-rdfile\": \"rd\",\n\t\t\"x-mdl-rxnfile\": \"rxn\",\n\t\t\"x-mdl-sdfile\": [\"sd\", \"sdf\"],\n\t\t\"x-mdl-tgf\": \"tgf\",\n\t\t\"x-mmcif\": \"mcif\",\n\t\t\"x-mol2\": \"mol2\",\n\t\t\"x-molconn-Z\": \"b\",\n\t\t\"x-mopac-graph\": \"gpt\",\n\t\t\"x-mopac-input\": [\"mop\", \"mopcrt\", \"mpc\", \"zmt\"],\n\t\t\"x-mopac-out\": \"moo\",\n\t\t\"x-ncbi-asn1\": \"asn\",\n\t\t\"x-ncbi-asn1-ascii\": [\"prt\", \"ent\"],\n\t\t\"x-ncbi-asn1-binary\": [\"val\", \"aso\"],\n\t\t\"x-pdb\": [\"pdb\", \"ent\"],\n\t\t\"x-rosdal\": \"ros\",\n\t\t\"x-swissprot\": \"sw\",\n\t\t\"x-vamas-iso14976\": \"vms\",\n\t\t\"x-vmd\": \"vmd\",\n\t\t\"x-xtel\": \"xtel\",\n\t\t\"x-xyz\": \"xyz\"\n\t},\n\t\"image\": {\n\t\t\"gif\": \"gif\",\n\t\t\"ief\": \"ief\",\n\t\t\"jpeg\": [\"jpeg\", \"jpg\", \"jpe\"],\n\t\t\"pcx\": \"pcx\",\n\t\t\"png\": \"png\",\n\t\t\"svg+xml\": [\"svg\", \"svgz\"],\n\t\t\"tiff\": [\"tiff\", \"tif\"],\n\t\t\"vnd.djvu\": [\"djvu\", \"djv\"],\n\t\t\"vnd.wap.wbmp\": \"wbmp\",\n\t\t\"x-canon-cr2\": \"cr2\",\n\t\t\"x-canon-crw\": \"crw\",\n\t\t\"x-cmu-raster\": \"ras\",\n\t\t\"x-coreldraw\": \"cdr\",\n\t\t\"x-coreldrawpattern\": \"pat\",\n\t\t\"x-coreldrawtemplate\": \"cdt\",\n\t\t\"x-corelphotopaint\": \"cpt\",\n\t\t\"x-epson-erf\": \"erf\",\n\t\t\"x-icon\": \"ico\",\n\t\t\"x-jg\": \"art\",\n\t\t\"x-jng\": \"jng\",\n\t\t\"x-nikon-nef\": \"nef\",\n\t\t\"x-olympus-orf\": \"orf\",\n\t\t\"x-photoshop\": \"psd\",\n\t\t\"x-portable-anymap\": \"pnm\",\n\t\t\"x-portable-bitmap\": \"pbm\",\n\t\t\"x-portable-graymap\": \"pgm\",\n\t\t\"x-portable-pixmap\": \"ppm\",\n\t\t\"x-rgb\": \"rgb\",\n\t\t\"x-xbitmap\": \"xbm\",\n\t\t\"x-xpixmap\": \"xpm\",\n\t\t\"x-xwindowdump\": \"xwd\",\n\t\t\"bmp\": \"bmp\",\n\t\t\"cgm\": \"cgm\",\n\t\t\"g3fax\": \"g3\",\n\t\t\"ktx\": \"ktx\",\n\t\t\"prs.btif\": \"btif\",\n\t\t\"sgi\": \"sgi\",\n\t\t\"vnd.dece.graphic\": [\"uvi\", \"uvvi\", \"uvg\", \"uvvg\"],\n\t\t\"vnd.dwg\": \"dwg\",\n\t\t\"vnd.dxf\": \"dxf\",\n\t\t\"vnd.fastbidsheet\": \"fbs\",\n\t\t\"vnd.fpx\": \"fpx\",\n\t\t\"vnd.fst\": \"fst\",\n\t\t\"vnd.fujixerox.edmics-mmr\": \"mmr\",\n\t\t\"vnd.fujixerox.edmics-rlc\": \"rlc\",\n\t\t\"vnd.ms-modi\": \"mdi\",\n\t\t\"vnd.ms-photo\": \"wdp\",\n\t\t\"vnd.net-fpx\": \"npx\",\n\t\t\"vnd.xiff\": \"xif\",\n\t\t\"webp\": \"webp\",\n\t\t\"x-3ds\": \"3ds\",\n\t\t\"x-cmx\": \"cmx\",\n\t\t\"x-freehand\": [\"fh\", \"fhc\", \"fh4\", \"fh5\", \"fh7\"],\n\t\t\"x-pict\": [\"pic\", \"pct\"],\n\t\t\"x-tga\": \"tga\",\n\t\t\"cis-cod\": \"cod\",\n\t\t\"pipeg\": \"jfif\"\n\t},\n\t\"message\": {\n\t\t\"rfc822\": [\"eml\", \"mime\", \"mht\", \"mhtml\", \"nws\"]\n\t},\n\t\"model\": {\n\t\t\"iges\": [\"igs\", \"iges\"],\n\t\t\"mesh\": [\"msh\", \"mesh\", \"silo\"],\n\t\t\"vrml\": [\"wrl\", \"vrml\"],\n\t\t\"x3d+vrml\": [\"x3dv\", \"x3dvz\"],\n\t\t\"x3d+xml\": [\"x3d\", \"x3dz\"],\n\t\t\"x3d+binary\": [\"x3db\", \"x3dbz\"],\n\t\t\"vnd.collada+xml\": \"dae\",\n\t\t\"vnd.dwf\": \"dwf\",\n\t\t\"vnd.gdl\": \"gdl\",\n\t\t\"vnd.gtw\": \"gtw\",\n\t\t\"vnd.mts\": \"mts\",\n\t\t\"vnd.vtu\": \"vtu\"\n\t},\n\t\"text\": {\n\t\t\"cache-manifest\": [\"manifest\", \"appcache\"],\n\t\t\"calendar\": [\"ics\", \"icz\", \"ifb\"],\n\t\t\"css\": \"css\",\n\t\t\"csv\": \"csv\",\n\t\t\"h323\": \"323\",\n\t\t\"html\": [\"html\", \"htm\", \"shtml\", \"stm\"],\n\t\t\"iuls\": \"uls\",\n\t\t\"mathml\": \"mml\",\n\t\t\"plain\": [\"txt\", \"text\", \"brf\", \"conf\", \"def\", \"list\", \"log\", \"in\", \"bas\"],\n\t\t\"richtext\": \"rtx\",\n\t\t\"scriptlet\": [\"sct\", \"wsc\"],\n\t\t\"texmacs\": [\"tm\", \"ts\"],\n\t\t\"tab-separated-values\": \"tsv\",\n\t\t\"vnd.sun.j2me.app-descriptor\": \"jad\",\n\t\t\"vnd.wap.wml\": \"wml\",\n\t\t\"vnd.wap.wmlscript\": \"wmls\",\n\t\t\"x-bibtex\": \"bib\",\n\t\t\"x-boo\": \"boo\",\n\t\t\"x-c++hdr\": [\"h++\", \"hpp\", \"hxx\", \"hh\"],\n\t\t\"x-c++src\": [\"c++\", \"cpp\", \"cxx\", \"cc\"],\n\t\t\"x-component\": \"htc\",\n\t\t\"x-dsrc\": \"d\",\n\t\t\"x-diff\": [\"diff\", \"patch\"],\n\t\t\"x-haskell\": \"hs\",\n\t\t\"x-java\": \"java\",\n\t\t\"x-literate-haskell\": \"lhs\",\n\t\t\"x-moc\": \"moc\",\n\t\t\"x-pascal\": [\"p\", \"pas\"],\n\t\t\"x-pcs-gcd\": \"gcd\",\n\t\t\"x-perl\": [\"pl\", \"pm\"],\n\t\t\"x-python\": \"py\",\n\t\t\"x-scala\": \"scala\",\n\t\t\"x-setext\": \"etx\",\n\t\t\"x-tcl\": [\"tcl\", \"tk\"],\n\t\t\"x-tex\": [\"tex\", \"ltx\", \"sty\", \"cls\"],\n\t\t\"x-vcalendar\": \"vcs\",\n\t\t\"x-vcard\": \"vcf\",\n\t\t\"n3\": \"n3\",\n\t\t\"prs.lines.tag\": \"dsc\",\n\t\t\"sgml\": [\"sgml\", \"sgm\"],\n\t\t\"troff\": [\"t\", \"tr\", \"roff\", \"man\", \"me\", \"ms\"],\n\t\t\"turtle\": \"ttl\",\n\t\t\"uri-list\": [\"uri\", \"uris\", \"urls\"],\n\t\t\"vcard\": \"vcard\",\n\t\t\"vnd.curl\": \"curl\",\n\t\t\"vnd.curl.dcurl\": \"dcurl\",\n\t\t\"vnd.curl.scurl\": \"scurl\",\n\t\t\"vnd.curl.mcurl\": \"mcurl\",\n\t\t\"vnd.dvb.subtitle\": \"sub\",\n\t\t\"vnd.fly\": \"fly\",\n\t\t\"vnd.fmi.flexstor\": \"flx\",\n\t\t\"vnd.graphviz\": \"gv\",\n\t\t\"vnd.in3d.3dml\": \"3dml\",\n\t\t\"vnd.in3d.spot\": \"spot\",\n\t\t\"x-asm\": [\"s\", \"asm\"],\n\t\t\"x-c\": [\"c\", \"cc\", \"cxx\", \"cpp\", \"h\", \"hh\", \"dic\"],\n\t\t\"x-fortran\": [\"f\", \"for\", \"f77\", \"f90\"],\n\t\t\"x-opml\": \"opml\",\n\t\t\"x-nfo\": \"nfo\",\n\t\t\"x-sfv\": \"sfv\",\n\t\t\"x-uuencode\": \"uu\",\n\t\t\"webviewhtml\": \"htt\"\n\t},\n\t\"video\": {\n\t\t\"avif\": \".avif\",\n\t\t\"3gpp\": \"3gp\",\n\t\t\"annodex\": \"axv\",\n\t\t\"dl\": \"dl\",\n\t\t\"dv\": [\"dif\", \"dv\"],\n\t\t\"fli\": \"fli\",\n\t\t\"gl\": \"gl\",\n\t\t\"mpeg\": [\"mpeg\", \"mpg\", \"mpe\", \"m1v\", \"m2v\", \"mp2\", \"mpa\", \"mpv2\"],\n\t\t\"mp4\": [\"mp4\", \"mp4v\", \"mpg4\"],\n\t\t\"quicktime\": [\"qt\", \"mov\"],\n\t\t\"ogg\": \"ogv\",\n\t\t\"vnd.mpegurl\": [\"mxu\", \"m4u\"],\n\t\t\"x-flv\": \"flv\",\n\t\t\"x-la-asf\": [\"lsf\", \"lsx\"],\n\t\t\"x-mng\": \"mng\",\n\t\t\"x-ms-asf\": [\"asf\", \"asx\", \"asr\"],\n\t\t\"x-ms-wm\": \"wm\",\n\t\t\"x-ms-wmv\": \"wmv\",\n\t\t\"x-ms-wmx\": \"wmx\",\n\t\t\"x-ms-wvx\": \"wvx\",\n\t\t\"x-msvideo\": \"avi\",\n\t\t\"x-sgi-movie\": \"movie\",\n\t\t\"x-matroska\": [\"mpv\", \"mkv\", \"mk3d\", \"mks\"],\n\t\t\"3gpp2\": \"3g2\",\n\t\t\"h261\": \"h261\",\n\t\t\"h263\": \"h263\",\n\t\t\"h264\": \"h264\",\n\t\t\"jpeg\": \"jpgv\",\n\t\t\"jpm\": [\"jpm\", \"jpgm\"],\n\t\t\"mj2\": [\"mj2\", \"mjp2\"],\n\t\t\"vnd.dece.hd\": [\"uvh\", \"uvvh\"],\n\t\t\"vnd.dece.mobile\": [\"uvm\", \"uvvm\"],\n\t\t\"vnd.dece.pd\": [\"uvp\", \"uvvp\"],\n\t\t\"vnd.dece.sd\": [\"uvs\", \"uvvs\"],\n\t\t\"vnd.dece.video\": [\"uvv\", \"uvvv\"],\n\t\t\"vnd.dvb.file\": \"dvb\",\n\t\t\"vnd.fvt\": \"fvt\",\n\t\t\"vnd.ms-playready.media.pyv\": \"pyv\",\n\t\t\"vnd.uvvu.mp4\": [\"uvu\", \"uvvu\"],\n\t\t\"vnd.vivo\": \"viv\",\n\t\t\"webm\": \"webm\",\n\t\t\"x-f4v\": \"f4v\",\n\t\t\"x-m4v\": \"m4v\",\n\t\t\"x-ms-vob\": \"vob\",\n\t\t\"x-smv\": \"smv\"\n\t},\n\t\"x-conference\": {\n\t\t\"x-cooltalk\": \"ice\"\n\t},\n\t\"x-world\": {\n\t\t\"x-vrml\": [\"vrm\", \"vrml\", \"wrl\", \"flr\", \"wrz\", \"xaf\", \"xof\"]\n\t}\n};\n\nconst mimeTypes = (() => {\n\tconst mimeTypes = {};\n\tfor (const type in table) {\n\t\t// eslint-disable-next-line no-prototype-builtins\n\t\tif (table.hasOwnProperty(type)) {\n\t\t\tfor (const subtype in table[type]) {\n\t\t\t\t// eslint-disable-next-line no-prototype-builtins\n\t\t\t\tif (table[type].hasOwnProperty(subtype)) {\n\t\t\t\t\tconst value = table[type][subtype];\n\t\t\t\t\tif (typeof value == \"string\") {\n\t\t\t\t\t\tmimeTypes[value] = type + \"/\" + subtype;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let indexMimeType = 0; indexMimeType < value.length; indexMimeType++) {\n\t\t\t\t\t\t\tmimeTypes[value[indexMimeType]] = type + \"/\" + subtype;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn mimeTypes;\n})();\n\nexport {\n\tmimeTypes,\n\tgetMimeType\n};\n\nfunction getMimeType(filename) {\n\treturn filename && mimeTypes[filename.split(\".\").pop().toLowerCase()] || getDefaultMimeType();\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst table = [];\nfor (let i = 0; i < 256; i++) {\n\tlet t = i;\n\tfor (let j = 0; j < 8; j++) {\n\t\tif (t & 1) {\n\t\t\tt = (t >>> 1) ^ 0xEDB88320;\n\t\t} else {\n\t\t\tt = t >>> 1;\n\t\t}\n\t}\n\ttable[i] = t;\n}\n\nclass Crc32 {\n\n\tconstructor(crc) {\n\t\tthis.crc = crc || -1;\n\t}\n\n\tappend(data) {\n\t\tlet crc = this.crc | 0;\n\t\tfor (let offset = 0, length = data.length | 0; offset < length; offset++) {\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ data[offset]) & 0xFF];\n\t\t}\n\t\tthis.crc = crc;\n\t}\n\n\tget() {\n\t\treturn ~this.crc;\n\t}\n}\n\nexport {\n\tCrc32\n};","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TransformStream */\n\nimport { Crc32 } from \"./codecs/crc32.js\";\n\nclass Crc32Stream extends TransformStream {\n\n\tconstructor() {\n\t\tconst crc32 = new Crc32();\n\t\tsuper({\n\t\t\ttransform(chunk) {\n\t\t\t\tcrc32.append(chunk);\n\t\t\t},\n\t\t\tflush(controller) {\n\t\t\t\tconst value = new Uint8Array(4);\n\t\t\t\tconst dataView = new DataView(value.buffer);\n\t\t\t\tdataView.setUint32(0, crc32.get());\n\t\t\t\tcontroller.enqueue(value);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport {\n\tCrc32Stream\n};","// Derived from https://github.com/xqdoo00o/jszip/blob/master/lib/sjcl.js and https://github.com/bitwiseshiftleft/sjcl\n\n// deno-lint-ignore-file no-this-alias\n\n/*\n * SJCL is open. You can use, modify and redistribute it under a BSD\n * license or under the GNU GPL, version 2.0.\n */\n\n/** @fileOverview Javascript cryptography implementation.\n *\n * Crush to remove comments, shorten variable names and\n * generally reduce transmission size.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */\n\n/** @fileOverview Arrays of bits, encoded as arrays of Numbers.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bits, encoded as arrays of Numbers.\n * @namespace\n * @description\n * <p>\n * These objects are the currency accepted by SJCL's crypto functions.\n * </p>\n *\n * <p>\n * Most of our crypto primitives operate on arrays of 4-byte words internally,\n * but many of them can take arguments that are not a multiple of 4 bytes.\n * This library encodes arrays of bits (whose size need not be a multiple of 8\n * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an\n * array of words, 32 bits at a time.  Since the words are double-precision\n * floating point numbers, they fit some extra data.  We use this (in a private,\n * possibly-changing manner) to encode the number of bits actually  present\n * in the last word of the array.\n * </p>\n *\n * <p>\n * Because bitwise ops clear this out-of-band data, these arrays can be passed\n * to ciphers like AES which want arrays of words.\n * </p>\n */\nconst bitArray = {\n\t/**\n\t * Concatenate two bit arrays.\n\t * @param {bitArray} a1 The first array.\n\t * @param {bitArray} a2 The second array.\n\t * @return {bitArray} The concatenation of a1 and a2.\n\t */\n\tconcat(a1, a2) {\n\t\tif (a1.length === 0 || a2.length === 0) {\n\t\t\treturn a1.concat(a2);\n\t\t}\n\n\t\tconst last = a1[a1.length - 1], shift = bitArray.getPartial(last);\n\t\tif (shift === 32) {\n\t\t\treturn a1.concat(a2);\n\t\t} else {\n\t\t\treturn bitArray._shiftRight(a2, shift, last | 0, a1.slice(0, a1.length - 1));\n\t\t}\n\t},\n\n\t/**\n\t * Find the length of an array of bits.\n\t * @param {bitArray} a The array.\n\t * @return {Number} The length of a, in bits.\n\t */\n\tbitLength(a) {\n\t\tconst l = a.length;\n\t\tif (l === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst x = a[l - 1];\n\t\treturn (l - 1) * 32 + bitArray.getPartial(x);\n\t},\n\n\t/**\n\t * Truncate an array.\n\t * @param {bitArray} a The array.\n\t * @param {Number} len The length to truncate to, in bits.\n\t * @return {bitArray} A new array, truncated to len bits.\n\t */\n\tclamp(a, len) {\n\t\tif (a.length * 32 < len) {\n\t\t\treturn a;\n\t\t}\n\t\ta = a.slice(0, Math.ceil(len / 32));\n\t\tconst l = a.length;\n\t\tlen = len & 31;\n\t\tif (l > 0 && len) {\n\t\t\ta[l - 1] = bitArray.partial(len, a[l - 1] & 0x80000000 >> (len - 1), 1);\n\t\t}\n\t\treturn a;\n\t},\n\n\t/**\n\t * Make a partial word for a bit array.\n\t * @param {Number} len The number of bits in the word.\n\t * @param {Number} x The bits.\n\t * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.\n\t * @return {Number} The partial word.\n\t */\n\tpartial(len, x, _end) {\n\t\tif (len === 32) {\n\t\t\treturn x;\n\t\t}\n\t\treturn (_end ? x | 0 : x << (32 - len)) + len * 0x10000000000;\n\t},\n\n\t/**\n\t * Get the number of bits used by a partial word.\n\t * @param {Number} x The partial word.\n\t * @return {Number} The number of bits used by the partial word.\n\t */\n\tgetPartial(x) {\n\t\treturn Math.round(x / 0x10000000000) || 32;\n\t},\n\n\t/** Shift an array right.\n\t * @param {bitArray} a The array to shift.\n\t * @param {Number} shift The number of bits to shift.\n\t * @param {Number} [carry=0] A byte to carry in\n\t * @param {bitArray} [out=[]] An array to prepend to the output.\n\t * @private\n\t */\n\t_shiftRight(a, shift, carry, out) {\n\t\tif (out === undefined) {\n\t\t\tout = [];\n\t\t}\n\n\t\tfor (; shift >= 32; shift -= 32) {\n\t\t\tout.push(carry);\n\t\t\tcarry = 0;\n\t\t}\n\t\tif (shift === 0) {\n\t\t\treturn out.concat(a);\n\t\t}\n\n\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\tout.push(carry | a[i] >>> shift);\n\t\t\tcarry = a[i] << (32 - shift);\n\t\t}\n\t\tconst last2 = a.length ? a[a.length - 1] : 0;\n\t\tconst shift2 = bitArray.getPartial(last2);\n\t\tout.push(bitArray.partial(shift + shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(), 1));\n\t\treturn out;\n\t}\n};\n\n/** @fileOverview Bit array codec implementations.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/**\n * Arrays of bytes\n * @namespace\n */\nconst codec = {\n\tbytes: {\n\t\t/** Convert from a bitArray to an array of bytes. */\n\t\tfromBits(arr) {\n\t\t\tconst bl = bitArray.bitLength(arr);\n\t\t\tconst byteLength = bl / 8;\n\t\t\tconst out = new Uint8Array(byteLength);\n\t\t\tlet tmp;\n\t\t\tfor (let i = 0; i < byteLength; i++) {\n\t\t\t\tif ((i & 3) === 0) {\n\t\t\t\t\ttmp = arr[i / 4];\n\t\t\t\t}\n\t\t\t\tout[i] = tmp >>> 24;\n\t\t\t\ttmp <<= 8;\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\t\t/** Convert from an array of bytes to a bitArray. */\n\t\ttoBits(bytes) {\n\t\t\tconst out = [];\n\t\t\tlet i;\n\t\t\tlet tmp = 0;\n\t\t\tfor (i = 0; i < bytes.length; i++) {\n\t\t\t\ttmp = tmp << 8 | bytes[i];\n\t\t\t\tif ((i & 3) === 3) {\n\t\t\t\t\tout.push(tmp);\n\t\t\t\t\ttmp = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i & 3) {\n\t\t\t\tout.push(bitArray.partial(8 * (i & 3), tmp));\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t}\n};\n\nconst hash = {};\n\n/**\n * Context for a SHA-1 operation in progress.\n * @constructor\n */\nhash.sha1 = class {\n\tconstructor(hash) {\n\t\tconst sha1 = this;\n\t\t/**\n\t\t * The hash's block size, in bits.\n\t\t * @constant\n\t\t */\n\t\tsha1.blockSize = 512;\n\t\t/**\n\t\t * The SHA-1 initialization vector.\n\t\t * @private\n\t\t */\n\t\tsha1._init = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];\n\t\t/**\n\t\t * The SHA-1 hash key.\n\t\t * @private\n\t\t */\n\t\tsha1._key = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];\n\t\tif (hash) {\n\t\t\tsha1._h = hash._h.slice(0);\n\t\t\tsha1._buffer = hash._buffer.slice(0);\n\t\t\tsha1._length = hash._length;\n\t\t} else {\n\t\t\tsha1.reset();\n\t\t}\n\t}\n\n\t/**\n\t * Reset the hash state.\n\t * @return this\n\t */\n\treset() {\n\t\tconst sha1 = this;\n\t\tsha1._h = sha1._init.slice(0);\n\t\tsha1._buffer = [];\n\t\tsha1._length = 0;\n\t\treturn sha1;\n\t}\n\n\t/**\n\t * Input several words to the hash.\n\t * @param {bitArray|String} data the data to hash.\n\t * @return this\n\t */\n\tupdate(data) {\n\t\tconst sha1 = this;\n\t\tif (typeof data === \"string\") {\n\t\t\tdata = codec.utf8String.toBits(data);\n\t\t}\n\t\tconst b = sha1._buffer = bitArray.concat(sha1._buffer, data);\n\t\tconst ol = sha1._length;\n\t\tconst nl = sha1._length = ol + bitArray.bitLength(data);\n\t\tif (nl > 9007199254740991) {\n\t\t\tthrow new Error(\"Cannot hash more than 2^53 - 1 bits\");\n\t\t}\n\t\tconst c = new Uint32Array(b);\n\t\tlet j = 0;\n\t\tfor (let i = sha1.blockSize + ol - ((sha1.blockSize + ol) & (sha1.blockSize - 1)); i <= nl;\n\t\t\ti += sha1.blockSize) {\n\t\t\tsha1._block(c.subarray(16 * j, 16 * (j + 1)));\n\t\t\tj += 1;\n\t\t}\n\t\tb.splice(0, 16 * j);\n\t\treturn sha1;\n\t}\n\n\t/**\n\t * Complete hashing and output the hash value.\n\t * @return {bitArray} The hash value, an array of 5 big-endian words. TODO\n\t */\n\tfinalize() {\n\t\tconst sha1 = this;\n\t\tlet b = sha1._buffer;\n\t\tconst h = sha1._h;\n\n\t\t// Round out and push the buffer\n\t\tb = bitArray.concat(b, [bitArray.partial(1, 1)]);\n\t\t// Round out the buffer to a multiple of 16 words, less the 2 length words.\n\t\tfor (let i = b.length + 2; i & 15; i++) {\n\t\t\tb.push(0);\n\t\t}\n\n\t\t// append the length\n\t\tb.push(Math.floor(sha1._length / 0x100000000));\n\t\tb.push(sha1._length | 0);\n\n\t\twhile (b.length) {\n\t\t\tsha1._block(b.splice(0, 16));\n\t\t}\n\n\t\tsha1.reset();\n\t\treturn h;\n\t}\n\n\t/**\n\t * The SHA-1 logical functions f(0), f(1), ..., f(79).\n\t * @private\n\t */\n\t_f(t, b, c, d) {\n\t\tif (t <= 19) {\n\t\t\treturn (b & c) | (~b & d);\n\t\t} else if (t <= 39) {\n\t\t\treturn b ^ c ^ d;\n\t\t} else if (t <= 59) {\n\t\t\treturn (b & c) | (b & d) | (c & d);\n\t\t} else if (t <= 79) {\n\t\t\treturn b ^ c ^ d;\n\t\t}\n\t}\n\n\t/**\n\t * Circular left-shift operator.\n\t * @private\n\t */\n\t_S(n, x) {\n\t\treturn (x << n) | (x >>> 32 - n);\n\t}\n\n\t/**\n\t * Perform one cycle of SHA-1.\n\t * @param {Uint32Array|bitArray} words one block of words.\n\t * @private\n\t */\n\t_block(words) {\n\t\tconst sha1 = this;\n\t\tconst h = sha1._h;\n\t\t// When words is passed to _block, it has 16 elements. SHA1 _block\n\t\t// function extends words with new elements (at the end there are 80 elements). \n\t\t// The problem is that if we use Uint32Array instead of Array, \n\t\t// the length of Uint32Array cannot be changed. Thus, we replace words with a \n\t\t// normal Array here.\n\t\tconst w = Array(80); // do not use Uint32Array here as the instantiation is slower\n\t\tfor (let j = 0; j < 16; j++) {\n\t\t\tw[j] = words[j];\n\t\t}\n\n\t\tlet a = h[0];\n\t\tlet b = h[1];\n\t\tlet c = h[2];\n\t\tlet d = h[3];\n\t\tlet e = h[4];\n\n\t\tfor (let t = 0; t <= 79; t++) {\n\t\t\tif (t >= 16) {\n\t\t\t\tw[t] = sha1._S(1, w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16]);\n\t\t\t}\n\t\t\tconst tmp = (sha1._S(5, a) + sha1._f(t, b, c, d) + e + w[t] +\n\t\t\t\tsha1._key[Math.floor(t / 20)]) | 0;\n\t\t\te = d;\n\t\t\td = c;\n\t\t\tc = sha1._S(30, b);\n\t\t\tb = a;\n\t\t\ta = tmp;\n\t\t}\n\n\t\th[0] = (h[0] + a) | 0;\n\t\th[1] = (h[1] + b) | 0;\n\t\th[2] = (h[2] + c) | 0;\n\t\th[3] = (h[3] + d) | 0;\n\t\th[4] = (h[4] + e) | 0;\n\t}\n};\n\n/** @fileOverview Low-level AES implementation.\n *\n * This file contains a low-level implementation of AES, optimized for\n * size and for efficiency on several browsers.  It is based on\n * OpenSSL's aes_core.c, a public-domain implementation by Vincent\n * Rijmen, Antoon Bosselaers and Paulo Barreto.\n *\n * An older version of this implementation is available in the public\n * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,\n * Stanford University 2008-2010 and BSD-licensed for liability\n * reasons.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\nconst cipher = {};\n\n/**\n * Schedule out an AES key for both encryption and decryption.  This\n * is a low-level class.  Use a cipher mode to do bulk encryption.\n *\n * @constructor\n * @param {Array} key The key as an array of 4, 6 or 8 words.\n */\ncipher.aes = class {\n\tconstructor(key) {\n\t\t/**\n\t\t * The expanded S-box and inverse S-box tables.  These will be computed\n\t\t * on the client so that we don't have to send them down the wire.\n\t\t *\n\t\t * There are two tables, _tables[0] is for encryption and\n\t\t * _tables[1] is for decryption.\n\t\t *\n\t\t * The first 4 sub-tables are the expanded S-box with MixColumns.  The\n\t\t * last (_tables[01][4]) is the S-box itself.\n\t\t *\n\t\t * @private\n\t\t */\n\t\tconst aes = this;\n\t\taes._tables = [[[], [], [], [], []], [[], [], [], [], []]];\n\n\t\tif (!aes._tables[0][0][0]) {\n\t\t\taes._precompute();\n\t\t}\n\n\t\tconst sbox = aes._tables[0][4];\n\t\tconst decTable = aes._tables[1];\n\t\tconst keyLen = key.length;\n\n\t\tlet i, encKey, decKey, rcon = 1;\n\n\t\tif (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {\n\t\t\tthrow new Error(\"invalid aes key size\");\n\t\t}\n\n\t\taes._key = [encKey = key.slice(0), decKey = []];\n\n\t\t// schedule encryption keys\n\t\tfor (i = keyLen; i < 4 * keyLen + 28; i++) {\n\t\t\tlet tmp = encKey[i - 1];\n\n\t\t\t// apply sbox\n\t\t\tif (i % keyLen === 0 || (keyLen === 8 && i % keyLen === 4)) {\n\t\t\t\ttmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];\n\n\t\t\t\t// shift rows and add rcon\n\t\t\t\tif (i % keyLen === 0) {\n\t\t\t\t\ttmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;\n\t\t\t\t\trcon = rcon << 1 ^ (rcon >> 7) * 283;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tencKey[i] = encKey[i - keyLen] ^ tmp;\n\t\t}\n\n\t\t// schedule decryption keys\n\t\tfor (let j = 0; i; j++, i--) {\n\t\t\tconst tmp = encKey[j & 3 ? i : i - 4];\n\t\t\tif (i <= 4 || j < 4) {\n\t\t\t\tdecKey[j] = tmp;\n\t\t\t} else {\n\t\t\t\tdecKey[j] = decTable[0][sbox[tmp >>> 24]] ^\n\t\t\t\t\tdecTable[1][sbox[tmp >> 16 & 255]] ^\n\t\t\t\t\tdecTable[2][sbox[tmp >> 8 & 255]] ^\n\t\t\t\t\tdecTable[3][sbox[tmp & 255]];\n\t\t\t}\n\t\t}\n\t}\n\t// public\n\t/* Something like this might appear here eventually\n\tname: \"AES\",\n\tblockSize: 4,\n\tkeySizes: [4,6,8],\n\t*/\n\n\t/**\n\t * Encrypt an array of 4 big-endian words.\n\t * @param {Array} data The plaintext.\n\t * @return {Array} The ciphertext.\n\t */\n\tencrypt(data) {\n\t\treturn this._crypt(data, 0);\n\t}\n\n\t/**\n\t * Decrypt an array of 4 big-endian words.\n\t * @param {Array} data The ciphertext.\n\t * @return {Array} The plaintext.\n\t */\n\tdecrypt(data) {\n\t\treturn this._crypt(data, 1);\n\t}\n\n\t/**\n\t * Expand the S-box tables.\n\t *\n\t * @private\n\t */\n\t_precompute() {\n\t\tconst encTable = this._tables[0];\n\t\tconst decTable = this._tables[1];\n\t\tconst sbox = encTable[4];\n\t\tconst sboxInv = decTable[4];\n\t\tconst d = [];\n\t\tconst th = [];\n\t\tlet xInv, x2, x4, x8;\n\n\t\t// Compute double and third tables\n\t\tfor (let i = 0; i < 256; i++) {\n\t\t\tth[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;\n\t\t}\n\n\t\tfor (let x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {\n\t\t\t// Compute sbox\n\t\t\tlet s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;\n\t\t\ts = s >> 8 ^ s & 255 ^ 99;\n\t\t\tsbox[x] = s;\n\t\t\tsboxInv[s] = x;\n\n\t\t\t// Compute MixColumns\n\t\t\tx8 = d[x4 = d[x2 = d[x]]];\n\t\t\tlet tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;\n\t\t\tlet tEnc = d[s] * 0x101 ^ s * 0x1010100;\n\n\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\tencTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;\n\t\t\t\tdecTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;\n\t\t\t}\n\t\t}\n\n\t\t// Compactify.  Considerable speedup on Firefox.\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tencTable[i] = encTable[i].slice(0);\n\t\t\tdecTable[i] = decTable[i].slice(0);\n\t\t}\n\t}\n\n\t/**\n\t * Encryption and decryption core.\n\t * @param {Array} input Four words to be encrypted or decrypted.\n\t * @param dir The direction, 0 for encrypt and 1 for decrypt.\n\t * @return {Array} The four encrypted or decrypted words.\n\t * @private\n\t */\n\t_crypt(input, dir) {\n\t\tif (input.length !== 4) {\n\t\t\tthrow new Error(\"invalid aes block size\");\n\t\t}\n\n\t\tconst key = this._key[dir];\n\n\t\tconst nInnerRounds = key.length / 4 - 2;\n\t\tconst out = [0, 0, 0, 0];\n\t\tconst table = this._tables[dir];\n\n\t\t// load up the tables\n\t\tconst t0 = table[0];\n\t\tconst t1 = table[1];\n\t\tconst t2 = table[2];\n\t\tconst t3 = table[3];\n\t\tconst sbox = table[4];\n\n\t\t// state variables a,b,c,d are loaded with pre-whitened data\n\t\tlet a = input[0] ^ key[0];\n\t\tlet b = input[dir ? 3 : 1] ^ key[1];\n\t\tlet c = input[2] ^ key[2];\n\t\tlet d = input[dir ? 1 : 3] ^ key[3];\n\t\tlet kIndex = 4;\n\t\tlet a2, b2, c2;\n\n\t\t// Inner rounds.  Cribbed from OpenSSL.\n\t\tfor (let i = 0; i < nInnerRounds; i++) {\n\t\t\ta2 = t0[a >>> 24] ^ t1[b >> 16 & 255] ^ t2[c >> 8 & 255] ^ t3[d & 255] ^ key[kIndex];\n\t\t\tb2 = t0[b >>> 24] ^ t1[c >> 16 & 255] ^ t2[d >> 8 & 255] ^ t3[a & 255] ^ key[kIndex + 1];\n\t\t\tc2 = t0[c >>> 24] ^ t1[d >> 16 & 255] ^ t2[a >> 8 & 255] ^ t3[b & 255] ^ key[kIndex + 2];\n\t\t\td = t0[d >>> 24] ^ t1[a >> 16 & 255] ^ t2[b >> 8 & 255] ^ t3[c & 255] ^ key[kIndex + 3];\n\t\t\tkIndex += 4;\n\t\t\ta = a2; b = b2; c = c2;\n\t\t}\n\n\t\t// Last round.\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tout[dir ? 3 & -i : i] =\n\t\t\t\tsbox[a >>> 24] << 24 ^\n\t\t\t\tsbox[b >> 16 & 255] << 16 ^\n\t\t\t\tsbox[c >> 8 & 255] << 8 ^\n\t\t\t\tsbox[d & 255] ^\n\t\t\t\tkey[kIndex++];\n\t\t\ta2 = a; a = b; b = c; c = d; d = a2;\n\t\t}\n\n\t\treturn out;\n\t}\n};\n\n/**\n * Random values\n * @namespace\n */\nconst random = {\n\t/** \n\t * Generate random words with pure js, cryptographically not as strong & safe as native implementation.\n\t * @param {TypedArray} typedArray The array to fill.\n\t * @return {TypedArray} The random values.\n\t */\n\tgetRandomValues(typedArray) {\n\t\tconst words = new Uint32Array(typedArray.buffer);\n\t\tconst r = (m_w) => {\n\t\t\tlet m_z = 0x3ade68b1;\n\t\t\tconst mask = 0xffffffff;\n\t\t\treturn function () {\n\t\t\t\tm_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t\t\t\tm_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t\t\t\tconst result = ((((m_z << 0x10) + m_w) & mask) / 0x100000000) + .5;\n\t\t\t\treturn result * (Math.random() > .5 ? 1 : -1);\n\t\t\t};\n\t\t};\n\t\tfor (let i = 0, rcache; i < typedArray.length; i += 4) {\n\t\t\tconst _r = r((rcache || Math.random()) * 0x100000000);\n\t\t\trcache = _r() * 0x3ade67b7;\n\t\t\twords[i / 4] = (_r() * 0x100000000) | 0;\n\t\t}\n\t\treturn typedArray;\n\t}\n};\n\n/** @fileOverview CTR mode implementation.\n *\n * Special thanks to Roy Nicholson for pointing out a bug in our\n * implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** Brian Gladman's CTR Mode.\n* @constructor\n* @param {Object} _prf The aes instance to generate key.\n* @param {bitArray} _iv The iv for ctr mode, it must be 128 bits.\n*/\n\nconst mode = {};\n\n/**\n * Brian Gladman's CTR Mode.\n * @namespace\n */\nmode.ctrGladman = class {\n\tconstructor(prf, iv) {\n\t\tthis._prf = prf;\n\t\tthis._initIv = iv;\n\t\tthis._iv = iv;\n\t}\n\n\treset() {\n\t\tthis._iv = this._initIv;\n\t}\n\n\t/** Input some data to calculate.\n\t * @param {bitArray} data the data to process, it must be intergral multiple of 128 bits unless it's the last.\n\t */\n\tupdate(data) {\n\t\treturn this.calculate(this._prf, data, this._iv);\n\t}\n\n\tincWord(word) {\n\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tlet b1 = (word >> 16) & 0xff;\n\t\t\tlet b2 = (word >> 8) & 0xff;\n\t\t\tlet b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) { // overflow b1   \n\t\t\t\tb1 = 0;\n\t\t\t\tif (b2 === 0xff) {\n\t\t\t\t\tb2 = 0;\n\t\t\t\t\tif (b3 === 0xff) {\n\t\t\t\t\t\tb3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t++b3;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t++b2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t} else {\n\t\t\tword += (0x01 << 24);\n\t\t}\n\t\treturn word;\n\t}\n\n\tincCounter(counter) {\n\t\tif ((counter[0] = this.incWord(counter[0])) === 0) {\n\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\tcounter[1] = this.incWord(counter[1]);\n\t\t}\n\t}\n\n\tcalculate(prf, data, iv) {\n\t\tlet l;\n\t\tif (!(l = data.length)) {\n\t\t\treturn [];\n\t\t}\n\t\tconst bl = bitArray.bitLength(data);\n\t\tfor (let i = 0; i < l; i += 4) {\n\t\t\tthis.incCounter(iv);\n\t\t\tconst e = prf.encrypt(iv);\n\t\t\tdata[i] ^= e[0];\n\t\t\tdata[i + 1] ^= e[1];\n\t\t\tdata[i + 2] ^= e[2];\n\t\t\tdata[i + 3] ^= e[3];\n\t\t}\n\t\treturn bitArray.clamp(data, bl);\n\t}\n};\n\nconst misc = {\n\timportKey(password) {\n\t\treturn new misc.hmacSha1(codec.bytes.toBits(password));\n\t},\n\tpbkdf2(prf, salt, count, length) {\n\t\tcount = count || 10000;\n\t\tif (length < 0 || count < 0) {\n\t\t\tthrow new Error(\"invalid params to pbkdf2\");\n\t\t}\n\t\tconst byteLength = ((length >> 5) + 1) << 2;\n\t\tlet u, ui, i, j, k;\n\t\tconst arrayBuffer = new ArrayBuffer(byteLength);\n\t\tconst out = new DataView(arrayBuffer);\n\t\tlet outLength = 0;\n\t\tconst b = bitArray;\n\t\tsalt = codec.bytes.toBits(salt);\n\t\tfor (k = 1; outLength < (byteLength || 1); k++) {\n\t\t\tu = ui = prf.encrypt(b.concat(salt, [k]));\n\t\t\tfor (i = 1; i < count; i++) {\n\t\t\t\tui = prf.encrypt(ui);\n\t\t\t\tfor (j = 0; j < ui.length; j++) {\n\t\t\t\t\tu[j] ^= ui[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i = 0; outLength < (byteLength || 1) && i < u.length; i++) {\n\t\t\t\tout.setInt32(outLength, u[i]);\n\t\t\t\toutLength += 4;\n\t\t\t}\n\t\t}\n\t\treturn arrayBuffer.slice(0, length / 8);\n\t}\n};\n\n/** @fileOverview HMAC implementation.\n *\n * @author Emily Stark\n * @author Mike Hamburg\n * @author Dan Boneh\n */\n\n/** HMAC with the specified hash function.\n * @constructor\n * @param {bitArray} key the key for HMAC.\n * @param {Object} [Hash=hash.sha1] The hash function to use.\n */\nmisc.hmacSha1 = class {\n\n\tconstructor(key) {\n\t\tconst hmac = this;\n\t\tconst Hash = hmac._hash = hash.sha1;\n\t\tconst exKey = [[], []];\n\t\thmac._baseHash = [new Hash(), new Hash()];\n\t\tconst bs = hmac._baseHash[0].blockSize / 32;\n\n\t\tif (key.length > bs) {\n\t\t\tkey = new Hash().update(key).finalize();\n\t\t}\n\n\t\tfor (let i = 0; i < bs; i++) {\n\t\t\texKey[0][i] = key[i] ^ 0x36363636;\n\t\t\texKey[1][i] = key[i] ^ 0x5C5C5C5C;\n\t\t}\n\n\t\thmac._baseHash[0].update(exKey[0]);\n\t\thmac._baseHash[1].update(exKey[1]);\n\t\thmac._resultHash = new Hash(hmac._baseHash[0]);\n\t}\n\treset() {\n\t\tconst hmac = this;\n\t\thmac._resultHash = new hmac._hash(hmac._baseHash[0]);\n\t\thmac._updated = false;\n\t}\n\n\tupdate(data) {\n\t\tconst hmac = this;\n\t\thmac._updated = true;\n\t\thmac._resultHash.update(data);\n\t}\n\n\tdigest() {\n\t\tconst hmac = this;\n\t\tconst w = hmac._resultHash.finalize();\n\t\tconst result = new (hmac._hash)(hmac._baseHash[1]).update(w).finalize();\n\n\t\thmac.reset();\n\n\t\treturn result;\n\t}\n\n\tencrypt(data) {\n\t\tif (!this._updated) {\n\t\t\tthis.update(data);\n\t\t\treturn this.digest(data);\n\t\t} else {\n\t\t\tthrow new Error(\"encrypt on already updated hmac called!\");\n\t\t}\n\t}\n};\n\nexport {\n\tcipher,\n\tcodec,\n\tmisc,\n\tmode,\n\trandom\n};","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global crypto */\n\nimport {\n\trandom\n} from \"./codecs/sjcl.js\";\n\nconst GET_RANDOM_VALUES_SUPPORTED = typeof crypto != \"undefined\" && typeof crypto.getRandomValues == \"function\";\n\nconst ERR_INVALID_PASSWORD = \"Invalid password\";\nconst ERR_INVALID_SIGNATURE = \"Invalid signature\";\nconst ERR_ABORT_CHECK_PASSWORD = \"zipjs-abort-check-password\";\n\nexport {\n\tgetRandomValues,\n\tERR_INVALID_PASSWORD,\n\tERR_INVALID_SIGNATURE,\n\tERR_ABORT_CHECK_PASSWORD\n};\n\nfunction getRandomValues(array) {\n\tif (GET_RANDOM_VALUES_SUPPORTED) {\n\t\treturn crypto.getRandomValues(array);\n\t} else {\n\t\treturn random.getRandomValues(array);\n\t}\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global crypto, TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { encodeText } from \"./../util/encode-text.js\";\nimport {\n\tcipher,\n\tcodec,\n\tmisc,\n\tmode\n} from \"./codecs/sjcl.js\";\nimport {\n\tERR_INVALID_PASSWORD,\n\tERR_INVALID_SIGNATURE,\n\tERR_ABORT_CHECK_PASSWORD,\n\tgetRandomValues\n} from \"./common-crypto.js\";\n\nconst BLOCK_LENGTH = 16;\nconst RAW_FORMAT = \"raw\";\nconst PBKDF2_ALGORITHM = { name: \"PBKDF2\" };\nconst HASH_ALGORITHM = { name: \"HMAC\" };\nconst HASH_FUNCTION = \"SHA-1\";\nconst BASE_KEY_ALGORITHM = Object.assign({ hash: HASH_ALGORITHM }, PBKDF2_ALGORITHM);\nconst DERIVED_BITS_ALGORITHM = Object.assign({ iterations: 1000, hash: { name: HASH_FUNCTION } }, PBKDF2_ALGORITHM);\nconst DERIVED_BITS_USAGE = [\"deriveBits\"];\nconst SALT_LENGTH = [8, 12, 16];\nconst KEY_LENGTH = [16, 24, 32];\nconst SIGNATURE_LENGTH = 10;\nconst COUNTER_DEFAULT_VALUE = [0, 0, 0, 0];\nconst UNDEFINED_TYPE = \"undefined\";\nconst FUNCTION_TYPE = \"function\";\n// deno-lint-ignore valid-typeof\nconst CRYPTO_API_SUPPORTED = typeof crypto != UNDEFINED_TYPE;\nconst subtle = CRYPTO_API_SUPPORTED && crypto.subtle;\nconst SUBTLE_API_SUPPORTED = CRYPTO_API_SUPPORTED && typeof subtle != UNDEFINED_TYPE;\nconst codecBytes = codec.bytes;\nconst Aes = cipher.aes;\nconst CtrGladman = mode.ctrGladman;\nconst HmacSha1 = misc.hmacSha1;\n\nlet IMPORT_KEY_SUPPORTED = CRYPTO_API_SUPPORTED && SUBTLE_API_SUPPORTED && typeof subtle.importKey == FUNCTION_TYPE;\nlet DERIVE_BITS_SUPPORTED = CRYPTO_API_SUPPORTED && SUBTLE_API_SUPPORTED && typeof subtle.deriveBits == FUNCTION_TYPE;\n\nclass AESDecryptionStream extends TransformStream {\n\n\tconstructor({ password, signed, encryptionStrength, checkPasswordOnly }) {\n\t\tsuper({\n\t\t\tstart() {\n\t\t\t\tObject.assign(this, {\n\t\t\t\t\tready: new Promise(resolve => this.resolveReady = resolve),\n\t\t\t\t\tpassword,\n\t\t\t\t\tsigned,\n\t\t\t\t\tstrength: encryptionStrength - 1,\n\t\t\t\t\tpending: new Uint8Array()\n\t\t\t\t});\n\t\t\t},\n\t\t\tasync transform(chunk, controller) {\n\t\t\t\tconst aesCrypto = this;\n\t\t\t\tconst {\n\t\t\t\t\tpassword,\n\t\t\t\t\tstrength,\n\t\t\t\t\tresolveReady,\n\t\t\t\t\tready\n\t\t\t\t} = aesCrypto;\n\t\t\t\tif (password) {\n\t\t\t\t\tawait createDecryptionKeys(aesCrypto, strength, password, subarray(chunk, 0, SALT_LENGTH[strength] + 2));\n\t\t\t\t\tchunk = subarray(chunk, SALT_LENGTH[strength] + 2);\n\t\t\t\t\tif (checkPasswordOnly) {\n\t\t\t\t\t\tcontroller.error(new Error(ERR_ABORT_CHECK_PASSWORD));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolveReady();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tawait ready;\n\t\t\t\t}\n\t\t\t\tconst output = new Uint8Array(chunk.length - SIGNATURE_LENGTH - ((chunk.length - SIGNATURE_LENGTH) % BLOCK_LENGTH));\n\t\t\t\tcontroller.enqueue(append(aesCrypto, chunk, output, 0, SIGNATURE_LENGTH, true));\n\t\t\t},\n\t\t\tasync flush(controller) {\n\t\t\t\tconst {\n\t\t\t\t\tsigned,\n\t\t\t\t\tctr,\n\t\t\t\t\thmac,\n\t\t\t\t\tpending,\n\t\t\t\t\tready\n\t\t\t\t} = this;\n\t\t\t\tawait ready;\n\t\t\t\tconst chunkToDecrypt = subarray(pending, 0, pending.length - SIGNATURE_LENGTH);\n\t\t\t\tconst originalSignature = subarray(pending, pending.length - SIGNATURE_LENGTH);\n\t\t\t\tlet decryptedChunkArray = new Uint8Array();\n\t\t\t\tif (chunkToDecrypt.length) {\n\t\t\t\t\tconst encryptedChunk = toBits(codecBytes, chunkToDecrypt);\n\t\t\t\t\thmac.update(encryptedChunk);\n\t\t\t\t\tconst decryptedChunk = ctr.update(encryptedChunk);\n\t\t\t\t\tdecryptedChunkArray = fromBits(codecBytes, decryptedChunk);\n\t\t\t\t}\n\t\t\t\tif (signed) {\n\t\t\t\t\tconst signature = subarray(fromBits(codecBytes, hmac.digest()), 0, SIGNATURE_LENGTH);\n\t\t\t\t\tfor (let indexSignature = 0; indexSignature < SIGNATURE_LENGTH; indexSignature++) {\n\t\t\t\t\t\tif (signature[indexSignature] != originalSignature[indexSignature]) {\n\t\t\t\t\t\t\tthrow new Error(ERR_INVALID_SIGNATURE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontroller.enqueue(decryptedChunkArray);\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass AESEncryptionStream extends TransformStream {\n\n\tconstructor({ password, encryptionStrength }) {\n\t\t// deno-lint-ignore prefer-const\n\t\tlet stream;\n\t\tsuper({\n\t\t\tstart() {\n\t\t\t\tObject.assign(this, {\n\t\t\t\t\tready: new Promise(resolve => this.resolveReady = resolve),\n\t\t\t\t\tpassword,\n\t\t\t\t\tstrength: encryptionStrength - 1,\n\t\t\t\t\tpending: new Uint8Array()\n\t\t\t\t});\n\t\t\t},\n\t\t\tasync transform(chunk, controller) {\n\t\t\t\tconst aesCrypto = this;\n\t\t\t\tconst {\n\t\t\t\t\tpassword,\n\t\t\t\t\tstrength,\n\t\t\t\t\tresolveReady,\n\t\t\t\t\tready\n\t\t\t\t} = aesCrypto;\n\t\t\t\tlet preamble = new Uint8Array();\n\t\t\t\tif (password) {\n\t\t\t\t\tpreamble = await createEncryptionKeys(aesCrypto, strength, password);\n\t\t\t\t\tresolveReady();\n\t\t\t\t} else {\n\t\t\t\t\tawait ready;\n\t\t\t\t}\n\t\t\t\tconst output = new Uint8Array(preamble.length + chunk.length - (chunk.length % BLOCK_LENGTH));\n\t\t\t\toutput.set(preamble, 0);\n\t\t\t\tcontroller.enqueue(append(aesCrypto, chunk, output, preamble.length, 0));\n\t\t\t},\n\t\t\tasync flush(controller) {\n\t\t\t\tconst {\n\t\t\t\t\tctr,\n\t\t\t\t\thmac,\n\t\t\t\t\tpending,\n\t\t\t\t\tready\n\t\t\t\t} = this;\n\t\t\t\tawait ready;\n\t\t\t\tlet encryptedChunkArray = new Uint8Array();\n\t\t\t\tif (pending.length) {\n\t\t\t\t\tconst encryptedChunk = ctr.update(toBits(codecBytes, pending));\n\t\t\t\t\thmac.update(encryptedChunk);\n\t\t\t\t\tencryptedChunkArray = fromBits(codecBytes, encryptedChunk);\n\t\t\t\t}\n\t\t\t\tstream.signature = fromBits(codecBytes, hmac.digest()).slice(0, SIGNATURE_LENGTH);\n\t\t\t\tcontroller.enqueue(concat(encryptedChunkArray, stream.signature));\n\t\t\t}\n\t\t});\n\t\tstream = this;\n\t}\n}\n\nexport {\n\tAESDecryptionStream,\n\tAESEncryptionStream,\n\tERR_INVALID_PASSWORD\n};\n\nfunction append(aesCrypto, input, output, paddingStart, paddingEnd, verifySignature) {\n\tconst {\n\t\tctr,\n\t\thmac,\n\t\tpending\n\t} = aesCrypto;\n\tconst inputLength = input.length - paddingEnd;\n\tif (pending.length) {\n\t\tinput = concat(pending, input);\n\t\toutput = expand(output, inputLength - (inputLength % BLOCK_LENGTH));\n\t}\n\tlet offset;\n\tfor (offset = 0; offset <= inputLength - BLOCK_LENGTH; offset += BLOCK_LENGTH) {\n\t\tconst inputChunk = toBits(codecBytes, subarray(input, offset, offset + BLOCK_LENGTH));\n\t\tif (verifySignature) {\n\t\t\thmac.update(inputChunk);\n\t\t}\n\t\tconst outputChunk = ctr.update(inputChunk);\n\t\tif (!verifySignature) {\n\t\t\thmac.update(outputChunk);\n\t\t}\n\t\toutput.set(fromBits(codecBytes, outputChunk), offset + paddingStart);\n\t}\n\taesCrypto.pending = subarray(input, offset);\n\treturn output;\n}\n\nasync function createDecryptionKeys(decrypt, strength, password, preamble) {\n\tconst passwordVerificationKey = await createKeys(decrypt, strength, password, subarray(preamble, 0, SALT_LENGTH[strength]));\n\tconst passwordVerification = subarray(preamble, SALT_LENGTH[strength]);\n\tif (passwordVerificationKey[0] != passwordVerification[0] || passwordVerificationKey[1] != passwordVerification[1]) {\n\t\tthrow new Error(ERR_INVALID_PASSWORD);\n\t}\n}\n\nasync function createEncryptionKeys(encrypt, strength, password) {\n\tconst salt = getRandomValues(new Uint8Array(SALT_LENGTH[strength]));\n\tconst passwordVerification = await createKeys(encrypt, strength, password, salt);\n\treturn concat(salt, passwordVerification);\n}\n\nasync function createKeys(aesCrypto, strength, password, salt) {\n\taesCrypto.password = null;\n\tconst encodedPassword = encodeText(password);\n\tconst baseKey = await importKey(RAW_FORMAT, encodedPassword, BASE_KEY_ALGORITHM, false, DERIVED_BITS_USAGE);\n\tconst derivedBits = await deriveBits(Object.assign({ salt }, DERIVED_BITS_ALGORITHM), baseKey, 8 * ((KEY_LENGTH[strength] * 2) + 2));\n\tconst compositeKey = new Uint8Array(derivedBits);\n\tconst key = toBits(codecBytes, subarray(compositeKey, 0, KEY_LENGTH[strength]));\n\tconst authentication = toBits(codecBytes, subarray(compositeKey, KEY_LENGTH[strength], KEY_LENGTH[strength] * 2));\n\tconst passwordVerification = subarray(compositeKey, KEY_LENGTH[strength] * 2);\n\tObject.assign(aesCrypto, {\n\t\tkeys: {\n\t\t\tkey,\n\t\t\tauthentication,\n\t\t\tpasswordVerification\n\t\t},\n\t\tctr: new CtrGladman(new Aes(key), Array.from(COUNTER_DEFAULT_VALUE)),\n\t\thmac: new HmacSha1(authentication)\n\t});\n\treturn passwordVerification;\n}\n\nasync function importKey(format, password, algorithm, extractable, keyUsages) {\n\tif (IMPORT_KEY_SUPPORTED) {\n\t\ttry {\n\t\t\treturn await subtle.importKey(format, password, algorithm, extractable, keyUsages);\n\t\t} catch (_error) {\n\t\t\tIMPORT_KEY_SUPPORTED = false;\n\t\t\treturn misc.importKey(password);\n\t\t}\n\t} else {\n\t\treturn misc.importKey(password);\n\t}\n}\n\nasync function deriveBits(algorithm, baseKey, length) {\n\tif (DERIVE_BITS_SUPPORTED) {\n\t\ttry {\n\t\t\treturn await subtle.deriveBits(algorithm, baseKey, length);\n\t\t} catch (_error) {\n\t\t\tDERIVE_BITS_SUPPORTED = false;\n\t\t\treturn misc.pbkdf2(baseKey, algorithm.salt, DERIVED_BITS_ALGORITHM.iterations, length);\n\t\t}\n\t} else {\n\t\treturn misc.pbkdf2(baseKey, algorithm.salt, DERIVED_BITS_ALGORITHM.iterations, length);\n\t}\n}\n\nfunction concat(leftArray, rightArray) {\n\tlet array = leftArray;\n\tif (leftArray.length + rightArray.length) {\n\t\tarray = new Uint8Array(leftArray.length + rightArray.length);\n\t\tarray.set(leftArray, 0);\n\t\tarray.set(rightArray, leftArray.length);\n\t}\n\treturn array;\n}\n\nfunction expand(inputArray, length) {\n\tif (length && length > inputArray.length) {\n\t\tconst array = inputArray;\n\t\tinputArray = new Uint8Array(length);\n\t\tinputArray.set(array, 0);\n\t}\n\treturn inputArray;\n}\n\nfunction subarray(array, begin, end) {\n\treturn array.subarray(begin, end);\n}\n\nfunction fromBits(codecBytes, chunk) {\n\treturn codecBytes.fromBits(chunk);\n}\nfunction toBits(codecBytes, chunk) {\n\treturn codecBytes.toBits(chunk);\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TextEncoder */\n\nexport {\n\tencodeText\n};\n\nfunction encodeText(value) {\n\tif (typeof TextEncoder == \"undefined\") {\n\t\tvalue = unescape(encodeURIComponent(value));\n\t\tconst result = new Uint8Array(value.length);\n\t\tfor (let i = 0; i < result.length; i++) {\n\t\t\tresult[i] = value.charCodeAt(i);\n\t\t}\n\t\treturn result;\n\t} else {\n\t\treturn new TextEncoder().encode(value);\n\t}\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { Crc32 } from \"./codecs/crc32.js\";\nimport {\n\tERR_INVALID_PASSWORD,\n\tERR_ABORT_CHECK_PASSWORD,\n\tgetRandomValues\n} from \"./common-crypto.js\";\n\nconst HEADER_LENGTH = 12;\n\nclass ZipCryptoDecryptionStream extends TransformStream {\n\n\tconstructor({ password, passwordVerification, checkPasswordOnly }) {\n\t\tsuper({\n\t\t\tstart() {\n\t\t\t\tObject.assign(this, {\n\t\t\t\t\tpassword,\n\t\t\t\t\tpasswordVerification\n\t\t\t\t});\n\t\t\t\tcreateKeys(this, password);\n\t\t\t},\n\t\t\ttransform(chunk, controller) {\n\t\t\t\tconst zipCrypto = this;\n\t\t\t\tif (zipCrypto.password) {\n\t\t\t\t\tconst decryptedHeader = decrypt(zipCrypto, chunk.subarray(0, HEADER_LENGTH));\n\t\t\t\t\tzipCrypto.password = null;\n\t\t\t\t\tif (decryptedHeader[HEADER_LENGTH - 1] != zipCrypto.passwordVerification) {\n\t\t\t\t\t\tthrow new Error(ERR_INVALID_PASSWORD);\n\t\t\t\t\t}\n\t\t\t\t\tchunk = chunk.subarray(HEADER_LENGTH);\n\t\t\t\t}\n\t\t\t\tif (checkPasswordOnly) {\n\t\t\t\t\tcontroller.error(new Error(ERR_ABORT_CHECK_PASSWORD));\n\t\t\t\t} else {\n\t\t\t\t\tcontroller.enqueue(decrypt(zipCrypto, chunk));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass ZipCryptoEncryptionStream extends TransformStream {\n\n\tconstructor({ password, passwordVerification }) {\n\t\tsuper({\n\t\t\tstart() {\n\t\t\t\tObject.assign(this, {\n\t\t\t\t\tpassword,\n\t\t\t\t\tpasswordVerification\n\t\t\t\t});\n\t\t\t\tcreateKeys(this, password);\n\t\t\t},\n\t\t\ttransform(chunk, controller) {\n\t\t\t\tconst zipCrypto = this;\n\t\t\t\tlet output;\n\t\t\t\tlet offset;\n\t\t\t\tif (zipCrypto.password) {\n\t\t\t\t\tzipCrypto.password = null;\n\t\t\t\t\tconst header = getRandomValues(new Uint8Array(HEADER_LENGTH));\n\t\t\t\t\theader[HEADER_LENGTH - 1] = zipCrypto.passwordVerification;\n\t\t\t\t\toutput = new Uint8Array(chunk.length + header.length);\n\t\t\t\t\toutput.set(encrypt(zipCrypto, header), 0);\n\t\t\t\t\toffset = HEADER_LENGTH;\n\t\t\t\t} else {\n\t\t\t\t\toutput = new Uint8Array(chunk.length);\n\t\t\t\t\toffset = 0;\n\t\t\t\t}\n\t\t\t\toutput.set(encrypt(zipCrypto, chunk), offset);\n\t\t\t\tcontroller.enqueue(output);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport {\n\tZipCryptoDecryptionStream,\n\tZipCryptoEncryptionStream,\n\tERR_INVALID_PASSWORD\n};\n\nfunction decrypt(target, input) {\n\tconst output = new Uint8Array(input.length);\n\tfor (let index = 0; index < input.length; index++) {\n\t\toutput[index] = getByte(target) ^ input[index];\n\t\tupdateKeys(target, output[index]);\n\t}\n\treturn output;\n}\n\nfunction encrypt(target, input) {\n\tconst output = new Uint8Array(input.length);\n\tfor (let index = 0; index < input.length; index++) {\n\t\toutput[index] = getByte(target) ^ input[index];\n\t\tupdateKeys(target, input[index]);\n\t}\n\treturn output;\n}\n\nfunction createKeys(target, password) {\n\tconst keys = [0x12345678, 0x23456789, 0x34567890];\n\tObject.assign(target, {\n\t\tkeys,\n\t\tcrcKey0: new Crc32(keys[0]),\n\t\tcrcKey2: new Crc32(keys[2]),\n\t});\n\tfor (let index = 0; index < password.length; index++) {\n\t\tupdateKeys(target, password.charCodeAt(index));\n\t}\n}\n\nfunction updateKeys(target, byte) {\n\tlet [key0, key1, key2] = target.keys;\n\ttarget.crcKey0.append([byte]);\n\tkey0 = ~target.crcKey0.get();\n\tkey1 = getInt32(Math.imul(getInt32(key1 + getInt8(key0)), 134775813) + 1);\n\ttarget.crcKey2.append([key1 >>> 24]);\n\tkey2 = ~target.crcKey2.get();\n\ttarget.keys = [key0, key1, key2];\n}\n\nfunction getByte(target) {\n\tconst temp = target.keys[2] | 2;\n\treturn getInt8(Math.imul(temp, (temp ^ 1)) >>> 8);\n}\n\nfunction getInt8(number) {\n\treturn number & 0xFF;\n}\n\nfunction getInt32(number) {\n\treturn number & 0xFFFFFFFF;\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { Crc32Stream } from \"./crc32-stream.js\";\nimport {\n\tAESEncryptionStream,\n\tAESDecryptionStream\n} from \"./aes-crypto-stream.js\";\nimport {\n\tZipCryptoEncryptionStream,\n\tZipCryptoDecryptionStream\n} from \"./zip-crypto-stream.js\";\nimport {\n\tERR_INVALID_PASSWORD,\n\tERR_INVALID_SIGNATURE,\n\tERR_ABORT_CHECK_PASSWORD\n} from \"./common-crypto.js\";\n\nconst COMPRESSION_FORMAT = \"deflate-raw\";\n\nclass DeflateStream extends TransformStream {\n\n\tconstructor(options, { chunkSize, CompressionStream, CompressionStreamNative }) {\n\t\tsuper({});\n\t\tconst { compressed, encrypted, useCompressionStream, zipCrypto, signed, level } = options;\n\t\tconst stream = this;\n\t\tlet crc32Stream, encryptionStream;\n\t\tlet readable = filterEmptyChunks(super.readable);\n\t\tif ((!encrypted || zipCrypto) && signed) {\n\t\t\t[readable, crc32Stream] = readable.tee();\n\t\t\tcrc32Stream = pipeThrough(crc32Stream, new Crc32Stream());\n\t\t}\n\t\tif (compressed) {\n\t\t\treadable = pipeThroughCommpressionStream(readable, useCompressionStream, { level, chunkSize }, CompressionStreamNative, CompressionStream);\n\t\t}\n\t\tif (encrypted) {\n\t\t\tif (zipCrypto) {\n\t\t\t\treadable = pipeThrough(readable, new ZipCryptoEncryptionStream(options));\n\t\t\t} else {\n\t\t\t\tencryptionStream = new AESEncryptionStream(options);\n\t\t\t\treadable = pipeThrough(readable, encryptionStream);\n\t\t\t}\n\t\t}\n\t\tsetReadable(stream, readable, async () => {\n\t\t\tlet signature;\n\t\t\tif (encrypted && !zipCrypto) {\n\t\t\t\tsignature = encryptionStream.signature;\n\t\t\t}\n\t\t\tif ((!encrypted || zipCrypto) && signed) {\n\t\t\t\tsignature = await crc32Stream.getReader().read();\n\t\t\t\tsignature = new DataView(signature.value.buffer).getUint32(0);\n\t\t\t}\n\t\t\tstream.signature = signature;\n\t\t});\n\t}\n}\n\nclass InflateStream extends TransformStream {\n\n\tconstructor(options, { chunkSize, DecompressionStream, DecompressionStreamNative }) {\n\t\tsuper({});\n\t\tconst { zipCrypto, encrypted, signed, signature, compressed, useCompressionStream } = options;\n\t\tlet crc32Stream, decryptionStream;\n\t\tlet readable = filterEmptyChunks(super.readable);\n\t\tif (encrypted) {\n\t\t\tif (zipCrypto) {\n\t\t\t\treadable = pipeThrough(readable, new ZipCryptoDecryptionStream(options));\n\t\t\t} else {\n\t\t\t\tdecryptionStream = new AESDecryptionStream(options);\n\t\t\t\treadable = pipeThrough(readable, decryptionStream);\n\t\t\t}\n\t\t}\n\t\tif (compressed) {\n\t\t\treadable = pipeThroughCommpressionStream(readable, useCompressionStream, { chunkSize }, DecompressionStreamNative, DecompressionStream);\n\t\t}\n\t\tif ((!encrypted || zipCrypto) && signed) {\n\t\t\t[readable, crc32Stream] = readable.tee();\n\t\t\tcrc32Stream = pipeThrough(crc32Stream, new Crc32Stream());\n\t\t}\n\t\tsetReadable(this, readable, async () => {\n\t\t\tif ((!encrypted || zipCrypto) && signed) {\n\t\t\t\tconst streamSignature = await crc32Stream.getReader().read();\n\t\t\t\tconst dataViewSignature = new DataView(streamSignature.value.buffer);\n\t\t\t\tif (signature != dataViewSignature.getUint32(0, false)) {\n\t\t\t\t\tthrow new Error(ERR_INVALID_SIGNATURE);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport {\n\tDeflateStream,\n\tInflateStream,\n\tERR_INVALID_PASSWORD,\n\tERR_INVALID_SIGNATURE,\n\tERR_ABORT_CHECK_PASSWORD\n};\n\nfunction filterEmptyChunks(readable) {\n\treturn pipeThrough(readable, new TransformStream({\n\t\ttransform(chunk, controller) {\n\t\t\tif (chunk && chunk.length) {\n\t\t\t\tcontroller.enqueue(chunk);\n\t\t\t}\n\t\t}\n\t}));\n}\n\nfunction setReadable(stream, readable, flush) {\n\treadable = pipeThrough(readable, new TransformStream({ flush }));\n\tObject.defineProperty(stream, \"readable\", {\n\t\tget() {\n\t\t\treturn readable;\n\t\t}\n\t});\n}\n\nfunction pipeThroughCommpressionStream(readable, useCompressionStream, options, CodecStreamNative, CodecStream) {\n\ttry {\n\t\tconst CompressionStream = useCompressionStream && CodecStreamNative ? CodecStreamNative : CodecStream;\n\t\treadable = pipeThrough(readable, new CompressionStream(COMPRESSION_FORMAT, options));\n\t} catch (error) {\n\t\tif (useCompressionStream) {\n\t\t\treadable = pipeThrough(readable, new CodecStream(COMPRESSION_FORMAT, options));\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n\treturn readable;\n}\n\nfunction pipeThrough(readable, transformStream) {\n\treturn readable.pipeThrough(transformStream);\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n/* global TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport {\n\tERR_INVALID_PASSWORD,\n\tERR_INVALID_SIGNATURE,\n\tERR_ABORT_CHECK_PASSWORD,\n\tInflateStream,\n\tDeflateStream\n} from \"./zip-entry-stream.js\";\n\nconst MESSAGE_EVENT_TYPE = \"message\";\nconst MESSAGE_START = \"start\";\nconst MESSAGE_PULL = \"pull\";\nconst MESSAGE_DATA = \"data\";\nconst MESSAGE_ACK_DATA = \"ack\";\nconst MESSAGE_CLOSE = \"close\";\nconst CODEC_DEFLATE = \"deflate\";\nconst CODEC_INFLATE = \"inflate\";\n\nexport {\n\tCODEC_DEFLATE,\n\tCODEC_INFLATE,\n\tMESSAGE_EVENT_TYPE,\n\tMESSAGE_START,\n\tMESSAGE_PULL,\n\tMESSAGE_DATA,\n\tMESSAGE_ACK_DATA,\n\tMESSAGE_CLOSE,\n\tERR_INVALID_PASSWORD,\n\tERR_INVALID_SIGNATURE,\n\tERR_ABORT_CHECK_PASSWORD,\n\tCodecStream\n};\n\nclass CodecStream extends TransformStream {\n\n\tconstructor(options, config) {\n\t\tsuper({});\n\t\tconst codec = this;\n\t\tconst { codecType } = options;\n\t\tlet Stream;\n\t\tif (codecType.startsWith(CODEC_DEFLATE)) {\n\t\t\tStream = DeflateStream;\n\t\t} else if (codecType.startsWith(CODEC_INFLATE)) {\n\t\t\tStream = InflateStream;\n\t\t}\n\t\tlet size = 0;\n\t\tconst stream = new Stream(options, config);\n\t\tconst readable = super.readable;\n\t\tconst transformStream = new TransformStream({\n\t\t\ttransform(chunk, controller) {\n\t\t\t\tif (chunk && chunk.length) {\n\t\t\t\t\tsize += chunk.length;\n\t\t\t\t\tcontroller.enqueue(chunk);\n\t\t\t\t}\n\t\t\t},\n\t\t\tflush() {\n\t\t\t\tconst { signature } = stream;\n\t\t\t\tObject.assign(codec, {\n\t\t\t\t\tsignature,\n\t\t\t\t\tsize\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(codec, \"readable\", {\n\t\t\tget() {\n\t\t\t\treturn readable.pipeThrough(stream).pipeThrough(transformStream);\n\t\t\t}\n\t\t});\n\t}\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global Worker, URL, TransformStream, WritableStream */\n\nimport {\n\tUNDEFINED_TYPE,\n\tFUNCTION_TYPE\n} from \"./constants.js\";\nimport {\n\tCodecStream,\n\tMESSAGE_EVENT_TYPE,\n\tMESSAGE_START,\n\tMESSAGE_PULL,\n\tMESSAGE_DATA,\n\tMESSAGE_ACK_DATA,\n\tMESSAGE_CLOSE\n} from \"./streams/codec-stream.js\";\n\n// deno-lint-ignore valid-typeof\nconst WEB_WORKERS_SUPPORTED = typeof Worker != UNDEFINED_TYPE;\n\nexport {\n\tCodecWorker\n};\n\nclass CodecWorker {\n\n\tconstructor(workerData, { readable, writable }, { options, config, streamOptions, useWebWorkers, transferStreams, scripts }, onTaskFinished) {\n\t\tconst { signal } = streamOptions;\n\t\tObject.assign(workerData, {\n\t\t\tbusy: true,\n\t\t\treadable: readable.pipeThrough(new ProgressWatcherStream(readable, streamOptions, config), { signal }),\n\t\t\twritable,\n\t\t\toptions: Object.assign({}, options),\n\t\t\tscripts,\n\t\t\ttransferStreams,\n\t\t\tterminate() {\n\t\t\t\tconst { worker, busy } = workerData;\n\t\t\t\tif (worker && !busy) {\n\t\t\t\t\tworker.terminate();\n\t\t\t\t\tworkerData.interface = null;\n\t\t\t\t}\n\t\t\t},\n\t\t\tonTaskFinished() {\n\t\t\t\tworkerData.busy = false;\n\t\t\t\tonTaskFinished(workerData);\n\t\t\t}\n\t\t});\n\t\treturn (useWebWorkers && WEB_WORKERS_SUPPORTED ? createWebWorkerInterface : createWorkerInterface)(workerData, config);\n\t}\n}\n\nclass ProgressWatcherStream extends TransformStream {\n\n\tconstructor(readableSource, { onstart, onprogress, size, onend }, { chunkSize }) {\n\t\tlet chunkOffset = 0;\n\t\tsuper({\n\t\t\tstart() {\n\t\t\t\tif (onstart) {\n\t\t\t\t\tcallHandler(onstart, size);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync transform(chunk, controller) {\n\t\t\t\tchunkOffset += chunk.length;\n\t\t\t\tif (onprogress) {\n\t\t\t\t\tawait callHandler(onprogress, chunkOffset, size);\n\t\t\t\t}\n\t\t\t\tcontroller.enqueue(chunk);\n\t\t\t},\n\t\t\tflush() {\n\t\t\t\treadableSource.size = chunkOffset;\n\t\t\t\tif (onend) {\n\t\t\t\t\tcallHandler(onend, chunkOffset);\n\t\t\t\t}\n\t\t\t}\n\t\t}, { highWaterMark: 1, size: () => chunkSize });\n\t}\n}\n\nasync function callHandler(handler, ...parameters) {\n\ttry {\n\t\tawait handler(...parameters);\n\t} catch (_error) {\n\t\t// ignored\n\t}\n}\n\nfunction createWorkerInterface(workerData, config) {\n\treturn {\n\t\trun: () => runWorker(workerData, config)\n\t};\n}\n\nfunction createWebWorkerInterface(workerData, { baseURL, chunkSize }) {\n\tif (!workerData.interface) {\n\t\tObject.assign(workerData, {\n\t\t\tworker: getWebWorker(workerData.scripts[0], baseURL, workerData),\n\t\t\tinterface: {\n\t\t\t\trun: () => runWebWorker(workerData, { chunkSize })\n\t\t\t}\n\t\t});\n\t}\n\treturn workerData.interface;\n}\n\nasync function runWorker({ options, readable, writable, onTaskFinished }, config) {\n\tconst codecStream = new CodecStream(options, config);\n\ttry {\n\t\tawait readable.pipeThrough(codecStream).pipeTo(writable, { preventClose: true, preventAbort: true });\n\t\tconst {\n\t\t\tsignature,\n\t\t\tsize\n\t\t} = codecStream;\n\t\treturn {\n\t\t\tsignature,\n\t\t\tsize\n\t\t};\n\t} finally {\n\t\tonTaskFinished();\n\t}\n}\n\nasync function runWebWorker(workerData, config) {\n\tlet resolveResult, rejectResult;\n\tconst result = new Promise((resolve, reject) => {\n\t\tresolveResult = resolve;\n\t\trejectResult = reject;\n\t});\n\tObject.assign(workerData, {\n\t\treader: null,\n\t\twriter: null,\n\t\tresolveResult,\n\t\trejectResult,\n\t\tresult\n\t});\n\tconst { readable, options, scripts } = workerData;\n\tconst { writable, closed } = watchClosedStream(workerData.writable);\n\tconst streamsTransferred = sendMessage({\n\t\ttype: MESSAGE_START,\n\t\tscripts: scripts.slice(1),\n\t\toptions,\n\t\tconfig,\n\t\treadable,\n\t\twritable\n\t}, workerData);\n\tif (!streamsTransferred) {\n\t\tObject.assign(workerData, {\n\t\t\treader: readable.getReader(),\n\t\t\twriter: writable.getWriter()\n\t\t});\n\t}\n\tconst resultValue = await result;\n\ttry {\n\t\tawait writable.close();\n\t} catch (_error) {\n\t\t// ignored\n\t}\n\tawait closed;\n\treturn resultValue;\n}\n\nfunction watchClosedStream(writableSource) {\n\tconst writer = writableSource.getWriter();\n\tlet resolveStreamClosed;\n\tconst closed = new Promise(resolve => resolveStreamClosed = resolve);\n\tconst writable = new WritableStream({\n\t\tasync write(chunk) {\n\t\t\tawait writer.ready;\n\t\t\tawait writer.write(chunk);\n\t\t},\n\t\tclose() {\n\t\t\twriter.releaseLock();\n\t\t\tresolveStreamClosed();\n\t\t},\n\t\tabort(reason) {\n\t\t\treturn writer.abort(reason);\n\t\t}\n\t});\n\treturn { writable, closed };\n}\n\nlet classicWorkersSupported = true;\nlet transferStreamsSupported = true;\n\nfunction getWebWorker(url, baseURL, workerData) {\n\tconst workerOptions = { type: \"module\" };\n\tlet scriptUrl, worker;\n\t// deno-lint-ignore valid-typeof\n\tif (typeof url == FUNCTION_TYPE) {\n\t\turl = url();\n\t}\n\ttry {\n\t\tscriptUrl = new URL(url, baseURL);\n\t} catch (_error) {\n\t\tscriptUrl = url;\n\t}\n\tif (classicWorkersSupported) {\n\t\ttry {\n\t\t\tworker = new Worker(scriptUrl);\n\t\t} catch (_error) {\n\t\t\tclassicWorkersSupported = false;\n\t\t\tworker = new Worker(scriptUrl, workerOptions);\n\t\t}\n\t} else {\n\t\tworker = new Worker(scriptUrl, workerOptions);\n\t}\n\tworker.addEventListener(MESSAGE_EVENT_TYPE, event => onMessage(event, workerData));\n\treturn worker;\n}\n\nfunction sendMessage(message, { worker, writer, onTaskFinished, transferStreams }) {\n\ttry {\n\t\tlet { value, readable, writable } = message;\n\t\tconst transferables = [];\n\t\tif (value) {\n\t\t\tconst { buffer, length } = value;\n\t\t\tif (length != buffer.byteLength) {\n\t\t\t\tvalue = new Uint8Array(value);\n\t\t\t}\n\t\t\tmessage.value = value.buffer;\n\t\t\ttransferables.push(message.value);\n\t\t}\n\t\tif (transferStreams && transferStreamsSupported) {\n\t\t\tif (readable) {\n\t\t\t\ttransferables.push(readable);\n\t\t\t}\n\t\t\tif (writable) {\n\t\t\t\ttransferables.push(writable);\n\t\t\t}\n\t\t} else {\n\t\t\tmessage.readable = message.writable = null;\n\t\t}\n\t\tif (transferables.length) {\n\t\t\ttry {\n\t\t\t\tworker.postMessage(message, transferables);\n\t\t\t\treturn true;\n\t\t\t} catch (_error) {\n\t\t\t\ttransferStreamsSupported = false;\n\t\t\t\tmessage.readable = message.writable = null;\n\t\t\t\tworker.postMessage(message);\n\t\t\t}\n\t\t} else {\n\t\t\tworker.postMessage(message);\n\t\t}\n\t} catch (error) {\n\t\tif (writer) {\n\t\t\twriter.releaseLock();\n\t\t}\n\t\tonTaskFinished();\n\t\tthrow error;\n\t}\n}\n\nasync function onMessage({ data }, workerData) {\n\tconst { type, value, messageId, result, error } = data;\n\tconst { reader, writer, resolveResult, rejectResult, onTaskFinished } = workerData;\n\ttry {\n\t\tif (error) {\n\t\t\tconst { message, stack, code, name } = error;\n\t\t\tconst responseError = new Error(message);\n\t\t\tObject.assign(responseError, { stack, code, name });\n\t\t\tclose(responseError);\n\t\t} else {\n\t\t\tif (type == MESSAGE_PULL) {\n\t\t\t\tconst { value, done } = await reader.read();\n\t\t\t\tsendMessage({ type: MESSAGE_DATA, value, done, messageId }, workerData);\n\t\t\t}\n\t\t\tif (type == MESSAGE_DATA) {\n\t\t\t\tawait writer.ready;\n\t\t\t\tawait writer.write(new Uint8Array(value));\n\t\t\t\tsendMessage({ type: MESSAGE_ACK_DATA, messageId }, workerData);\n\t\t\t}\n\t\t\tif (type == MESSAGE_CLOSE) {\n\t\t\t\tclose(null, result);\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tclose(error);\n\t}\n\n\tfunction close(error, result) {\n\t\tif (error) {\n\t\t\trejectResult(error);\n\t\t} else {\n\t\t\tresolveResult(result);\n\t\t}\n\t\tif (writer) {\n\t\t\twriter.releaseLock();\n\t\t}\n\t\tonTaskFinished();\n\t}\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global setTimeout, clearTimeout */\n\nimport { UNDEFINED_VALUE } from \"./constants.js\";\nimport {\n\tCODEC_INFLATE,\n\tCODEC_DEFLATE,\n\tERR_INVALID_SIGNATURE,\n\tERR_INVALID_PASSWORD,\n\tERR_ABORT_CHECK_PASSWORD\n} from \"./streams/codec-stream.js\";\nimport { CodecWorker } from \"./codec-worker.js\";\n\nlet pool = [];\nconst pendingRequests = [];\n\nexport {\n\trunWorker,\n\tterminateWorkers,\n\tCODEC_DEFLATE,\n\tCODEC_INFLATE,\n\tERR_INVALID_SIGNATURE,\n\tERR_INVALID_PASSWORD,\n\tERR_ABORT_CHECK_PASSWORD\n};\n\nlet indexWorker = 0;\n\nasync function runWorker(stream, workerOptions) {\n\tconst { options, config } = workerOptions;\n\tconst { transferStreams, useWebWorkers, useCompressionStream, codecType, compressed, signed, encrypted } = options;\n\tconst { workerScripts, maxWorkers, terminateWorkerTimeout } = config;\n\tworkerOptions.transferStreams = transferStreams || transferStreams === UNDEFINED_VALUE;\n\tconst streamCopy = !compressed && !signed && !encrypted && !workerOptions.transferStreams;\n\tworkerOptions.useWebWorkers = !streamCopy && (useWebWorkers || (useWebWorkers === UNDEFINED_VALUE && config.useWebWorkers));\n\tworkerOptions.scripts = workerOptions.useWebWorkers && workerScripts ? workerScripts[codecType] : [];\n\toptions.useCompressionStream = useCompressionStream || (useCompressionStream === UNDEFINED_VALUE && config.useCompressionStream);\n\tlet worker;\n\tconst workerData = pool.find(workerData => !workerData.busy);\n\tif (workerData) {\n\t\tclearTerminateTimeout(workerData);\n\t\tworker = new CodecWorker(workerData, stream, workerOptions, onTaskFinished);\n\t} else if (pool.length < maxWorkers) {\n\t\tconst workerData = { indexWorker };\n\t\tindexWorker++;\n\t\tpool.push(workerData);\n\t\tworker = new CodecWorker(workerData, stream, workerOptions, onTaskFinished);\n\t} else {\n\t\tworker = await new Promise(resolve => pendingRequests.push({ resolve, stream, workerOptions }));\n\t}\n\treturn worker.run();\n\n\tfunction onTaskFinished(workerData) {\n\t\tif (pendingRequests.length) {\n\t\t\tconst [{ resolve, stream, workerOptions }] = pendingRequests.splice(0, 1);\n\t\t\tresolve(new CodecWorker(workerData, stream, workerOptions, onTaskFinished));\n\t\t} else if (workerData.worker) {\n\t\t\tclearTerminateTimeout(workerData);\n\t\t\tif (Number.isFinite(terminateWorkerTimeout) && terminateWorkerTimeout >= 0) {\n\t\t\t\tworkerData.terminateTimeout = setTimeout(() => {\n\t\t\t\t\tpool = pool.filter(data => data != workerData);\n\t\t\t\t\tworkerData.terminate();\n\t\t\t\t}, terminateWorkerTimeout);\n\t\t\t}\n\t\t} else {\n\t\t\tpool = pool.filter(data => data != workerData);\n\t\t}\n\t}\n}\n\nfunction clearTerminateTimeout(workerData) {\n\tconst { terminateTimeout } = workerData;\n\tif (terminateTimeout) {\n\t\tclearTimeout(terminateTimeout);\n\t\tworkerData.terminateTimeout = null;\n\t}\n}\n\nfunction terminateWorkers() {\n\tpool.forEach(workerData => {\n\t\tclearTerminateTimeout(workerData);\n\t\tworkerData.terminate();\n\t});\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global Blob, atob, btoa, XMLHttpRequest, URL, fetch, ReadableStream, WritableStream, FileReader, TransformStream, Response */\n// deno-lint-ignore-file no-this-alias\n\nimport {\n\tUNDEFINED_VALUE,\n\tFUNCTION_TYPE\n} from \"./constants.js\";\nimport { getConfiguration } from \"./configuration.js\";\n\nconst ERR_HTTP_STATUS = \"HTTP error \";\nconst ERR_HTTP_RANGE = \"HTTP Range not supported\";\nconst ERR_ITERATOR_COMPLETED_TOO_SOON = \"Writer iterator completed too soon\";\n\nconst CONTENT_TYPE_TEXT_PLAIN = \"text/plain\";\nconst HTTP_HEADER_CONTENT_LENGTH = \"Content-Length\";\nconst HTTP_HEADER_CONTENT_RANGE = \"Content-Range\";\nconst HTTP_HEADER_ACCEPT_RANGES = \"Accept-Ranges\";\nconst HTTP_HEADER_RANGE = \"Range\";\nconst HTTP_HEADER_CONTENT_TYPE = \"Content-Type\";\nconst HTTP_METHOD_HEAD = \"HEAD\";\nconst HTTP_METHOD_GET = \"GET\";\nconst HTTP_RANGE_UNIT = \"bytes\";\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\n\nconst PROPERTY_NAME_WRITABLE = \"writable\";\n\nclass Stream {\n\n\tconstructor() {\n\t\tthis.size = 0;\n\t}\n\n\tinit() {\n\t\tthis.initialized = true;\n\t}\n}\n\nclass Reader extends Stream {\n\n\tget readable() {\n\t\tconst reader = this;\n\t\tconst { chunkSize = DEFAULT_CHUNK_SIZE } = reader;\n\t\tconst readable = new ReadableStream({\n\t\t\tstart() {\n\t\t\t\tthis.chunkOffset = 0;\n\t\t\t},\n\t\t\tasync pull(controller) {\n\t\t\t\tconst { offset = 0, size, diskNumberStart } = readable;\n\t\t\t\tconst { chunkOffset } = this;\n\t\t\t\tcontroller.enqueue(await readUint8Array(reader, offset + chunkOffset, Math.min(chunkSize, size - chunkOffset), diskNumberStart));\n\t\t\t\tif (chunkOffset + chunkSize > size) {\n\t\t\t\t\tcontroller.close();\n\t\t\t\t} else {\n\t\t\t\t\tthis.chunkOffset += chunkSize;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn readable;\n\t}\n}\n\nclass Writer extends Stream {\n\n\tconstructor() {\n\t\tsuper();\n\t\tconst writer = this;\n\t\tconst writable = new WritableStream({\n\t\t\twrite(chunk) {\n\t\t\t\treturn writer.writeUint8Array(chunk);\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(writer, PROPERTY_NAME_WRITABLE, {\n\t\t\tget() {\n\t\t\t\treturn writable;\n\t\t\t}\n\t\t});\n\t}\n\n\twriteUint8Array() {\n\t\t// abstract\n\t}\n}\n\nclass Data64URIReader extends Reader {\n\n\tconstructor(dataURI) {\n\t\tsuper();\n\t\tlet dataEnd = dataURI.length;\n\t\twhile (dataURI.charAt(dataEnd - 1) == \"=\") {\n\t\t\tdataEnd--;\n\t\t}\n\t\tconst dataStart = dataURI.indexOf(\",\") + 1;\n\t\tObject.assign(this, {\n\t\t\tdataURI,\n\t\t\tdataStart,\n\t\t\tsize: Math.floor((dataEnd - dataStart) * 0.75)\n\t\t});\n\t}\n\n\treadUint8Array(offset, length) {\n\t\tconst {\n\t\t\tdataStart,\n\t\t\tdataURI\n\t\t} = this;\n\t\tconst dataArray = new Uint8Array(length);\n\t\tconst start = Math.floor(offset / 3) * 4;\n\t\tconst bytes = atob(dataURI.substring(start + dataStart, Math.ceil((offset + length) / 3) * 4 + dataStart));\n\t\tconst delta = offset - Math.floor(start / 4) * 3;\n\t\tfor (let indexByte = delta; indexByte < delta + length; indexByte++) {\n\t\t\tdataArray[indexByte - delta] = bytes.charCodeAt(indexByte);\n\t\t}\n\t\treturn dataArray;\n\t}\n}\n\nclass Data64URIWriter extends Writer {\n\n\tconstructor(contentType) {\n\t\tsuper();\n\t\tObject.assign(this, {\n\t\t\tdata: \"data:\" + (contentType || \"\") + \";base64,\",\n\t\t\tpending: []\n\t\t});\n\t}\n\n\twriteUint8Array(array) {\n\t\tconst writer = this;\n\t\tlet indexArray = 0;\n\t\tlet dataString = writer.pending;\n\t\tconst delta = writer.pending.length;\n\t\twriter.pending = \"\";\n\t\tfor (indexArray = 0; indexArray < (Math.floor((delta + array.length) / 3) * 3) - delta; indexArray++) {\n\t\t\tdataString += String.fromCharCode(array[indexArray]);\n\t\t}\n\t\tfor (; indexArray < array.length; indexArray++) {\n\t\t\twriter.pending += String.fromCharCode(array[indexArray]);\n\t\t}\n\t\tif (dataString.length > 2) {\n\t\t\twriter.data += btoa(dataString);\n\t\t} else {\n\t\t\twriter.pending = dataString;\n\t\t}\n\t}\n\n\tgetData() {\n\t\treturn this.data + btoa(this.pending);\n\t}\n}\n\nclass BlobReader extends Reader {\n\n\tconstructor(blob) {\n\t\tsuper();\n\t\tObject.assign(this, {\n\t\t\tblob,\n\t\t\tsize: blob.size\n\t\t});\n\t}\n\n\tasync readUint8Array(offset, length) {\n\t\tconst reader = this;\n\t\tconst offsetEnd = offset + length;\n\t\tconst blob = offset || offsetEnd < reader.size ? reader.blob.slice(offset, offsetEnd) : reader.blob;\n\t\treturn new Uint8Array(await blob.arrayBuffer());\n\t}\n}\n\nclass BlobWriter extends Stream {\n\n\tconstructor(contentType) {\n\t\tsuper();\n\t\tconst writer = this;\n\t\tconst transformStream = new TransformStream();\n\t\tconst headers = [];\n\t\tif (contentType) {\n\t\t\theaders.push([HTTP_HEADER_CONTENT_TYPE, contentType]);\n\t\t}\n\t\tObject.defineProperty(writer, PROPERTY_NAME_WRITABLE, {\n\t\t\tget() {\n\t\t\t\treturn transformStream.writable;\n\t\t\t}\n\t\t});\n\t\twriter.blob = new Response(transformStream.readable, { headers }).blob();\n\t}\n\n\tgetData() {\n\t\treturn this.blob;\n\t}\n}\n\nclass TextReader extends BlobReader {\n\n\tconstructor(text) {\n\t\tsuper(new Blob([text], { type: CONTENT_TYPE_TEXT_PLAIN }));\n\t}\n}\n\nclass TextWriter extends BlobWriter {\n\n\tconstructor(encoding) {\n\t\tsuper(encoding);\n\t\tObject.assign(this, {\n\t\t\tencoding,\n\t\t\tutf8: !encoding || encoding.toLowerCase() == \"utf-8\"\n\t\t});\n\t}\n\n\tasync getData() {\n\t\tconst {\n\t\t\tencoding,\n\t\t\tutf8\n\t\t} = this;\n\t\tconst blob = await super.getData();\n\t\tif (blob.text && utf8) {\n\t\t\treturn blob.text();\n\t\t} else {\n\t\t\tconst reader = new FileReader();\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tObject.assign(reader, {\n\t\t\t\t\tonload: ({ target }) => resolve(target.result),\n\t\t\t\t\tonerror: () => reject(reader.error)\n\t\t\t\t});\n\t\t\t\treader.readAsText(blob, encoding);\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass FetchReader extends Reader {\n\n\tconstructor(url, options) {\n\t\tsuper();\n\t\tcreateHtpReader(this, url, options);\n\t}\n\n\tasync init() {\n\t\tawait initHttpReader(this, sendFetchRequest, getFetchRequestData);\n\t\tsuper.init();\n\t}\n\n\treadUint8Array(index, length) {\n\t\treturn readUint8ArrayHttpReader(this, index, length, sendFetchRequest, getFetchRequestData);\n\t}\n}\n\nclass XHRReader extends Reader {\n\n\tconstructor(url, options) {\n\t\tsuper();\n\t\tcreateHtpReader(this, url, options);\n\t}\n\n\tasync init() {\n\t\tawait initHttpReader(this, sendXMLHttpRequest, getXMLHttpRequestData);\n\t\tsuper.init();\n\t}\n\n\treadUint8Array(index, length) {\n\t\treturn readUint8ArrayHttpReader(this, index, length, sendXMLHttpRequest, getXMLHttpRequestData);\n\t}\n}\n\nfunction createHtpReader(httpReader, url, options) {\n\tconst {\n\t\tpreventHeadRequest,\n\t\tuseRangeHeader,\n\t\tforceRangeRequests\n\t} = options;\n\toptions = Object.assign({}, options);\n\tdelete options.preventHeadRequest;\n\tdelete options.useRangeHeader;\n\tdelete options.forceRangeRequests;\n\tdelete options.useXHR;\n\tObject.assign(httpReader, {\n\t\turl,\n\t\toptions,\n\t\tpreventHeadRequest,\n\t\tuseRangeHeader,\n\t\tforceRangeRequests\n\t});\n}\n\nasync function initHttpReader(httpReader, sendRequest, getRequestData) {\n\tconst {\n\t\turl,\n\t\tuseRangeHeader,\n\t\tforceRangeRequests\n\t} = httpReader;\n\tif (isHttpFamily(url) && (useRangeHeader || forceRangeRequests)) {\n\t\tconst { headers } = await sendRequest(HTTP_METHOD_GET, httpReader, getRangeHeaders(httpReader));\n\t\tif (!forceRangeRequests && headers.get(HTTP_HEADER_ACCEPT_RANGES) != HTTP_RANGE_UNIT) {\n\t\t\tthrow new Error(ERR_HTTP_RANGE);\n\t\t} else {\n\t\t\tlet contentSize;\n\t\t\tconst contentRangeHeader = headers.get(HTTP_HEADER_CONTENT_RANGE);\n\t\t\tif (contentRangeHeader) {\n\t\t\t\tconst splitHeader = contentRangeHeader.trim().split(/\\s*\\/\\s*/);\n\t\t\t\tif (splitHeader.length) {\n\t\t\t\t\tconst headerValue = splitHeader[1];\n\t\t\t\t\tif (headerValue && headerValue != \"*\") {\n\t\t\t\t\t\tcontentSize = Number(headerValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (contentSize === UNDEFINED_VALUE) {\n\t\t\t\tawait getContentLength(httpReader, sendRequest, getRequestData);\n\t\t\t} else {\n\t\t\t\thttpReader.size = contentSize;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tawait getContentLength(httpReader, sendRequest, getRequestData);\n\t}\n}\n\nasync function readUint8ArrayHttpReader(httpReader, index, length, sendRequest, getRequestData) {\n\tconst {\n\t\tuseRangeHeader,\n\t\tforceRangeRequests,\n\t\toptions\n\t} = httpReader;\n\tif (useRangeHeader || forceRangeRequests) {\n\t\tconst response = await sendRequest(HTTP_METHOD_GET, httpReader, getRangeHeaders(httpReader, index, length));\n\t\tif (response.status != 206) {\n\t\t\tthrow new Error(ERR_HTTP_RANGE);\n\t\t}\n\t\treturn new Uint8Array(await response.arrayBuffer());\n\t} else {\n\t\tconst { data } = httpReader;\n\t\tif (!data) {\n\t\t\tawait getRequestData(httpReader, options);\n\t\t}\n\t\treturn new Uint8Array(httpReader.data.subarray(index, index + length));\n\t}\n}\n\nfunction getRangeHeaders(httpReader, index = 0, length = 1) {\n\treturn Object.assign({}, getHeaders(httpReader), { [HTTP_HEADER_RANGE]: HTTP_RANGE_UNIT + \"=\" + index + \"-\" + (index + length - 1) });\n}\n\nfunction getHeaders({ options }) {\n\tconst { headers } = options;\n\tif (headers) {\n\t\tif (Symbol.iterator in headers) {\n\t\t\treturn Object.fromEntries(headers);\n\t\t} else {\n\t\t\treturn headers;\n\t\t}\n\t}\n}\n\nasync function getFetchRequestData(httpReader) {\n\tawait getRequestData(httpReader, sendFetchRequest);\n}\n\nasync function getXMLHttpRequestData(httpReader) {\n\tawait getRequestData(httpReader, sendXMLHttpRequest);\n}\n\nasync function getRequestData(httpReader, sendRequest) {\n\tconst response = await sendRequest(HTTP_METHOD_GET, httpReader, getHeaders(httpReader));\n\thttpReader.data = new Uint8Array(await response.arrayBuffer());\n\tif (!httpReader.size) {\n\t\thttpReader.size = httpReader.data.length;\n\t}\n}\n\nasync function getContentLength(httpReader, sendRequest, getRequestData) {\n\tif (httpReader.preventHeadRequest) {\n\t\tawait getRequestData(httpReader, httpReader.options);\n\t} else {\n\t\tconst response = await sendRequest(HTTP_METHOD_HEAD, httpReader, getHeaders(httpReader));\n\t\tconst contentLength = response.headers.get(HTTP_HEADER_CONTENT_LENGTH);\n\t\tif (contentLength) {\n\t\t\thttpReader.size = Number(contentLength);\n\t\t} else {\n\t\t\tawait getRequestData(httpReader, httpReader.options);\n\t\t}\n\t}\n}\n\nasync function sendFetchRequest(method, { options, url }, headers) {\n\tconst response = await fetch(url, Object.assign({}, options, { method, headers }));\n\tif (response.status < 400) {\n\t\treturn response;\n\t} else {\n\t\tthrow response.status == 416 ? new Error(ERR_HTTP_RANGE) : new Error(ERR_HTTP_STATUS + (response.statusText || response.status));\n\t}\n}\n\nfunction sendXMLHttpRequest(method, { url }, headers) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.addEventListener(\"load\", () => {\n\t\t\tif (request.status < 400) {\n\t\t\t\tconst headers = [];\n\t\t\t\trequest.getAllResponseHeaders().trim().split(/[\\r\\n]+/).forEach(header => {\n\t\t\t\t\tconst splitHeader = header.trim().split(/\\s*:\\s*/);\n\t\t\t\t\tsplitHeader[0] = splitHeader[0].trim().replace(/^[a-z]|-[a-z]/g, value => value.toUpperCase());\n\t\t\t\t\theaders.push(splitHeader);\n\t\t\t\t});\n\t\t\t\tresolve({\n\t\t\t\t\tstatus: request.status,\n\t\t\t\t\tarrayBuffer: () => request.response,\n\t\t\t\t\theaders: new Map(headers)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treject(request.status == 416 ? new Error(ERR_HTTP_RANGE) : new Error(ERR_HTTP_STATUS + (request.statusText || request.status)));\n\t\t\t}\n\t\t}, false);\n\t\trequest.addEventListener(\"error\", event => reject(event.detail.error), false);\n\t\trequest.open(method, url);\n\t\tif (headers) {\n\t\t\tfor (const entry of Object.entries(headers)) {\n\t\t\t\trequest.setRequestHeader(entry[0], entry[1]);\n\t\t\t}\n\t\t}\n\t\trequest.responseType = \"arraybuffer\";\n\t\trequest.send();\n\t});\n}\n\nclass HttpReader extends Reader {\n\n\tconstructor(url, options = {}) {\n\t\tsuper();\n\t\tObject.assign(this, {\n\t\t\turl,\n\t\t\treader: options.useXHR ? new XHRReader(url, options) : new FetchReader(url, options)\n\t\t});\n\t}\n\n\tset size(value) {\n\t\t// ignored\n\t}\n\n\tget size() {\n\t\treturn this.reader.size;\n\t}\n\n\tasync init() {\n\t\tawait this.reader.init();\n\t\tsuper.init();\n\t}\n\n\treadUint8Array(index, length) {\n\t\treturn this.reader.readUint8Array(index, length);\n\t}\n}\n\nclass HttpRangeReader extends HttpReader {\n\n\tconstructor(url, options = {}) {\n\t\toptions.useRangeHeader = true;\n\t\tsuper(url, options);\n\t}\n}\n\n\nclass Uint8ArrayReader extends Reader {\n\n\tconstructor(array) {\n\t\tsuper();\n\t\tObject.assign(this, {\n\t\t\tarray,\n\t\t\tsize: array.length\n\t\t});\n\t}\n\n\treadUint8Array(index, length) {\n\t\treturn this.array.slice(index, index + length);\n\t}\n}\n\nclass Uint8ArrayWriter extends Writer {\n\n\tinit(initSize = 0) {\n\t\tObject.assign(this, {\n\t\t\toffset: 0,\n\t\t\tarray: new Uint8Array(initSize)\n\t\t});\n\t\tsuper.init();\n\t}\n\n\twriteUint8Array(array) {\n\t\tconst writer = this;\n\t\tif (writer.offset + array.length > writer.array.length) {\n\t\t\tconst previousArray = writer.array;\n\t\t\twriter.array = new Uint8Array(previousArray.length + array.length);\n\t\t\twriter.array.set(previousArray);\n\t\t}\n\t\twriter.array.set(array, writer.offset);\n\t\twriter.offset += array.length;\n\t}\n\n\tgetData() {\n\t\treturn this.array;\n\t}\n}\n\nclass SplitDataReader extends Reader {\n\n\tconstructor(readers) {\n\t\tsuper();\n\t\tthis.readers = readers;\n\t}\n\n\tasync init() {\n\t\tconst reader = this;\n\t\tconst { readers } = reader;\n\t\treader.lastDiskNumber = 0;\n\t\tawait Promise.all(readers.map(async diskReader => {\n\t\t\tawait diskReader.init();\n\t\t\treader.size += diskReader.size;\n\t\t}));\n\t\tsuper.init();\n\t}\n\n\tasync readUint8Array(offset, length, diskNumber = 0) {\n\t\tconst reader = this;\n\t\tconst { readers } = this;\n\t\tlet result;\n\t\tlet currentDiskNumber = diskNumber;\n\t\tif (currentDiskNumber == -1) {\n\t\t\tcurrentDiskNumber = readers.length - 1;\n\t\t}\n\t\tlet currentReaderOffset = offset;\n\t\twhile (currentReaderOffset >= readers[currentDiskNumber].size) {\n\t\t\tcurrentReaderOffset -= readers[currentDiskNumber].size;\n\t\t\tcurrentDiskNumber++;\n\t\t}\n\t\tconst currentReader = readers[currentDiskNumber];\n\t\tconst currentReaderSize = currentReader.size;\n\t\tif (currentReaderOffset + length <= currentReaderSize) {\n\t\t\tresult = await readUint8Array(currentReader, currentReaderOffset, length);\n\t\t} else {\n\t\t\tconst chunkLength = currentReaderSize - currentReaderOffset;\n\t\t\tresult = new Uint8Array(length);\n\t\t\tresult.set(await readUint8Array(currentReader, currentReaderOffset, chunkLength));\n\t\t\tresult.set(await reader.readUint8Array(offset + chunkLength, length - chunkLength, diskNumber), chunkLength);\n\t\t}\n\t\treader.lastDiskNumber = Math.max(currentDiskNumber, reader.lastDiskNumber);\n\t\treturn result;\n\t}\n}\n\nclass SplitDataWriter extends Stream {\n\n\tconstructor(writerGenerator, maxSize = 4294967295) {\n\t\tsuper();\n\t\tconst zipWriter = this;\n\t\tObject.assign(zipWriter, {\n\t\t\tdiskNumber: 0,\n\t\t\tdiskOffset: 0,\n\t\t\tsize: 0,\n\t\t\tmaxSize,\n\t\t\tavailableSize: maxSize\n\t\t});\n\t\tlet diskSourceWriter, diskWritable, diskWriter;\n\t\tconst writable = new WritableStream({\n\t\t\tasync write(chunk) {\n\t\t\t\tconst { availableSize } = zipWriter;\n\t\t\t\tif (!diskWriter) {\n\t\t\t\t\tconst { value, done } = await writerGenerator.next();\n\t\t\t\t\tif (done && !value) {\n\t\t\t\t\t\tthrow new Error(ERR_ITERATOR_COMPLETED_TOO_SOON);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdiskSourceWriter = value;\n\t\t\t\t\t\tdiskSourceWriter.size = 0;\n\t\t\t\t\t\tif (diskSourceWriter.maxSize) {\n\t\t\t\t\t\t\tzipWriter.maxSize = diskSourceWriter.maxSize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tzipWriter.availableSize = zipWriter.maxSize;\n\t\t\t\t\t\tawait initStream(diskSourceWriter);\n\t\t\t\t\t\tdiskWritable = value.writable;\n\t\t\t\t\t\tdiskWriter = diskWritable.getWriter();\n\t\t\t\t\t}\n\t\t\t\t\tawait this.write(chunk);\n\t\t\t\t} else if (chunk.length >= availableSize) {\n\t\t\t\t\tawait writeChunk(chunk.slice(0, availableSize));\n\t\t\t\t\tawait closeDisk();\n\t\t\t\t\tzipWriter.diskOffset += diskSourceWriter.size;\n\t\t\t\t\tzipWriter.diskNumber++;\n\t\t\t\t\tdiskWriter = null;\n\t\t\t\t\tawait this.write(chunk.slice(availableSize));\n\t\t\t\t} else {\n\t\t\t\t\tawait writeChunk(chunk);\n\t\t\t\t}\n\t\t\t},\n\t\t\tasync close() {\n\t\t\t\tawait diskWriter.ready;\n\t\t\t\tawait closeDisk();\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(zipWriter, PROPERTY_NAME_WRITABLE, {\n\t\t\tget() {\n\t\t\t\treturn writable;\n\t\t\t}\n\t\t});\n\n\t\tasync function writeChunk(chunk) {\n\t\t\tconst chunkLength = chunk.length;\n\t\t\tif (chunkLength) {\n\t\t\t\tawait diskWriter.ready;\n\t\t\t\tawait diskWriter.write(chunk);\n\t\t\t\tdiskSourceWriter.size += chunkLength;\n\t\t\t\tzipWriter.size += chunkLength;\n\t\t\t\tzipWriter.availableSize -= chunkLength;\n\t\t\t}\n\t\t}\n\n\t\tasync function closeDisk() {\n\t\t\tdiskWritable.size = diskSourceWriter.size;\n\t\t\tawait diskWriter.close();\n\t\t}\n\t}\n}\n\nfunction isHttpFamily(url) {\n\tconst { baseURL } = getConfiguration();\n\tconst { protocol } = new URL(url, baseURL);\n\treturn protocol == \"http:\" || protocol == \"https:\";\n}\n\nasync function initStream(stream, initSize) {\n\tif (stream.init && !stream.initialized) {\n\t\tawait stream.init(initSize);\n\t}\n}\n\nfunction initReader(reader) {\n\tif (Array.isArray(reader)) {\n\t\treader = new SplitDataReader(reader);\n\t}\n\tif (reader instanceof ReadableStream) {\n\t\treader = {\n\t\t\treadable: reader\n\t\t};\n\t}\n\treturn reader;\n}\n\nfunction initWriter(writer) {\n\tif (writer.writable === UNDEFINED_VALUE && typeof writer.next == FUNCTION_TYPE) {\n\t\twriter = new SplitDataWriter(writer);\n\t}\n\tif (writer instanceof WritableStream) {\n\t\twriter = {\n\t\t\twritable: writer\n\t\t};\n\t}\n\tconst { writable } = writer;\n\tif (writable.size === UNDEFINED_VALUE) {\n\t\twritable.size = 0;\n\t}\n\tconst splitZipFile = writer instanceof SplitDataWriter;\n\tif (!splitZipFile) {\n\t\tObject.assign(writer, {\n\t\t\tdiskNumber: 0,\n\t\t\tdiskOffset: 0,\n\t\t\tavailableSize: Infinity,\n\t\t\tmaxSize: Infinity\n\t\t});\n\t}\n\treturn writer;\n}\n\nfunction readUint8Array(reader, offset, size, diskNumber) {\n\treturn reader.readUint8Array(offset, size, diskNumber);\n}\n\nconst SplitZipReader = SplitDataReader;\nconst SplitZipWriter = SplitDataWriter;\n\nexport {\n\tinitStream,\n\tinitReader,\n\tinitWriter,\n\treadUint8Array,\n\tReader,\n\tWriter,\n\tTextReader,\n\tTextWriter,\n\tData64URIReader,\n\tData64URIWriter,\n\tBlobReader,\n\tBlobWriter,\n\tUint8ArrayReader,\n\tUint8ArrayWriter,\n\tHttpReader,\n\tHttpRangeReader,\n\tSplitZipReader,\n\tSplitZipWriter,\n\tSplitDataReader,\n\tSplitDataWriter,\n\tERR_HTTP_RANGE,\n\tERR_ITERATOR_COMPLETED_TOO_SOON\n};","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TextDecoder */\n\nconst CP437 = \"\\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \".split(\"\");\nconst VALID_CP437 = CP437.length == 256;\n\nexport {\n\tdecodeCP437\n};\n\nfunction decodeCP437(stringValue) {\n\tif (VALID_CP437) {\n\t\tlet result = \"\";\n\t\tfor (let indexCharacter = 0; indexCharacter < stringValue.length; indexCharacter++) {\n\t\t\tresult += CP437[stringValue[indexCharacter]];\n\t\t}\n\t\treturn result;\n\t} else {\n\t\treturn new TextDecoder().decode(stringValue);\n\t}\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global TextDecoder */\n\nimport { decodeCP437 } from \"./cp437-decode.js\";\n\nexport {\n\tdecodeText\n};\n\nfunction decodeText(value, encoding) {\n\tif (encoding && encoding.trim().toLowerCase() == \"cp437\") {\n\t\treturn decodeCP437(value);\n\t} else {\n\t\treturn new TextDecoder(encoding).decode(value);\n\t}\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst PROPERTY_NAME_FILENAME = \"filename\";\nconst PROPERTY_NAME_RAW_FILENAME = \"rawFilename\";\nconst PROPERTY_NAME_COMMENT = \"comment\";\nconst PROPERTY_NAME_RAW_COMMENT = \"rawComment\";\nconst PROPERTY_NAME_UNCOMPPRESSED_SIZE = \"uncompressedSize\";\nconst PROPERTY_NAME_COMPPRESSED_SIZE = \"compressedSize\";\nconst PROPERTY_NAME_OFFSET = \"offset\";\nconst PROPERTY_NAME_DISK_NUMBER_START = \"diskNumberStart\";\nconst PROPERTY_NAME_LAST_MODIFICATION_DATE = \"lastModDate\";\nconst PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE = \"rawLastModDate\";\nconst PROPERTY_NAME_LAST_ACCESS_DATE = \"lastAccessDate\";\nconst PROPERTY_NAME_RAW_LAST_ACCESS_DATE = \"rawLastAccessDate\";\nconst PROPERTY_NAME_CREATION_DATE = \"creationDate\";\nconst PROPERTY_NAME_RAW_CREATION_DATE = \"rawCreationDate\";\nconst PROPERTY_NAME_INTERNAL_FILE_ATTRIBUTE = \"internalFileAttribute\";\nconst PROPERTY_NAME_EXTERNAL_FILE_ATTRIBUTE = \"externalFileAttribute\";\nconst PROPERTY_NAME_MS_DOS_COMPATIBLE = \"msDosCompatible\";\nconst PROPERTY_NAME_ZIP64 = \"zip64\";\n\nconst PROPERTY_NAMES = [\n\tPROPERTY_NAME_FILENAME, PROPERTY_NAME_RAW_FILENAME, PROPERTY_NAME_COMPPRESSED_SIZE, PROPERTY_NAME_UNCOMPPRESSED_SIZE,\n\tPROPERTY_NAME_LAST_MODIFICATION_DATE, PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE, PROPERTY_NAME_COMMENT, PROPERTY_NAME_RAW_COMMENT,\n\tPROPERTY_NAME_LAST_ACCESS_DATE, PROPERTY_NAME_CREATION_DATE, PROPERTY_NAME_OFFSET, PROPERTY_NAME_DISK_NUMBER_START,\n\tPROPERTY_NAME_DISK_NUMBER_START, PROPERTY_NAME_INTERNAL_FILE_ATTRIBUTE, PROPERTY_NAME_EXTERNAL_FILE_ATTRIBUTE,\n\tPROPERTY_NAME_MS_DOS_COMPATIBLE, PROPERTY_NAME_ZIP64,\n\t\"directory\", \"bitFlag\", \"encrypted\", \"signature\", \"filenameUTF8\", \"commentUTF8\", \"compressionMethod\", \"version\", \"versionMadeBy\",\n\t\"extraField\", \"rawExtraField\", \"extraFieldZip64\", \"extraFieldUnicodePath\", \"extraFieldUnicodeComment\", \"extraFieldAES\", \"extraFieldNTFS\",\n\t\"extraFieldExtendedTimestamp\"];\n\nclass Entry {\n\n\tconstructor(data) {\n\t\tPROPERTY_NAMES.forEach(name => this[name] = data[name]);\n\t}\n\n}\n\nexport {\n\tPROPERTY_NAME_FILENAME,\n\tPROPERTY_NAME_RAW_FILENAME,\n\tPROPERTY_NAME_COMMENT,\n\tPROPERTY_NAME_RAW_COMMENT,\n\tPROPERTY_NAME_UNCOMPPRESSED_SIZE,\n\tPROPERTY_NAME_COMPPRESSED_SIZE,\n\tPROPERTY_NAME_OFFSET,\n\tPROPERTY_NAME_DISK_NUMBER_START,\n\tPROPERTY_NAME_LAST_MODIFICATION_DATE,\n\tPROPERTY_NAME_RAW_LAST_MODIFICATION_DATE,\n\tPROPERTY_NAME_LAST_ACCESS_DATE,\n\tPROPERTY_NAME_RAW_LAST_ACCESS_DATE,\n\tPROPERTY_NAME_CREATION_DATE,\n\tPROPERTY_NAME_RAW_CREATION_DATE,\n\tPROPERTY_NAME_INTERNAL_FILE_ATTRIBUTE,\n\tPROPERTY_NAME_EXTERNAL_FILE_ATTRIBUTE,\n\tPROPERTY_NAME_MS_DOS_COMPATIBLE,\n\tPROPERTY_NAME_ZIP64,\n\tEntry\n};","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global BigInt, Response, WritableStream */\n// deno-lint-ignore-file no-this-alias\n\nimport {\n\tMAX_32_BITS,\n\tMAX_16_BITS,\n\tCOMPRESSION_METHOD_DEFLATE,\n\tCOMPRESSION_METHOD_STORE,\n\tCOMPRESSION_METHOD_AES,\n\tSPLIT_ZIP_FILE_SIGNATURE,\n\tLOCAL_FILE_HEADER_SIGNATURE,\n\tCENTRAL_FILE_HEADER_SIGNATURE,\n\tEND_OF_CENTRAL_DIR_SIGNATURE,\n\tZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE,\n\tZIP64_END_OF_CENTRAL_DIR_SIGNATURE,\n\tEXTRAFIELD_TYPE_ZIP64,\n\tEXTRAFIELD_TYPE_UNICODE_PATH,\n\tEXTRAFIELD_TYPE_UNICODE_COMMENT,\n\tEXTRAFIELD_TYPE_AES,\n\tEXTRAFIELD_TYPE_NTFS,\n\tEXTRAFIELD_TYPE_NTFS_TAG1,\n\tEXTRAFIELD_TYPE_EXTENDED_TIMESTAMP,\n\tEND_OF_CENTRAL_DIR_LENGTH,\n\tZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH,\n\tZIP64_END_OF_CENTRAL_DIR_LENGTH,\n\tBITFLAG_ENCRYPTED,\n\tBITFLAG_LEVEL,\n\tBITFLAG_DATA_DESCRIPTOR,\n\tBITFLAG_LANG_ENCODING_FLAG,\n\tFILE_ATTR_MSDOS_DIR_MASK,\n\tDIRECTORY_SIGNATURE,\n\tUNDEFINED_VALUE\n} from \"./constants.js\";\nimport {\n\tgetConfiguration,\n\tgetChunkSize\n} from \"./configuration.js\";\nimport {\n\trunWorker,\n\tCODEC_INFLATE,\n\tERR_INVALID_SIGNATURE,\n\tERR_INVALID_PASSWORD,\n\tERR_ABORT_CHECK_PASSWORD\n} from \"./codec-pool.js\";\nimport {\n\tinitStream,\n\tinitReader,\n\tinitWriter,\n\treadUint8Array,\n\tBlobReader\n} from \"./io.js\";\nimport { decodeText } from \"./util/decode-text.js\";\nimport { Crc32 } from \"./streams/codecs/crc32.js\";\nimport {\n\tPROPERTY_NAME_RAW_FILENAME,\n\tPROPERTY_NAME_FILENAME,\n\tPROPERTY_NAME_RAW_COMMENT,\n\tPROPERTY_NAME_COMMENT,\n\tPROPERTY_NAME_UNCOMPPRESSED_SIZE,\n\tPROPERTY_NAME_COMPPRESSED_SIZE,\n\tPROPERTY_NAME_OFFSET,\n\tPROPERTY_NAME_DISK_NUMBER_START,\n\tPROPERTY_NAME_LAST_MODIFICATION_DATE,\n\tPROPERTY_NAME_RAW_LAST_MODIFICATION_DATE,\n\tPROPERTY_NAME_LAST_ACCESS_DATE,\n\tPROPERTY_NAME_RAW_LAST_ACCESS_DATE,\n\tPROPERTY_NAME_CREATION_DATE,\n\tPROPERTY_NAME_RAW_CREATION_DATE,\n\tEntry\n} from \"./zip-entry.js\";\n\nconst ERR_BAD_FORMAT = \"File format is not recognized\";\nconst ERR_EOCDR_NOT_FOUND = \"End of central directory not found\";\nconst ERR_EOCDR_ZIP64_NOT_FOUND = \"End of Zip64 central directory not found\";\nconst ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND = \"End of Zip64 central directory locator not found\";\nconst ERR_CENTRAL_DIRECTORY_NOT_FOUND = \"Central directory header not found\";\nconst ERR_LOCAL_FILE_HEADER_NOT_FOUND = \"Local file header not found\";\nconst ERR_EXTRAFIELD_ZIP64_NOT_FOUND = \"Zip64 extra field not found\";\nconst ERR_ENCRYPTED = \"File contains encrypted entry\";\nconst ERR_UNSUPPORTED_ENCRYPTION = \"Encryption method not supported\";\nconst ERR_UNSUPPORTED_COMPRESSION = \"Compression method not supported\";\nconst ERR_SPLIT_ZIP_FILE = \"Split zip file\";\nconst CHARSET_UTF8 = \"utf-8\";\nconst CHARSET_CP437 = \"cp437\";\nconst ZIP64_PROPERTIES = [\n\t[PROPERTY_NAME_UNCOMPPRESSED_SIZE, MAX_32_BITS],\n\t[PROPERTY_NAME_COMPPRESSED_SIZE, MAX_32_BITS],\n\t[PROPERTY_NAME_OFFSET, MAX_32_BITS],\n\t[PROPERTY_NAME_DISK_NUMBER_START, MAX_16_BITS]\n];\nconst ZIP64_EXTRACTION = {\n\t[MAX_16_BITS]: {\n\t\tgetValue: getUint32,\n\t\tbytes: 4\n\t},\n\t[MAX_32_BITS]: {\n\t\tgetValue: getBigUint64,\n\t\tbytes: 8\n\t}\n};\n\nclass ZipReader {\n\n\tconstructor(reader, options = {}) {\n\t\tObject.assign(this, {\n\t\t\treader: initReader(reader),\n\t\t\toptions,\n\t\t\tconfig: getConfiguration()\n\t\t});\n\t}\n\n\tasync* getEntriesGenerator(options = {}) {\n\t\tconst zipReader = this;\n\t\tlet { reader } = zipReader;\n\t\tconst { config } = zipReader;\n\t\tawait initStream(reader);\n\t\tif (reader.size === UNDEFINED_VALUE || !reader.readUint8Array) {\n\t\t\treader = new BlobReader(await new Response(reader.readable).blob());\n\t\t\tawait initStream(reader);\n\t\t}\n\t\tif (reader.size < END_OF_CENTRAL_DIR_LENGTH) {\n\t\t\tthrow new Error(ERR_BAD_FORMAT);\n\t\t}\n\t\treader.chunkSize = getChunkSize(config);\n\t\tconst endOfDirectoryInfo = await seekSignature(reader, END_OF_CENTRAL_DIR_SIGNATURE, reader.size, END_OF_CENTRAL_DIR_LENGTH, MAX_16_BITS * 16);\n\t\tif (!endOfDirectoryInfo) {\n\t\t\tconst signatureArray = await readUint8Array(reader, 0, 4);\n\t\t\tconst signatureView = getDataView(signatureArray);\n\t\t\tif (getUint32(signatureView) == SPLIT_ZIP_FILE_SIGNATURE) {\n\t\t\t\tthrow new Error(ERR_SPLIT_ZIP_FILE);\n\t\t\t} else {\n\t\t\t\tthrow new Error(ERR_EOCDR_NOT_FOUND);\n\t\t\t}\n\t\t}\n\t\tconst endOfDirectoryView = getDataView(endOfDirectoryInfo);\n\t\tlet directoryDataLength = getUint32(endOfDirectoryView, 12);\n\t\tlet directoryDataOffset = getUint32(endOfDirectoryView, 16);\n\t\tconst commentOffset = endOfDirectoryInfo.offset;\n\t\tconst commentLength = getUint16(endOfDirectoryView, 20);\n\t\tconst appendedDataOffset = commentOffset + END_OF_CENTRAL_DIR_LENGTH + commentLength;\n\t\tlet lastDiskNumber = getUint16(endOfDirectoryView, 4);\n\t\tconst expectedLastDiskNumber = reader.lastDiskNumber || 0;\n\t\tlet diskNumber = getUint16(endOfDirectoryView, 6);\n\t\tlet filesLength = getUint16(endOfDirectoryView, 8);\n\t\tlet prependedDataLength = 0;\n\t\tlet startOffset = 0;\n\t\tif (directoryDataOffset == MAX_32_BITS || directoryDataLength == MAX_32_BITS || filesLength == MAX_16_BITS || diskNumber == MAX_16_BITS) {\n\t\t\tconst endOfDirectoryLocatorArray = await readUint8Array(reader, endOfDirectoryInfo.offset - ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH);\n\t\t\tconst endOfDirectoryLocatorView = getDataView(endOfDirectoryLocatorArray);\n\t\t\tif (getUint32(endOfDirectoryLocatorView, 0) != ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE) {\n\t\t\t\tthrow new Error(ERR_EOCDR_ZIP64_NOT_FOUND);\n\t\t\t}\n\t\t\tdirectoryDataOffset = getBigUint64(endOfDirectoryLocatorView, 8);\n\t\t\tlet endOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, ZIP64_END_OF_CENTRAL_DIR_LENGTH, -1);\n\t\t\tlet endOfDirectoryView = getDataView(endOfDirectoryArray);\n\t\t\tconst expectedDirectoryDataOffset = endOfDirectoryInfo.offset - ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH - ZIP64_END_OF_CENTRAL_DIR_LENGTH;\n\t\t\tif (getUint32(endOfDirectoryView, 0) != ZIP64_END_OF_CENTRAL_DIR_SIGNATURE && directoryDataOffset != expectedDirectoryDataOffset) {\n\t\t\t\tconst originalDirectoryDataOffset = directoryDataOffset;\n\t\t\t\tdirectoryDataOffset = expectedDirectoryDataOffset;\n\t\t\t\tprependedDataLength = directoryDataOffset - originalDirectoryDataOffset;\n\t\t\t\tendOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, ZIP64_END_OF_CENTRAL_DIR_LENGTH, -1);\n\t\t\t\tendOfDirectoryView = getDataView(endOfDirectoryArray);\n\t\t\t}\n\t\t\tif (getUint32(endOfDirectoryView, 0) != ZIP64_END_OF_CENTRAL_DIR_SIGNATURE) {\n\t\t\t\tthrow new Error(ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND);\n\t\t\t}\n\t\t\tif (lastDiskNumber == MAX_16_BITS) {\n\t\t\t\tlastDiskNumber = getUint32(endOfDirectoryView, 16);\n\t\t\t}\n\t\t\tif (diskNumber == MAX_16_BITS) {\n\t\t\t\tdiskNumber = getUint32(endOfDirectoryView, 20);\n\t\t\t}\n\t\t\tif (filesLength == MAX_16_BITS) {\n\t\t\t\tfilesLength = getBigUint64(endOfDirectoryView, 32);\n\t\t\t}\n\t\t\tif (directoryDataLength == MAX_32_BITS) {\n\t\t\t\tdirectoryDataLength = getBigUint64(endOfDirectoryView, 40);\n\t\t\t}\n\t\t\tdirectoryDataOffset -= directoryDataLength;\n\t\t}\n\t\tif (expectedLastDiskNumber != lastDiskNumber) {\n\t\t\tthrow new Error(ERR_SPLIT_ZIP_FILE);\n\t\t}\n\t\tif (directoryDataOffset < 0 || directoryDataOffset >= reader.size) {\n\t\t\tthrow new Error(ERR_BAD_FORMAT);\n\t\t}\n\t\tlet offset = 0;\n\t\tlet directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);\n\t\tlet directoryView = getDataView(directoryArray);\n\t\tif (directoryDataLength) {\n\t\t\tconst expectedDirectoryDataOffset = endOfDirectoryInfo.offset - directoryDataLength;\n\t\t\tif (getUint32(directoryView, offset) != CENTRAL_FILE_HEADER_SIGNATURE && directoryDataOffset != expectedDirectoryDataOffset) {\n\t\t\t\tconst originalDirectoryDataOffset = directoryDataOffset;\n\t\t\t\tdirectoryDataOffset = expectedDirectoryDataOffset;\n\t\t\t\tprependedDataLength = directoryDataOffset - originalDirectoryDataOffset;\n\t\t\t\tdirectoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength, diskNumber);\n\t\t\t\tdirectoryView = getDataView(directoryArray);\n\t\t\t}\n\t\t}\n\t\tif (directoryDataOffset < 0 || directoryDataOffset >= reader.size) {\n\t\t\tthrow new Error(ERR_BAD_FORMAT);\n\t\t}\n\t\tconst filenameEncoding = getOptionValue(zipReader, options, \"filenameEncoding\");\n\t\tconst commentEncoding = getOptionValue(zipReader, options, \"commentEncoding\");\n\t\tfor (let indexFile = 0; indexFile < filesLength; indexFile++) {\n\t\t\tconst fileEntry = new ZipEntry(reader, config, zipReader.options);\n\t\t\tif (getUint32(directoryView, offset) != CENTRAL_FILE_HEADER_SIGNATURE) {\n\t\t\t\tthrow new Error(ERR_CENTRAL_DIRECTORY_NOT_FOUND);\n\t\t\t}\n\t\t\treadCommonHeader(fileEntry, directoryView, offset + 6);\n\t\t\tconst languageEncodingFlag = Boolean(fileEntry.bitFlag.languageEncodingFlag);\n\t\t\tconst filenameOffset = offset + 46;\n\t\t\tconst extraFieldOffset = filenameOffset + fileEntry.filenameLength;\n\t\t\tconst commentOffset = extraFieldOffset + fileEntry.extraFieldLength;\n\t\t\tconst versionMadeBy = getUint16(directoryView, offset + 4);\n\t\t\tconst msDosCompatible = (versionMadeBy & 0) == 0;\n\t\t\tconst rawFilename = directoryArray.subarray(filenameOffset, extraFieldOffset);\n\t\t\tconst commentLength = getUint16(directoryView, offset + 32);\n\t\t\tconst endOffset = commentOffset + commentLength;\n\t\t\tconst rawComment = directoryArray.subarray(commentOffset, endOffset);\n\t\t\tconst filenameUTF8 = languageEncodingFlag;\n\t\t\tconst commentUTF8 = languageEncodingFlag;\n\t\t\tconst directory = msDosCompatible && ((getUint8(directoryView, offset + 38) & FILE_ATTR_MSDOS_DIR_MASK) == FILE_ATTR_MSDOS_DIR_MASK);\n\t\t\tconst offsetFileEntry = getUint32(directoryView, offset + 42) + prependedDataLength;\n\t\t\tObject.assign(fileEntry, {\n\t\t\t\tversionMadeBy,\n\t\t\t\tmsDosCompatible,\n\t\t\t\tcompressedSize: 0,\n\t\t\t\tuncompressedSize: 0,\n\t\t\t\tcommentLength,\n\t\t\t\tdirectory,\n\t\t\t\toffset: offsetFileEntry,\n\t\t\t\tdiskNumberStart: getUint16(directoryView, offset + 34),\n\t\t\t\tinternalFileAttribute: getUint16(directoryView, offset + 36),\n\t\t\t\texternalFileAttribute: getUint32(directoryView, offset + 38),\n\t\t\t\trawFilename,\n\t\t\t\tfilenameUTF8,\n\t\t\t\tcommentUTF8,\n\t\t\t\trawExtraField: directoryArray.subarray(extraFieldOffset, commentOffset)\n\t\t\t});\n\t\t\tconst [filename, comment] = await Promise.all([\n\t\t\t\tdecodeText(rawFilename, filenameUTF8 ? CHARSET_UTF8 : filenameEncoding || CHARSET_CP437),\n\t\t\t\tdecodeText(rawComment, commentUTF8 ? CHARSET_UTF8 : commentEncoding || CHARSET_CP437)\n\t\t\t]);\n\t\t\tObject.assign(fileEntry, {\n\t\t\t\trawComment,\n\t\t\t\tfilename,\n\t\t\t\tcomment,\n\t\t\t\tdirectory: directory || filename.endsWith(DIRECTORY_SIGNATURE)\n\t\t\t});\n\t\t\tstartOffset = Math.max(offsetFileEntry, startOffset);\n\t\t\tawait readCommonFooter(fileEntry, fileEntry, directoryView, offset + 6);\n\t\t\tconst entry = new Entry(fileEntry);\n\t\t\tentry.getData = (writer, options) => fileEntry.getData(writer, entry, options);\n\t\t\toffset = endOffset;\n\t\t\tconst { onprogress } = options;\n\t\t\tif (onprogress) {\n\t\t\t\ttry {\n\t\t\t\t\tawait onprogress(indexFile + 1, filesLength, new Entry(fileEntry));\n\t\t\t\t} catch (_error) {\n\t\t\t\t\t// ignored\n\t\t\t\t}\n\t\t\t}\n\t\t\tyield entry;\n\t\t}\n\t\tconst extractPrependedData = getOptionValue(zipReader, options, \"extractPrependedData\");\n\t\tconst extractAppendedData = getOptionValue(zipReader, options, \"extractAppendedData\");\n\t\tif (extractPrependedData) {\n\t\t\tzipReader.prependedData = startOffset > 0 ? await readUint8Array(reader, 0, startOffset) : new Uint8Array();\n\t\t}\n\t\tzipReader.comment = commentLength ? await readUint8Array(reader, commentOffset + END_OF_CENTRAL_DIR_LENGTH, commentLength) : new Uint8Array();\n\t\tif (extractAppendedData) {\n\t\t\tzipReader.appendedData = appendedDataOffset < reader.size ? await readUint8Array(reader, appendedDataOffset, reader.size - appendedDataOffset) : new Uint8Array();\n\t\t}\n\t\treturn true;\n\t}\n\n\tasync getEntries(options = {}) {\n\t\tconst entries = [];\n\t\tfor await (const entry of this.getEntriesGenerator(options)) {\n\t\t\tentries.push(entry);\n\t\t}\n\t\treturn entries;\n\t}\n\n\tasync close() {\n\t}\n}\n\nexport {\n\tZipReader,\n\tERR_BAD_FORMAT,\n\tERR_EOCDR_NOT_FOUND,\n\tERR_EOCDR_ZIP64_NOT_FOUND,\n\tERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND,\n\tERR_CENTRAL_DIRECTORY_NOT_FOUND,\n\tERR_LOCAL_FILE_HEADER_NOT_FOUND,\n\tERR_EXTRAFIELD_ZIP64_NOT_FOUND,\n\tERR_ENCRYPTED,\n\tERR_UNSUPPORTED_ENCRYPTION,\n\tERR_UNSUPPORTED_COMPRESSION,\n\tERR_INVALID_SIGNATURE,\n\tERR_INVALID_PASSWORD,\n\tERR_SPLIT_ZIP_FILE\n};\n\nclass ZipEntry {\n\n\tconstructor(reader, config, options) {\n\t\tObject.assign(this, {\n\t\t\treader,\n\t\t\tconfig,\n\t\t\toptions\n\t\t});\n\t}\n\n\tasync getData(writer, fileEntry, options = {}) {\n\t\tconst zipEntry = this;\n\t\tconst {\n\t\t\treader,\n\t\t\toffset,\n\t\t\tdiskNumberStart,\n\t\t\textraFieldAES,\n\t\t\tcompressionMethod,\n\t\t\tconfig,\n\t\t\tbitFlag,\n\t\t\tsignature,\n\t\t\trawLastModDate,\n\t\t\tuncompressedSize,\n\t\t\tcompressedSize\n\t\t} = zipEntry;\n\t\tconst localDirectory = zipEntry.localDirectory = {};\n\t\tconst dataArray = await readUint8Array(reader, offset, 30, diskNumberStart);\n\t\tconst dataView = getDataView(dataArray);\n\t\tlet password = getOptionValue(zipEntry, options, \"password\");\n\t\tpassword = password && password.length && password;\n\t\tif (extraFieldAES) {\n\t\t\tif (extraFieldAES.originalCompressionMethod != COMPRESSION_METHOD_AES) {\n\t\t\t\tthrow new Error(ERR_UNSUPPORTED_COMPRESSION);\n\t\t\t}\n\t\t}\n\t\tif (compressionMethod != COMPRESSION_METHOD_STORE && compressionMethod != COMPRESSION_METHOD_DEFLATE) {\n\t\t\tthrow new Error(ERR_UNSUPPORTED_COMPRESSION);\n\t\t}\n\t\tif (getUint32(dataView, 0) != LOCAL_FILE_HEADER_SIGNATURE) {\n\t\t\tthrow new Error(ERR_LOCAL_FILE_HEADER_NOT_FOUND);\n\t\t}\n\t\treadCommonHeader(localDirectory, dataView, 4);\n\t\tlocalDirectory.rawExtraField = localDirectory.extraFieldLength ?\n\t\t\tawait readUint8Array(reader, offset + 30 + localDirectory.filenameLength, localDirectory.extraFieldLength, diskNumberStart) :\n\t\t\tnew Uint8Array();\n\t\tawait readCommonFooter(zipEntry, localDirectory, dataView, 4);\n\t\tObject.assign(fileEntry, {\n\t\t\tlastAccessDate: localDirectory.lastAccessDate,\n\t\t\tcreationDate: localDirectory.creationDate\n\t\t});\n\t\tconst encrypted = zipEntry.encrypted && localDirectory.encrypted;\n\t\tconst zipCrypto = encrypted && !extraFieldAES;\n\t\tif (encrypted) {\n\t\t\tif (!zipCrypto && extraFieldAES.strength === UNDEFINED_VALUE) {\n\t\t\t\tthrow new Error(ERR_UNSUPPORTED_ENCRYPTION);\n\t\t\t} else if (!password) {\n\t\t\t\tthrow new Error(ERR_ENCRYPTED);\n\t\t\t}\n\t\t}\n\t\tconst dataOffset = offset + 30 + localDirectory.filenameLength + localDirectory.extraFieldLength;\n\t\tconst readable = reader.readable;\n\t\treadable.diskNumberStart = diskNumberStart;\n\t\treadable.offset = dataOffset;\n\t\tlet size = readable.size = compressedSize;\n\t\tconst signal = getOptionValue(zipEntry, options, \"signal\");\n\t\tconst checkPasswordOnly = getOptionValue(zipEntry, options, \"checkPasswordOnly\");\n\t\tif (checkPasswordOnly) {\n\t\t\twriter = new WritableStream();\n\t\t}\n\t\twriter = initWriter(writer);\n\t\tawait initStream(writer, uncompressedSize);\n\t\tconst { writable } = writer;\n\t\tconst { onstart, onprogress, onend } = options;\n\t\tconst workerOptions = {\n\t\t\toptions: {\n\t\t\t\tcodecType: CODEC_INFLATE,\n\t\t\t\tpassword,\n\t\t\t\tzipCrypto,\n\t\t\t\tencryptionStrength: extraFieldAES && extraFieldAES.strength,\n\t\t\t\tsigned: getOptionValue(zipEntry, options, \"checkSignature\"),\n\t\t\t\tpasswordVerification: zipCrypto && (bitFlag.dataDescriptor ? ((rawLastModDate >>> 8) & 0xFF) : ((signature >>> 24) & 0xFF)),\n\t\t\t\tsignature,\n\t\t\t\tcompressed: compressionMethod != 0,\n\t\t\t\tencrypted,\n\t\t\t\tuseWebWorkers: getOptionValue(zipEntry, options, \"useWebWorkers\"),\n\t\t\t\tuseCompressionStream: getOptionValue(zipEntry, options, \"useCompressionStream\"),\n\t\t\t\ttransferStreams: getOptionValue(zipEntry, options, \"transferStreams\"),\n\t\t\t\tcheckPasswordOnly\n\t\t\t},\n\t\t\tconfig,\n\t\t\tstreamOptions: { signal, size, onstart, onprogress, onend }\n\t\t};\n\t\tlet outputSize = 0;\n\t\ttry {\n\t\t\t({ outputSize } = (await runWorker({ readable, writable }, workerOptions)));\n\t\t} catch (error) {\n\t\t\tif (!checkPasswordOnly || error.message != ERR_ABORT_CHECK_PASSWORD) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t} finally {\n\t\t\tconst preventClose = getOptionValue(zipEntry, options, \"preventClose\");\n\t\t\twritable.size += outputSize;\n\t\t\tif (!preventClose && !writable.locked) {\n\t\t\t\tawait writable.close();\n\t\t\t}\n\t\t}\n\t\treturn checkPasswordOnly ? undefined : writer.getData ? writer.getData() : writable;\n\t}\n}\n\nfunction readCommonHeader(directory, dataView, offset) {\n\tconst rawBitFlag = directory.rawBitFlag = getUint16(dataView, offset + 2);\n\tconst encrypted = (rawBitFlag & BITFLAG_ENCRYPTED) == BITFLAG_ENCRYPTED;\n\tconst rawLastModDate = getUint32(dataView, offset + 6);\n\tObject.assign(directory, {\n\t\tencrypted,\n\t\tversion: getUint16(dataView, offset),\n\t\tbitFlag: {\n\t\t\tlevel: (rawBitFlag & BITFLAG_LEVEL) >> 1,\n\t\t\tdataDescriptor: (rawBitFlag & BITFLAG_DATA_DESCRIPTOR) == BITFLAG_DATA_DESCRIPTOR,\n\t\t\tlanguageEncodingFlag: (rawBitFlag & BITFLAG_LANG_ENCODING_FLAG) == BITFLAG_LANG_ENCODING_FLAG\n\t\t},\n\t\trawLastModDate,\n\t\tlastModDate: getDate(rawLastModDate),\n\t\tfilenameLength: getUint16(dataView, offset + 22),\n\t\textraFieldLength: getUint16(dataView, offset + 24)\n\t});\n}\n\nasync function readCommonFooter(fileEntry, directory, dataView, offset) {\n\tconst { rawExtraField } = directory;\n\tconst extraField = directory.extraField = new Map();\n\tconst rawExtraFieldView = getDataView(new Uint8Array(rawExtraField));\n\tlet offsetExtraField = 0;\n\ttry {\n\t\twhile (offsetExtraField < rawExtraField.length) {\n\t\t\tconst type = getUint16(rawExtraFieldView, offsetExtraField);\n\t\t\tconst size = getUint16(rawExtraFieldView, offsetExtraField + 2);\n\t\t\textraField.set(type, {\n\t\t\t\ttype,\n\t\t\t\tdata: rawExtraField.slice(offsetExtraField + 4, offsetExtraField + 4 + size)\n\t\t\t});\n\t\t\toffsetExtraField += 4 + size;\n\t\t}\n\t} catch (_error) {\n\t\t// ignored\n\t}\n\tconst compressionMethod = getUint16(dataView, offset + 4);\n\tObject.assign(directory, {\n\t\tsignature: getUint32(dataView, offset + 10),\n\t\tuncompressedSize: getUint32(dataView, offset + 18),\n\t\tcompressedSize: getUint32(dataView, offset + 14)\n\t});\n\tconst extraFieldZip64 = extraField.get(EXTRAFIELD_TYPE_ZIP64);\n\tif (extraFieldZip64) {\n\t\treadExtraFieldZip64(extraFieldZip64, directory);\n\t\tdirectory.extraFieldZip64 = extraFieldZip64;\n\t}\n\tconst extraFieldUnicodePath = extraField.get(EXTRAFIELD_TYPE_UNICODE_PATH);\n\tif (extraFieldUnicodePath) {\n\t\tawait readExtraFieldUnicode(extraFieldUnicodePath, PROPERTY_NAME_FILENAME, PROPERTY_NAME_RAW_FILENAME, directory, fileEntry);\n\t\tdirectory.extraFieldUnicodePath = extraFieldUnicodePath;\n\t}\n\tconst extraFieldUnicodeComment = extraField.get(EXTRAFIELD_TYPE_UNICODE_COMMENT);\n\tif (extraFieldUnicodeComment) {\n\t\tawait readExtraFieldUnicode(extraFieldUnicodeComment, PROPERTY_NAME_COMMENT, PROPERTY_NAME_RAW_COMMENT, directory, fileEntry);\n\t\tdirectory.extraFieldUnicodeComment = extraFieldUnicodeComment;\n\t}\n\tconst extraFieldAES = extraField.get(EXTRAFIELD_TYPE_AES);\n\tif (extraFieldAES) {\n\t\treadExtraFieldAES(extraFieldAES, directory, compressionMethod);\n\t\tdirectory.extraFieldAES = extraFieldAES;\n\t} else {\n\t\tdirectory.compressionMethod = compressionMethod;\n\t}\n\tconst extraFieldNTFS = extraField.get(EXTRAFIELD_TYPE_NTFS);\n\tif (extraFieldNTFS) {\n\t\treadExtraFieldNTFS(extraFieldNTFS, directory);\n\t\tdirectory.extraFieldNTFS = extraFieldNTFS;\n\t}\n\tconst extraFieldExtendedTimestamp = extraField.get(EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP);\n\tif (extraFieldExtendedTimestamp) {\n\t\treadExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory);\n\t\tdirectory.extraFieldExtendedTimestamp = extraFieldExtendedTimestamp;\n\t}\n}\n\nfunction readExtraFieldZip64(extraFieldZip64, directory) {\n\tdirectory.zip64 = true;\n\tconst extraFieldView = getDataView(extraFieldZip64.data);\n\tconst missingProperties = ZIP64_PROPERTIES.filter(([propertyName, max]) => directory[propertyName] == max);\n\tfor (let indexMissingProperty = 0, offset = 0; indexMissingProperty < missingProperties.length; indexMissingProperty++) {\n\t\tconst [propertyName, max] = missingProperties[indexMissingProperty];\n\t\tif (directory[propertyName] == max) {\n\t\t\tconst extraction = ZIP64_EXTRACTION[max];\n\t\t\tdirectory[propertyName] = extraFieldZip64[propertyName] = extraction.getValue(extraFieldView, offset);\n\t\t\toffset += extraction.bytes;\n\t\t} else if (extraFieldZip64[propertyName]) {\n\t\t\tthrow new Error(ERR_EXTRAFIELD_ZIP64_NOT_FOUND);\n\t\t}\n\t}\n}\n\nasync function readExtraFieldUnicode(extraFieldUnicode, propertyName, rawPropertyName, directory, fileEntry) {\n\tconst extraFieldView = getDataView(extraFieldUnicode.data);\n\tconst crc32 = new Crc32();\n\tcrc32.append(fileEntry[rawPropertyName]);\n\tconst dataViewSignature = getDataView(new Uint8Array(4));\n\tdataViewSignature.setUint32(0, crc32.get(), true);\n\tObject.assign(extraFieldUnicode, {\n\t\tversion: getUint8(extraFieldView, 0),\n\t\tsignature: getUint32(extraFieldView, 1),\n\t\t[propertyName]: await decodeText(extraFieldUnicode.data.subarray(5)),\n\t\tvalid: !fileEntry.bitFlag.languageEncodingFlag && extraFieldUnicode.signature == getUint32(dataViewSignature, 0)\n\t});\n\tif (extraFieldUnicode.valid) {\n\t\tdirectory[propertyName] = extraFieldUnicode[propertyName];\n\t\tdirectory[propertyName + \"UTF8\"] = true;\n\t}\n}\n\nfunction readExtraFieldAES(extraFieldAES, directory, compressionMethod) {\n\tconst extraFieldView = getDataView(extraFieldAES.data);\n\tconst strength = getUint8(extraFieldView, 4);\n\tObject.assign(extraFieldAES, {\n\t\tvendorVersion: getUint8(extraFieldView, 0),\n\t\tvendorId: getUint8(extraFieldView, 2),\n\t\tstrength,\n\t\toriginalCompressionMethod: compressionMethod,\n\t\tcompressionMethod: getUint16(extraFieldView, 5)\n\t});\n\tdirectory.compressionMethod = extraFieldAES.compressionMethod;\n}\n\nfunction readExtraFieldNTFS(extraFieldNTFS, directory) {\n\tconst extraFieldView = getDataView(extraFieldNTFS.data);\n\tlet offsetExtraField = 4;\n\tlet tag1Data;\n\ttry {\n\t\twhile (offsetExtraField < extraFieldNTFS.data.length && !tag1Data) {\n\t\t\tconst tagValue = getUint16(extraFieldView, offsetExtraField);\n\t\t\tconst attributeSize = getUint16(extraFieldView, offsetExtraField + 2);\n\t\t\tif (tagValue == EXTRAFIELD_TYPE_NTFS_TAG1) {\n\t\t\t\ttag1Data = extraFieldNTFS.data.slice(offsetExtraField + 4, offsetExtraField + 4 + attributeSize);\n\t\t\t}\n\t\t\toffsetExtraField += 4 + attributeSize;\n\t\t}\n\t} catch (_error) {\n\t\t// ignored\n\t}\n\ttry {\n\t\tif (tag1Data && tag1Data.length == 24) {\n\t\t\tconst tag1View = getDataView(tag1Data);\n\t\t\tconst rawLastModDate = tag1View.getBigUint64(0, true);\n\t\t\tconst rawLastAccessDate = tag1View.getBigUint64(8, true);\n\t\t\tconst rawCreationDate = tag1View.getBigUint64(16, true);\n\t\t\tObject.assign(extraFieldNTFS, {\n\t\t\t\trawLastModDate,\n\t\t\t\trawLastAccessDate,\n\t\t\t\trawCreationDate\n\t\t\t});\n\t\t\tconst lastModDate = getDateNTFS(rawLastModDate);\n\t\t\tconst lastAccessDate = getDateNTFS(rawLastAccessDate);\n\t\t\tconst creationDate = getDateNTFS(rawCreationDate);\n\t\t\tconst extraFieldData = { lastModDate, lastAccessDate, creationDate };\n\t\t\tObject.assign(extraFieldNTFS, extraFieldData);\n\t\t\tObject.assign(directory, extraFieldData);\n\t\t}\n\t} catch (_error) {\n\t\t// ignored\n\t}\n}\n\nfunction readExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory) {\n\tconst extraFieldView = getDataView(extraFieldExtendedTimestamp.data);\n\tconst flags = getUint8(extraFieldView, 0);\n\tconst timeProperties = [];\n\tconst timeRawProperties = [];\n\tif ((flags & 0x1) == 0x1) {\n\t\ttimeProperties.push(PROPERTY_NAME_LAST_MODIFICATION_DATE);\n\t\ttimeRawProperties.push(PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE);\n\t}\n\tif ((flags & 0x2) == 0x2) {\n\t\ttimeProperties.push(PROPERTY_NAME_LAST_ACCESS_DATE);\n\t\ttimeRawProperties.push(PROPERTY_NAME_RAW_LAST_ACCESS_DATE);\n\t}\n\tif ((flags & 0x4) == 0x4) {\n\t\ttimeProperties.push(PROPERTY_NAME_CREATION_DATE);\n\t\ttimeRawProperties.push(PROPERTY_NAME_RAW_CREATION_DATE);\n\t}\n\tlet offset = 1;\n\ttimeProperties.forEach((propertyName, indexProperty) => {\n\t\tif (extraFieldExtendedTimestamp.data.length >= offset + 4) {\n\t\t\tconst time = getUint32(extraFieldView, offset);\n\t\t\tdirectory[propertyName] = extraFieldExtendedTimestamp[propertyName] = new Date(time * 1000);\n\t\t\tconst rawPropertyName = timeRawProperties[indexProperty];\n\t\t\textraFieldExtendedTimestamp[rawPropertyName] = time;\n\t\t}\n\t\toffset += 4;\n\t});\n}\n\nasync function seekSignature(reader, signature, startOffset, minimumBytes, maximumLength) {\n\tconst signatureArray = new Uint8Array(4);\n\tconst signatureView = getDataView(signatureArray);\n\tsetUint32(signatureView, 0, signature);\n\tconst maximumBytes = minimumBytes + maximumLength;\n\treturn (await seek(minimumBytes)) || await seek(Math.min(maximumBytes, startOffset));\n\n\tasync function seek(length) {\n\t\tconst offset = startOffset - length;\n\t\tconst bytes = await readUint8Array(reader, offset, length);\n\t\tfor (let indexByte = bytes.length - minimumBytes; indexByte >= 0; indexByte--) {\n\t\t\tif (bytes[indexByte] == signatureArray[0] && bytes[indexByte + 1] == signatureArray[1] &&\n\t\t\t\tbytes[indexByte + 2] == signatureArray[2] && bytes[indexByte + 3] == signatureArray[3]) {\n\t\t\t\treturn {\n\t\t\t\t\toffset: offset + indexByte,\n\t\t\t\t\tbuffer: bytes.slice(indexByte, indexByte + minimumBytes).buffer\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction getOptionValue(zipReader, options, name) {\n\treturn options[name] === UNDEFINED_VALUE ? zipReader.options[name] : options[name];\n}\n\nfunction getDate(timeRaw) {\n\tconst date = (timeRaw & 0xffff0000) >> 16, time = timeRaw & 0x0000ffff;\n\ttry {\n\t\treturn new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5, (time & 0x001F) * 2, 0);\n\t} catch (_error) {\n\t\t// ignored\n\t}\n}\n\nfunction getDateNTFS(timeRaw) {\n\treturn new Date((Number((timeRaw / BigInt(10000)) - BigInt(11644473600000))));\n}\n\nfunction getUint8(view, offset) {\n\treturn view.getUint8(offset);\n}\n\nfunction getUint16(view, offset) {\n\treturn view.getUint16(offset, true);\n}\n\nfunction getUint32(view, offset) {\n\treturn view.getUint32(offset, true);\n}\n\nfunction getBigUint64(view, offset) {\n\treturn Number(view.getBigUint64(offset, true));\n}\n\nfunction setUint32(view, offset, value) {\n\tview.setUint32(offset, value, true);\n}\n\nfunction getDataView(array) {\n\treturn new DataView(array.buffer);\n}","/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { configure } from \"./core/configuration.js\";\nimport { configureWebWorker } from \"./z-worker-inline.js\";\nimport { getMimeType } from \"./core/util/default-mime-type.js\";\nimport { initShimAsyncCodec } from \"./core/util/stream-codec-shim.js\";\nimport { terminateWorkers } from \"./core/codec-pool.js\";\n\nlet baseURL;\ntry {\n\tbaseURL = import.meta.url;\n} catch (_error) {\n\t// ignored\n}\nconfigure({ baseURL });\nconfigureWebWorker(configure);\n\nexport * from \"./core/io.js\";\nexport * from \"./core/zip-reader.js\";\nexport * from \"./core/zip-writer.js\";\nexport * from \"./core/zip-fs-core.js\";\nexport {\n\tconfigure,\n\tgetMimeType,\n\tinitShimAsyncCodec,\n\tterminateWorkers\n};","function e(e){const t=()=>URL.createObjectURL(new Blob(['const{Array:e,Object:t,Number:n,Math:r,Error:s,Uint8Array:i,Uint16Array:o,Uint32Array:c,Int32Array:f,Map:a,DataView:l,Promise:u,TextEncoder:w,crypto:h,postMessage:d,TransformStream:p,ReadableStream:y,WritableStream:m,CompressionStream:b,DecompressionStream:g}=self;class k{constructor(e){return class extends p{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}const v=[];for(let e=0;256>e;e++){let t=e;for(let e=0;8>e;e++)1&t?t=t>>>1^3988292384:t>>>=1;v[e]=t}class S{constructor(e){this.t=e||-1}append(e){let t=0|this.t;for(let n=0,r=0|e.length;r>n;n++)t=t>>>8^v[255&(t^e[n])];this.t=t}get(){return~this.t}}class z extends p{constructor(){const e=new S;super({transform(t){e.append(t)},flush(t){const n=new i(4);new l(n.buffer).setUint32(0,e.get()),t.enqueue(n)}})}}const C={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=C.i(n);return 32===r?e.concat(t):C.o(t,r,0|n,e.slice(0,e.length-1))},l(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+C.i(n)},u(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,r.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=C.h(t,e[n-1]&2147483648>>t-1,1)),e},h:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,i:e=>r.round(e/1099511627776)||32,o(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let s=0;s<e.length;s++)r.push(n|e[s]>>>t),n=e[s]<<32-t;const s=e.length?e[e.length-1]:0,i=C.i(s);return r.push(C.h(t+i&31,t+i>32?n:r.pop(),1)),r}},x={p:{m(e){const t=C.l(e)/8,n=new i(t);let r;for(let s=0;t>s;s++)0==(3&s)&&(r=e[s/4]),n[s]=r>>>24,r<<=8;return n},g(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3==(3&n)&&(t.push(r),r=0);return 3&n&&t.push(C.h(8*(3&n),r)),t}}},_=class{constructor(e){const t=this;t.blockSize=512,t.k=[1732584193,4023233417,2562383102,271733878,3285377520],t.v=[1518500249,1859775393,2400959708,3395469782],e?(t.S=e.S.slice(0),t.C=e.C.slice(0),t._=e._):t.reset()}reset(){const e=this;return e.S=e.k.slice(0),e.C=[],e._=0,e}update(e){const t=this;\"string\"==typeof e&&(e=x.A.g(e));const n=t.C=C.concat(t.C,e),r=t._,i=t._=r+C.l(e);if(i>9007199254740991)throw new s(\"Cannot hash more than 2^53 - 1 bits\");const o=new c(n);let f=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);i>=e;e+=t.blockSize)t.I(o.subarray(16*f,16*(f+1))),f+=1;return n.splice(0,16*f),t}D(){const e=this;let t=e.C;const n=e.S;t=C.concat(t,[C.h(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(r.floor(e._/4294967296)),t.push(0|e._);t.length;)e.I(t.splice(0,16));return e.reset(),n}V(e,t,n,r){return e>19?e>39?e>59?e>79?void 0:t^n^r:t&n|t&r|n&r:t^n^r:t&n|~t&r}P(e,t){return t<<e|t>>>32-e}I(t){const n=this,s=n.S,i=e(80);for(let e=0;16>e;e++)i[e]=t[e];let o=s[0],c=s[1],f=s[2],a=s[3],l=s[4];for(let e=0;79>=e;e++){16>e||(i[e]=n.P(1,i[e-3]^i[e-8]^i[e-14]^i[e-16]));const t=n.P(5,o)+n.V(e,c,f,a)+l+i[e]+n.v[r.floor(e/20)]|0;l=a,a=f,f=n.P(30,c),c=o,o=t}s[0]=s[0]+o|0,s[1]=s[1]+c|0,s[2]=s[2]+f|0,s[3]=s[3]+a|0,s[4]=s[4]+l|0}},A={getRandomValues(e){const t=new c(e.buffer),n=e=>{let t=987654321;const n=4294967295;return()=>(t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(r.random()>.5?1:-1))};for(let s,i=0;i<e.length;i+=4){const e=n(4294967296*(s||r.random()));s=987654071*e(),t[i/4]=4294967296*e()|0}return e}},I={importKey:e=>new I.R(x.p.g(e)),B(e,t,n,r){if(n=n||1e4,0>r||0>n)throw new s(\"invalid params to pbkdf2\");const i=1+(r>>5)<<2;let o,c,f,a,u;const w=new ArrayBuffer(i),h=new l(w);let d=0;const p=C;for(t=x.p.g(t),u=1;(i||1)>d;u++){for(o=c=e.encrypt(p.concat(t,[u])),f=1;n>f;f++)for(c=e.encrypt(c),a=0;a<c.length;a++)o[a]^=c[a];for(f=0;(i||1)>d&&f<o.length;f++)h.setInt32(d,o[f]),d+=4}return w.slice(0,r/8)},R:class{constructor(e){const t=this,n=t.M=_,r=[[],[]];t.K=[new n,new n];const s=t.K[0].blockSize/32;e.length>s&&(e=(new n).update(e).D());for(let t=0;s>t;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t.K[0].update(r[0]),t.K[1].update(r[1]),t.U=new n(t.K[0])}reset(){const e=this;e.U=new e.M(e.K[0]),e.N=!1}update(e){this.N=!0,this.U.update(e)}digest(){const e=this,t=e.U.D(),n=new e.M(e.K[1]).update(t).D();return e.reset(),n}encrypt(e){if(this.N)throw new s(\"encrypt on already updated hmac called!\");return this.update(e),this.digest(e)}}},D=void 0!==h&&\"function\"==typeof h.getRandomValues,V=\"Invalid password\",P=\"Invalid signature\",R=\"zipjs-abort-check-password\";function B(e){return D?h.getRandomValues(e):A.getRandomValues(e)}const E=16,M={name:\"PBKDF2\"},K=t.assign({hash:{name:\"HMAC\"}},M),U=t.assign({iterations:1e3,hash:{name:\"SHA-1\"}},M),N=[\"deriveBits\"],O=[8,12,16],T=[16,24,32],W=10,j=[0,0,0,0],H=\"undefined\",L=\"function\",F=typeof h!=H,q=F&&h.subtle,G=F&&typeof q!=H,J=x.p,Q=class{constructor(e){const t=this;t.O=[[[],[],[],[],[]],[[],[],[],[],[]]],t.O[0][0][0]||t.T();const n=t.O[0][4],r=t.O[1],i=e.length;let o,c,f,a=1;if(4!==i&&6!==i&&8!==i)throw new s(\"invalid aes key size\");for(t.v=[c=e.slice(0),f=[]],o=i;4*i+28>o;o++){let e=c[o-1];(o%i==0||8===i&&o%i==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],o%i==0&&(e=e<<8^e>>>24^a<<24,a=a<<1^283*(a>>7))),c[o]=c[o-i]^e}for(let e=0;o;e++,o--){const t=c[3&e?o:o-4];f[e]=4>=o||4>e?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this.W(e,0)}decrypt(e){return this.W(e,1)}T(){const e=this.O[0],t=this.O[1],n=e[4],r=t[4],s=[],i=[];let o,c,f,a;for(let e=0;256>e;e++)i[(s[e]=e<<1^283*(e>>7))^e]=e;for(let l=o=0;!n[l];l^=c||1,o=i[o]||1){let i=o^o<<1^o<<2^o<<3^o<<4;i=i>>8^255&i^99,n[l]=i,r[i]=l,a=s[f=s[c=s[l]]];let u=16843009*a^65537*f^257*c^16843008*l,w=257*s[i]^16843008*i;for(let n=0;4>n;n++)e[n][l]=w=w<<24^w>>>8,t[n][i]=u=u<<24^u>>>8}for(let n=0;5>n;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}W(e,t){if(4!==e.length)throw new s(\"invalid aes block size\");const n=this.v[t],r=n.length/4-2,i=[0,0,0,0],o=this.O[t],c=o[0],f=o[1],a=o[2],l=o[3],u=o[4];let w,h,d,p=e[0]^n[0],y=e[t?3:1]^n[1],m=e[2]^n[2],b=e[t?1:3]^n[3],g=4;for(let e=0;r>e;e++)w=c[p>>>24]^f[y>>16&255]^a[m>>8&255]^l[255&b]^n[g],h=c[y>>>24]^f[m>>16&255]^a[b>>8&255]^l[255&p]^n[g+1],d=c[m>>>24]^f[b>>16&255]^a[p>>8&255]^l[255&y]^n[g+2],b=c[b>>>24]^f[p>>16&255]^a[y>>8&255]^l[255&m]^n[g+3],g+=4,p=w,y=h,m=d;for(let e=0;4>e;e++)i[t?3&-e:e]=u[p>>>24]<<24^u[y>>16&255]<<16^u[m>>8&255]<<8^u[255&b]^n[g++],w=p,p=y,y=m,m=b,b=w;return i}},X=class{constructor(e,t){this.j=e,this.H=t,this.L=t}reset(){this.L=this.H}update(e){return this.F(this.j,e,this.L)}q(e){if(255==(e>>24&255)){let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}else e+=1<<24;return e}G(e){0===(e[0]=this.q(e[0]))&&(e[1]=this.q(e[1]))}F(e,t,n){let r;if(!(r=t.length))return[];const s=C.l(t);for(let s=0;r>s;s+=4){this.G(n);const r=e.encrypt(n);t[s]^=r[0],t[s+1]^=r[1],t[s+2]^=r[2],t[s+3]^=r[3]}return C.u(t,s)}},Y=I.R;let Z=F&&G&&typeof q.importKey==L,$=F&&G&&typeof q.deriveBits==L;class ee extends p{constructor({password:e,signed:n,encryptionStrength:r,checkPasswordOnly:o}){super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:e,signed:n,X:r-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:c,J:f,ready:a}=n;r?(await(async(e,t,n,r)=>{const i=await re(e,t,n,ie(r,0,O[t])),o=ie(r,O[t]);if(i[0]!=o[0]||i[1]!=o[1])throw new s(V)})(n,c,r,ie(e,0,O[c]+2)),e=ie(e,O[c]+2),o?t.error(new s(R)):f()):await a;const l=new i(e.length-W-(e.length-W)%E);t.enqueue(ne(n,e,l,0,W,!0))},async flush(e){const{signed:t,Y:n,Z:r,pending:o,ready:c}=this;await c;const f=ie(o,0,o.length-W),a=ie(o,o.length-W);let l=new i;if(f.length){const e=ce(J,f);r.update(e);const t=n.update(e);l=oe(J,t)}if(t){const e=ie(oe(J,r.digest()),0,W);for(let t=0;W>t;t++)if(e[t]!=a[t])throw new s(P)}e.enqueue(l)}})}}class te extends p{constructor({password:e,encryptionStrength:n}){let r;super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:e,X:n-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:s,J:o,ready:c}=n;let f=new i;r?(f=await(async(e,t,n)=>{const r=B(new i(O[t]));return se(r,await re(e,t,n,r))})(n,s,r),o()):await c;const a=new i(f.length+e.length-e.length%E);a.set(f,0),t.enqueue(ne(n,e,a,f.length,0))},async flush(e){const{Y:t,Z:n,pending:s,ready:o}=this;await o;let c=new i;if(s.length){const e=t.update(ce(J,s));n.update(e),c=oe(J,e)}r.signature=oe(J,n.digest()).slice(0,W),e.enqueue(se(c,r.signature))}}),r=this}}function ne(e,t,n,r,s,o){const{Y:c,Z:f,pending:a}=e,l=t.length-s;let u;for(a.length&&(t=se(a,t),n=((e,t)=>{if(t&&t>e.length){const n=e;(e=new i(t)).set(n,0)}return e})(n,l-l%E)),u=0;l-E>=u;u+=E){const e=ce(J,ie(t,u,u+E));o&&f.update(e);const s=c.update(e);o||f.update(s),n.set(oe(J,s),u+r)}return e.pending=ie(t,u),n}async function re(n,r,s,o){n.password=null;const c=(e=>{if(void 0===w){const t=new i((e=unescape(encodeURIComponent(e))).length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new w).encode(e)})(s),f=await(async(e,t,n,r,s)=>{if(!Z)return I.importKey(t);try{return await q.importKey(\"raw\",t,n,!1,s)}catch(e){return Z=!1,I.importKey(t)}})(0,c,K,0,N),a=await(async(e,t,n)=>{if(!$)return I.B(t,e.salt,U.iterations,n);try{return await q.deriveBits(e,t,n)}catch(r){return $=!1,I.B(t,e.salt,U.iterations,n)}})(t.assign({salt:o},U),f,8*(2*T[r]+2)),l=new i(a),u=ce(J,ie(l,0,T[r])),h=ce(J,ie(l,T[r],2*T[r])),d=ie(l,2*T[r]);return t.assign(n,{keys:{key:u,$:h,passwordVerification:d},Y:new X(new Q(u),e.from(j)),Z:new Y(h)}),d}function se(e,t){let n=e;return e.length+t.length&&(n=new i(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function ie(e,t,n){return e.subarray(t,n)}function oe(e,t){return e.m(t)}function ce(e,t){return e.g(t)}class fe extends p{constructor({password:e,passwordVerification:n,checkPasswordOnly:r}){super({start(){t.assign(this,{password:e,passwordVerification:n}),we(this,e)},transform(e,t){const n=this;if(n.password){const t=le(n,e.subarray(0,12));if(n.password=null,t[11]!=n.passwordVerification)throw new s(V);e=e.subarray(12)}r?t.error(new s(R)):t.enqueue(le(n,e))}})}}class ae extends p{constructor({password:e,passwordVerification:n}){super({start(){t.assign(this,{password:e,passwordVerification:n}),we(this,e)},transform(e,t){const n=this;let r,s;if(n.password){n.password=null;const t=B(new i(12));t[11]=n.passwordVerification,r=new i(e.length+t.length),r.set(ue(n,t),0),s=12}else r=new i(e.length),s=0;r.set(ue(n,e),s),t.enqueue(r)}})}}function le(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=de(e)^t[r],he(e,n[r]);return n}function ue(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=de(e)^t[r],he(e,t[r]);return n}function we(e,n){const r=[305419896,591751049,878082192];t.assign(e,{keys:r,ee:new S(r[0]),te:new S(r[2])});for(let t=0;t<n.length;t++)he(e,n.charCodeAt(t))}function he(e,t){let[n,s,i]=e.keys;e.ee.append([t]),n=~e.ee.get(),s=ye(r.imul(ye(s+pe(n)),134775813)+1),e.te.append([s>>>24]),i=~e.te.get(),e.keys=[n,s,i]}function de(e){const t=2|e.keys[2];return pe(r.imul(t,1^t)>>>8)}function pe(e){return 255&e}function ye(e){return 4294967295&e}const me=\"deflate-raw\";class be extends p{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:s,encrypted:i,useCompressionStream:o,zipCrypto:c,signed:f,level:a}=e,u=this;let w,h,d=ke(super.readable);i&&!c||!f||([d,w]=d.tee(),w=ze(w,new z)),s&&(d=Se(d,o,{level:a,chunkSize:t},r,n)),i&&(c?d=ze(d,new ae(e)):(h=new te(e),d=ze(d,h))),ve(u,d,(async()=>{let e;i&&!c&&(e=h.signature),i&&!c||!f||(e=await w.getReader().read(),e=new l(e.value.buffer).getUint32(0)),u.signature=e}))}}class ge extends p{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:o,signed:c,signature:f,compressed:a,useCompressionStream:u}=e;let w,h,d=ke(super.readable);o&&(i?d=ze(d,new fe(e)):(h=new ee(e),d=ze(d,h))),a&&(d=Se(d,u,{chunkSize:t},r,n)),o&&!i||!c||([d,w]=d.tee(),w=ze(w,new z)),ve(this,d,(async()=>{if((!o||i)&&c){const e=await w.getReader().read(),t=new l(e.value.buffer);if(f!=t.getUint32(0,!1))throw new s(P)}}))}}function ke(e){return ze(e,new p({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function ve(e,n,r){n=ze(n,new p({flush:r})),t.defineProperty(e,\"readable\",{get:()=>n})}function Se(e,t,n,r,s){try{e=ze(e,new(t&&r?r:s)(me,n))}catch(r){if(!t)throw r;e=ze(e,new s(me,n))}return e}function ze(e,t){return e.pipeThrough(t)}const Ce=\"data\";class xe extends p{constructor(e,n){super({});const r=this,{codecType:s}=e;let i;s.startsWith(\"deflate\")?i=be:s.startsWith(\"inflate\")&&(i=ge);let o=0;const c=new i(e,n),f=super.readable,a=new p({transform(e,t){e&&e.length&&(o+=e.length,t.enqueue(e))},flush(){const{signature:e}=c;t.assign(r,{signature:e,size:o})}});t.defineProperty(r,\"readable\",{get:()=>f.pipeThrough(c).pipeThrough(a)})}}const _e=new a,Ae=new a;let Ie=0;async function De(e){try{const{options:t,scripts:r,config:s}=e;r&&r.length&&importScripts.apply(void 0,r),self.initCodec&&self.initCodec(),s.CompressionStreamNative=self.CompressionStream,s.DecompressionStreamNative=self.DecompressionStream,self.Deflate&&(s.CompressionStream=new k(self.Deflate)),self.Inflate&&(s.DecompressionStream=new k(self.Inflate));const i={highWaterMark:1,size:()=>s.chunkSize},o=e.readable||new y({async pull(e){const t=new u((e=>_e.set(Ie,e)));Ve({type:\"pull\",messageId:Ie}),Ie=(Ie+1)%n.MAX_SAFE_INTEGER;const{value:r,done:s}=await t;e.enqueue(r),s&&e.close()}},i),c=e.writable||new m({async write(e){let t;const r=new u((e=>t=e));Ae.set(Ie,t),Ve({type:Ce,value:e,messageId:Ie}),Ie=(Ie+1)%n.MAX_SAFE_INTEGER,await r}},i),f=new xe(t,s);await o.pipeThrough(f).pipeTo(c,{preventClose:!0,preventAbort:!0});try{await c.close()}catch(e){}const{signature:a,size:l}=f;Ve({type:\"close\",result:{signature:a,size:l}})}catch(e){Pe(e)}}function Ve(e){let{value:t}=e;if(t)if(t.length)try{t=new i(t),e.value=t.buffer,d(e,[e.value])}catch(t){d(e)}else d(e);else d(e)}function Pe(e){const{message:t,stack:n,code:r,name:s}=e;d({error:{message:t,stack:n,code:r,name:s}})}addEventListener(\"message\",(({data:e})=>{const{type:t,messageId:n,value:r,done:s}=e;try{if(\"start\"==t&&De(e),t==Ce){const e=_e.get(n);_e.delete(n),e({value:new i(r),done:s})}if(\"ack\"==t){const e=Ae.get(n);Ae.delete(n),e()}}catch(e){Pe(e)}}));const Re=-2;function Be(t){return Ee(t.map((([t,n])=>new e(t).fill(n,0,t))))}function Ee(t){return t.reduce(((t,n)=>t.concat(e.isArray(n)?Ee(n):n)),[])}const Me=[0,1,2,3].concat(...Be([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function Ke(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.ne=n=>{const s=e.re,i=e.ie.se,o=e.ie.oe;let c,f,a,l=-1;for(n.ce=0,n.fe=573,c=0;o>c;c++)0!==s[2*c]?(n.ae[++n.ce]=l=c,n.le[c]=0):s[2*c+1]=0;for(;2>n.ce;)a=n.ae[++n.ce]=2>l?++l:0,s[2*a]=1,n.le[a]=0,n.ue--,i&&(n.we-=i[2*a+1]);for(e.he=l,c=r.floor(n.ce/2);c>=1;c--)n.de(s,c);a=o;do{c=n.ae[1],n.ae[1]=n.ae[n.ce--],n.de(s,1),f=n.ae[1],n.ae[--n.fe]=c,n.ae[--n.fe]=f,s[2*a]=s[2*c]+s[2*f],n.le[a]=r.max(n.le[c],n.le[f])+1,s[2*c+1]=s[2*f+1]=a,n.ae[1]=a++,n.de(s,1)}while(n.ce>=2);n.ae[--n.fe]=n.ae[1],(t=>{const n=e.re,r=e.ie.se,s=e.ie.pe,i=e.ie.ye,o=e.ie.me;let c,f,a,l,u,w,h=0;for(l=0;15>=l;l++)t.be[l]=0;for(n[2*t.ae[t.fe]+1]=0,c=t.fe+1;573>c;c++)f=t.ae[c],l=n[2*n[2*f+1]+1]+1,l>o&&(l=o,h++),n[2*f+1]=l,f>e.he||(t.be[l]++,u=0,i>f||(u=s[f-i]),w=n[2*f],t.ue+=w*(l+u),r&&(t.we+=w*(r[2*f+1]+u)));if(0!==h){do{for(l=o-1;0===t.be[l];)l--;t.be[l]--,t.be[l+1]+=2,t.be[o]--,h-=2}while(h>0);for(l=o;0!==l;l--)for(f=t.be[l];0!==f;)a=t.ae[--c],a>e.he||(n[2*a+1]!=l&&(t.ue+=(l-n[2*a+1])*n[2*a],n[2*a+1]=l),f--)}})(n),((e,n,r)=>{const s=[];let i,o,c,f=0;for(i=1;15>=i;i++)s[i]=f=f+r[i-1]<<1;for(o=0;n>=o;o++)c=e[2*o+1],0!==c&&(e[2*o]=t(s[c]++,c))})(s,e.he,n.be)}}function Ue(e,t,n,r,s){const i=this;i.se=e,i.pe=t,i.ye=n,i.oe=r,i.me=s}Ke.ge=[0,1,2,3,4,5,6,7].concat(...Be([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),Ke.ke=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],Ke.ve=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],Ke.Se=e=>256>e?Me[e]:Me[256+(e>>>7)],Ke.ze=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],Ke.Ce=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Ke.xe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Ke._e=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const Ne=Be([[144,8],[112,9],[24,7],[8,8]]);Ue.Ae=Ee([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,Ne[t]])));const Oe=Be([[30,5]]);function Te(e,t,n,r,s){const i=this;i.Ie=e,i.De=t,i.Ve=n,i.Pe=r,i.Re=s}Ue.Be=Ee([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,Oe[t]]))),Ue.Ee=new Ue(Ue.Ae,Ke.ze,257,286,15),Ue.Me=new Ue(Ue.Be,Ke.Ce,0,30,15),Ue.Ke=new Ue(null,Ke.xe,0,19,7);const We=[new Te(0,0,0,0,0),new Te(4,4,8,4,1),new Te(4,5,16,8,1),new Te(4,6,32,32,1),new Te(4,4,16,16,2),new Te(8,16,32,32,2),new Te(8,16,128,128,2),new Te(8,32,128,256,2),new Te(32,128,258,1024,2),new Te(32,258,258,4096,2)],je=[\"need dictionary\",\"stream end\",\"\",\"\",\"stream error\",\"data error\",\"\",\"buffer error\",\"\",\"\"],He=113,Le=666,Fe=262;function qe(e,t,n,r){const s=e[2*t],i=e[2*n];return i>s||s==i&&r[t]<=r[n]}function Ge(){const e=this;let t,n,s,c,f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z,C,x,_,A,I,D,V,P,R,B,E,M,K;const U=new Ke,N=new Ke,O=new Ke;let T,W,j,H,L,F;function q(){let t;for(t=0;286>t;t++)E[2*t]=0;for(t=0;30>t;t++)M[2*t]=0;for(t=0;19>t;t++)K[2*t]=0;E[512]=1,e.ue=e.we=0,W=j=0}function G(e,t){let n,r=-1,s=e[1],i=0,o=7,c=4;0===s&&(o=138,c=3),e[2*(t+1)+1]=65535;for(let f=0;t>=f;f++)n=s,s=e[2*(f+1)+1],++i<o&&n==s||(c>i?K[2*n]+=i:0!==n?(n!=r&&K[2*n]++,K[32]++):i>10?K[36]++:K[34]++,i=0,r=n,0===s?(o=138,c=3):n==s?(o=6,c=3):(o=7,c=4))}function J(t){e.Ue[e.pending++]=t}function Q(e){J(255&e),J(e>>>8&255)}function X(e,t){let n;const r=t;F>16-r?(n=e,L|=n<<F&65535,Q(L),L=n>>>16-F,F+=r-16):(L|=e<<F&65535,F+=r)}function Y(e,t){const n=2*e;X(65535&t[n],65535&t[n+1])}function Z(e,t){let n,r,s=-1,i=e[1],o=0,c=7,f=4;for(0===i&&(c=138,f=3),n=0;t>=n;n++)if(r=i,i=e[2*(n+1)+1],++o>=c||r!=i){if(f>o)do{Y(r,K)}while(0!=--o);else 0!==r?(r!=s&&(Y(r,K),o--),Y(16,K),X(o-3,2)):o>10?(Y(18,K),X(o-11,7)):(Y(17,K),X(o-3,3));o=0,s=r,0===i?(c=138,f=3):r==i?(c=6,f=3):(c=7,f=4)}}function $(){16==F?(Q(L),L=0,F=0):8>F||(J(255&L),L>>>=8,F-=8)}function ee(t,n){let s,i,o;if(e.Ne[W]=t,e.Oe[W]=255&n,W++,0===t?E[2*n]++:(j++,t--,E[2*(Ke.ge[n]+256+1)]++,M[2*Ke.Se(t)]++),0==(8191&W)&&V>2){for(s=8*W,i=C-k,o=0;30>o;o++)s+=M[2*o]*(5+Ke.Ce[o]);if(s>>>=3,j<r.floor(W/2)&&s<r.floor(i/2))return!0}return W==T-1}function te(t,n){let r,s,i,o,c=0;if(0!==W)do{r=e.Ne[c],s=e.Oe[c],c++,0===r?Y(s,t):(i=Ke.ge[s],Y(i+256+1,t),o=Ke.ze[i],0!==o&&(s-=Ke.ke[i],X(s,o)),r--,i=Ke.Se(r),Y(i,n),o=Ke.Ce[i],0!==o&&(r-=Ke.ve[i],X(r,o)))}while(W>c);Y(256,t),H=t[513]}function ne(){F>8?Q(L):F>0&&J(255&L),L=0,F=0}function re(t,n,r){X(0+(r?1:0),3),((t,n)=>{ne(),H=8,Q(n),Q(~n),e.Ue.set(u.subarray(t,t+n),e.pending),e.pending+=n})(t,n)}function se(n){((t,n,r)=>{let s,i,o=0;V>0?(U.ne(e),N.ne(e),o=(()=>{let t;for(G(E,U.he),G(M,N.he),O.ne(e),t=18;t>=3&&0===K[2*Ke._e[t]+1];t--);return e.ue+=14+3*(t+1),t})(),s=e.ue+3+7>>>3,i=e.we+3+7>>>3,i>s||(s=i)):s=i=n+5,n+4>s||-1==t?i==s?(X(2+(r?1:0),3),te(Ue.Ae,Ue.Be)):(X(4+(r?1:0),3),((e,t,n)=>{let r;for(X(e-257,5),X(t-1,5),X(n-4,4),r=0;n>r;r++)X(K[2*Ke._e[r]+1],3);Z(E,e-1),Z(M,t-1)})(U.he+1,N.he+1,o+1),te(E,M)):re(t,n,r),q(),r&&ne()})(0>k?-1:k,C-k,n),k=C,t.Te()}function ie(){let e,n,r,s;do{if(s=w-_-C,0===s&&0===C&&0===_)s=f;else if(-1==s)s--;else if(C>=f+f-Fe){u.set(u.subarray(f,f+f),0),x-=f,C-=f,k-=f,e=y,r=e;do{n=65535&d[--r],d[r]=f>n?0:n-f}while(0!=--e);e=f,r=e;do{n=65535&h[--r],h[r]=f>n?0:n-f}while(0!=--e);s+=f}if(0===t.We)return;e=t.je(u,C+_,s),_+=e,3>_||(p=255&u[C],p=(p<<g^255&u[C+1])&b)}while(Fe>_&&0!==t.We)}function oe(e){let t,n,r=I,s=C,i=A;const o=C>f-Fe?C-(f-Fe):0;let c=B;const a=l,w=C+258;let d=u[s+i-1],p=u[s+i];R>A||(r>>=2),c>_&&(c=_);do{if(t=e,u[t+i]==p&&u[t+i-1]==d&&u[t]==u[s]&&u[++t]==u[s+1]){s+=2,t++;do{}while(u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&w>s);if(n=258-(w-s),s=w-258,n>i){if(x=e,i=n,n>=c)break;d=u[s+i-1],p=u[s+i]}}}while((e=65535&h[e&a])>o&&0!=--r);return i>_?_:i}e.le=[],e.be=[],e.ae=[],E=[],M=[],K=[],e.de=(t,n)=>{const r=e.ae,s=r[n];let i=n<<1;for(;i<=e.ce&&(i<e.ce&&qe(t,r[i+1],r[i],e.le)&&i++,!qe(t,s,r[i],e.le));)r[n]=r[i],n=i,i<<=1;r[n]=s},e.He=(t,S,x,W,j,G)=>(W||(W=8),j||(j=8),G||(G=0),t.Le=null,-1==S&&(S=6),1>j||j>9||8!=W||9>x||x>15||0>S||S>9||0>G||G>2?Re:(t.Fe=e,a=x,f=1<<a,l=f-1,m=j+7,y=1<<m,b=y-1,g=r.floor((m+3-1)/3),u=new i(2*f),h=[],d=[],T=1<<j+6,e.Ue=new i(4*T),s=4*T,e.Ne=new o(T),e.Oe=new i(T),V=S,P=G,(t=>(t.qe=t.Ge=0,t.Le=null,e.pending=0,e.Je=0,n=He,c=0,U.re=E,U.ie=Ue.Ee,N.re=M,N.ie=Ue.Me,O.re=K,O.ie=Ue.Ke,L=0,F=0,H=8,q(),(()=>{w=2*f,d[y-1]=0;for(let e=0;y-1>e;e++)d[e]=0;D=We[V].De,R=We[V].Ie,B=We[V].Ve,I=We[V].Pe,C=0,k=0,_=0,v=A=2,z=0,p=0})(),0))(t))),e.Qe=()=>42!=n&&n!=He&&n!=Le?Re:(e.Oe=null,e.Ne=null,e.Ue=null,d=null,h=null,u=null,e.Fe=null,n==He?-3:0),e.Xe=(e,t,n)=>{let r=0;return-1==t&&(t=6),0>t||t>9||0>n||n>2?Re:(We[V].Re!=We[t].Re&&0!==e.qe&&(r=e.Ye(1)),V!=t&&(V=t,D=We[V].De,R=We[V].Ie,B=We[V].Ve,I=We[V].Pe),P=n,r)},e.Ze=(e,t,r)=>{let s,i=r,o=0;if(!t||42!=n)return Re;if(3>i)return 0;for(i>f-Fe&&(i=f-Fe,o=r-i),u.set(t.subarray(o,o+i),0),C=i,k=i,p=255&u[0],p=(p<<g^255&u[1])&b,s=0;i-3>=s;s++)p=(p<<g^255&u[s+2])&b,h[s&l]=d[p],d[p]=s;return 0},e.Ye=(r,i)=>{let o,w,m,I,R;if(i>4||0>i)return Re;if(!r.$e||!r.et&&0!==r.We||n==Le&&4!=i)return r.Le=je[4],Re;if(0===r.tt)return r.Le=je[7],-5;var B;if(t=r,I=c,c=i,42==n&&(w=8+(a-8<<4)<<8,m=(V-1&255)>>1,m>3&&(m=3),w|=m<<6,0!==C&&(w|=32),w+=31-w%31,n=He,J((B=w)>>8&255),J(255&B)),0!==e.pending){if(t.Te(),0===t.tt)return c=-1,0}else if(0===t.We&&I>=i&&4!=i)return t.Le=je[7],-5;if(n==Le&&0!==t.We)return r.Le=je[7],-5;if(0!==t.We||0!==_||0!=i&&n!=Le){switch(R=-1,We[V].Re){case 0:R=(e=>{let n,r=65535;for(r>s-5&&(r=s-5);;){if(1>=_){if(ie(),0===_&&0==e)return 0;if(0===_)break}if(C+=_,_=0,n=k+r,(0===C||C>=n)&&(_=C-n,C=n,se(!1),0===t.tt))return 0;if(C-k>=f-Fe&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 1:R=(e=>{let n,r=0;for(;;){if(Fe>_){if(ie(),Fe>_&&0==e)return 0;if(0===_)break}if(3>_||(p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C),0===r||(C-r&65535)>f-Fe||2!=P&&(v=oe(r)),3>v)n=ee(0,255&u[C]),_--,C++;else if(n=ee(C-x,v-3),_-=v,v>D||3>_)C+=v,v=0,p=255&u[C],p=(p<<g^255&u[C+1])&b;else{v--;do{C++,p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C}while(0!=--v);C++}if(n&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 2:R=(e=>{let n,r,s=0;for(;;){if(Fe>_){if(ie(),Fe>_&&0==e)return 0;if(0===_)break}if(3>_||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C),A=v,S=x,v=2,0!==s&&D>A&&f-Fe>=(C-s&65535)&&(2!=P&&(v=oe(s)),5>=v&&(1==P||3==v&&C-x>4096)&&(v=2)),3>A||v>A)if(0!==z){if(n=ee(0,255&u[C-1]),n&&se(!1),C++,_--,0===t.tt)return 0}else z=1,C++,_--;else{r=C+_-3,n=ee(C-1-S,A-3),_-=A-1,A-=2;do{++C>r||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C)}while(0!=--A);if(z=0,v=2,C++,n&&(se(!1),0===t.tt))return 0}}return 0!==z&&(n=ee(0,255&u[C-1]),z=0),se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i)}if(2!=R&&3!=R||(n=Le),0==R||2==R)return 0===t.tt&&(c=-1),0;if(1==R){if(1==i)X(2,3),Y(256,Ue.Ae),$(),9>1+H+10-F&&(X(2,3),Y(256,Ue.Ae),$()),H=7;else if(re(0,0,!1),3==i)for(o=0;y>o;o++)d[o]=0;if(t.Te(),0===t.tt)return c=-1,0}}return 4!=i?0:1}}function Je(){const e=this;e.nt=0,e.rt=0,e.We=0,e.qe=0,e.tt=0,e.Ge=0}function Qe(e){const t=new Je,n=(o=e&&e.chunkSize?e.chunkSize:65536)+5*(r.floor(o/16383)+1);var o;const c=new i(n);let f=e?e.level:-1;void 0===f&&(f=-1),t.He(f),t.$e=c,this.append=(e,r)=>{let o,f,a=0,l=0,u=0;const w=[];if(e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,o=t.Ye(0),0!=o)throw new s(\"deflating: \"+t.Le);t.rt&&(t.rt==n?w.push(new i(c)):w.push(c.slice(0,t.rt))),u+=t.rt,r&&t.nt>0&&t.nt!=a&&(r(t.nt),a=t.nt)}while(t.We>0||0===t.tt);return w.length>1?(f=new i(u),w.forEach((e=>{f.set(e,l),l+=e.length}))):f=w[0]||new i,f}},this.flush=()=>{let e,r,o=0,f=0;const a=[];do{if(t.rt=0,t.tt=n,e=t.Ye(4),1!=e&&0!=e)throw new s(\"deflating: \"+t.Le);n-t.tt>0&&a.push(c.slice(0,t.rt)),f+=t.rt}while(t.We>0||0===t.tt);return t.Qe(),r=new i(f),a.forEach((e=>{r.set(e,o),o+=e.length})),r}}Je.prototype={He(e,t){const n=this;return n.Fe=new Ge,t||(t=15),n.Fe.He(n,e,t)},Ye(e){const t=this;return t.Fe?t.Fe.Ye(t,e):Re},Qe(){const e=this;if(!e.Fe)return Re;const t=e.Fe.Qe();return e.Fe=null,t},Xe(e,t){const n=this;return n.Fe?n.Fe.Xe(n,e,t):Re},Ze(e,t){const n=this;return n.Fe?n.Fe.Ze(n,e,t):Re},je(e,t,n){const r=this;let s=r.We;return s>n&&(s=n),0===s?0:(r.We-=s,e.set(r.et.subarray(r.nt,r.nt+s),t),r.nt+=s,r.qe+=s,s)},Te(){const e=this;let t=e.Fe.pending;t>e.tt&&(t=e.tt),0!==t&&(e.$e.set(e.Fe.Ue.subarray(e.Fe.Je,e.Fe.Je+t),e.rt),e.rt+=t,e.Fe.Je+=t,e.Ge+=t,e.tt-=t,e.Fe.pending-=t,0===e.Fe.pending&&(e.Fe.Je=0))}};const Xe=-2,Ye=-3,Ze=-5,$e=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],et=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],tt=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],nt=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],rt=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],st=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],it=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];function ot(){let e,t,n,r,s,i;function o(e,t,o,c,f,a,l,u,w,h,d){let p,y,m,b,g,k,v,S,z,C,x,_,A,I,D;C=0,g=o;do{n[e[t+C]]++,C++,g--}while(0!==g);if(n[0]==o)return l[0]=-1,u[0]=0,0;for(S=u[0],k=1;15>=k&&0===n[k];k++);for(v=k,k>S&&(S=k),g=15;0!==g&&0===n[g];g--);for(m=g,S>g&&(S=g),u[0]=S,I=1<<k;g>k;k++,I<<=1)if(0>(I-=n[k]))return Ye;if(0>(I-=n[g]))return Ye;for(n[g]+=I,i[1]=k=0,C=1,A=2;0!=--g;)i[A]=k+=n[C],A++,C++;g=0,C=0;do{0!==(k=e[t+C])&&(d[i[k]++]=g),C++}while(++g<o);for(o=i[m],i[0]=g=0,C=0,b=-1,_=-S,s[0]=0,x=0,D=0;m>=v;v++)for(p=n[v];0!=p--;){for(;v>_+S;){if(b++,_+=S,D=m-_,D=D>S?S:D,(y=1<<(k=v-_))>p+1&&(y-=p+1,A=v,D>k))for(;++k<D&&(y<<=1)>n[++A];)y-=n[A];if(D=1<<k,h[0]+D>1440)return Ye;s[b]=x=h[0],h[0]+=D,0!==b?(i[b]=g,r[0]=k,r[1]=S,k=g>>>_-S,r[2]=x-s[b-1]-k,w.set(r,3*(s[b-1]+k))):l[0]=x}for(r[1]=v-_,o>C?d[C]<c?(r[0]=256>d[C]?0:96,r[2]=d[C++]):(r[0]=a[d[C]-c]+16+64,r[2]=f[d[C++]-c]):r[0]=192,y=1<<v-_,k=g>>>_;D>k;k+=y)w.set(r,3*(x+k));for(k=1<<v-1;0!=(g&k);k>>>=1)g^=k;for(g^=k,z=(1<<_)-1;(g&z)!=i[b];)b--,_-=S,z=(1<<_)-1}return 0!==I&&1!=m?Ze:0}function c(o){let c;for(e||(e=[],t=[],n=new f(16),r=[],s=new f(15),i=new f(16)),t.length<o&&(t=[]),c=0;o>c;c++)t[c]=0;for(c=0;16>c;c++)n[c]=0;for(c=0;3>c;c++)r[c]=0;s.set(n.subarray(0,15),0),i.set(n.subarray(0,16),0)}this.st=(n,r,s,i,f)=>{let a;return c(19),e[0]=0,a=o(n,0,19,19,null,null,s,r,i,e,t),a==Ye?f.Le=\"oversubscribed dynamic bit lengths tree\":a!=Ze&&0!==r[0]||(f.Le=\"incomplete dynamic bit lengths tree\",a=Ye),a},this.it=(n,r,s,i,f,a,l,u,w)=>{let h;return c(288),e[0]=0,h=o(s,0,n,257,nt,rt,a,i,u,e,t),0!=h||0===i[0]?(h==Ye?w.Le=\"oversubscribed literal/length tree\":-4!=h&&(w.Le=\"incomplete literal/length tree\",h=Ye),h):(c(288),h=o(s,n,r,0,st,it,l,f,u,e,t),0!=h||0===f[0]&&n>257?(h==Ye?w.Le=\"oversubscribed distance tree\":h==Ze?(w.Le=\"incomplete distance tree\",h=Ye):-4!=h&&(w.Le=\"empty distance tree with lengths\",h=Ye),h):0)}}function ct(){const e=this;let t,n,r,s,i=0,o=0,c=0,f=0,a=0,l=0,u=0,w=0,h=0,d=0;function p(e,t,n,r,s,i,o,c){let f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z;d=c.nt,p=c.We,w=o.ot,h=o.ct,y=o.write,m=y<o.read?o.read-y-1:o.end-y,b=$e[e],g=$e[t];do{for(;20>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(f=w&b,a=n,l=r,z=3*(l+f),0!==(u=a[z]))for(;;){if(w>>=a[z+1],h-=a[z+1],0!=(16&u)){for(u&=15,k=a[z+2]+(w&$e[u]),w>>=u,h-=u;15>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;for(f=w&g,a=s,l=i,z=3*(l+f),u=a[z];;){if(w>>=a[z+1],h-=a[z+1],0!=(16&u)){for(u&=15;u>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(v=a[z+2]+(w&$e[u]),w>>=u,h-=u,m-=k,v>y){S=y-v;do{S+=o.end}while(0>S);if(u=o.end-S,k>u){if(k-=u,y-S>0&&u>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--u);else o.lt.set(o.lt.subarray(S,S+u),y),y+=u,S+=u,u=0;S=0}}else S=y-v,y-S>0&&2>y-S?(o.lt[y++]=o.lt[S++],o.lt[y++]=o.lt[S++],k-=2):(o.lt.set(o.lt.subarray(S,S+2),y),y+=2,S+=2,k-=2);if(y-S>0&&k>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--k);else o.lt.set(o.lt.subarray(S,S+k),y),y+=k,S+=k,k=0;break}if(0!=(64&u))return c.Le=\"invalid distance code\",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,Ye;f+=a[z+2],f+=w&$e[u],z=3*(l+f),u=a[z]}break}if(0!=(64&u))return 0!=(32&u)?(k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,1):(c.Le=\"invalid literal/length code\",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,Ye);if(f+=a[z+2],f+=w&$e[u],z=3*(l+f),0===(u=a[z])){w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--;break}}else w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--}while(m>=258&&p>=10);return k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,0}e.init=(e,i,o,c,f,a)=>{t=0,u=e,w=i,r=o,h=c,s=f,d=a,n=null},e.ut=(e,y,m)=>{let b,g,k,v,S,z,C,x=0,_=0,A=0;for(A=y.nt,v=y.We,x=e.ot,_=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S;;)switch(t){case 0:if(z>=258&&v>=10&&(e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,m=p(u,w,r,h,s,d,e,y),A=y.nt,v=y.We,x=e.ot,_=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S,0!=m)){t=1==m?7:9;break}c=u,n=r,o=h,t=1;case 1:for(b=c;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}if(g=3*(o+(x&$e[b])),x>>>=n[g+1],_-=n[g+1],k=n[g],0===k){f=n[g+2],t=6;break}if(0!=(16&k)){a=15&k,i=n[g+2],t=2;break}if(0==(64&k)){c=k,o=g/3+n[g+2];break}if(0!=(32&k)){t=7;break}return t=9,y.Le=\"invalid literal/length code\",m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 2:for(b=a;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}i+=x&$e[b],x>>=b,_-=b,c=w,n=s,o=d,t=3;case 3:for(b=c;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}if(g=3*(o+(x&$e[b])),x>>=n[g+1],_-=n[g+1],k=n[g],0!=(16&k)){a=15&k,l=n[g+2],t=4;break}if(0==(64&k)){c=k,o=g/3+n[g+2];break}return t=9,y.Le=\"invalid distance code\",m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 4:for(b=a;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}l+=x&$e[b],x>>=b,_-=b,t=5;case 5:for(C=S-l;0>C;)C+=e.end;for(;0!==i;){if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);e.lt[S++]=e.lt[C++],z--,C==e.end&&(C=0),i--}t=0;break;case 6:if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,e.lt[S++]=f,z--,t=0;break;case 7:if(_>7&&(_-=8,v++,A--),e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,e.read!=e.write)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);t=8;case 8:return m=1,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 9:return m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);default:return m=Xe,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m)}},e.ht=()=>{}}ot.dt=(e,t,n,r)=>(e[0]=9,t[0]=5,n[0]=et,r[0]=tt,0);const ft=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];function at(e,t){const n=this;let r,s=0,o=0,c=0,a=0;const l=[0],u=[0],w=new ct;let h=0,d=new f(4320);const p=new ot;n.ct=0,n.ot=0,n.lt=new i(t),n.end=t,n.read=0,n.write=0,n.reset=(e,t)=>{t&&(t[0]=0),6==s&&w.ht(e),s=0,n.ct=0,n.ot=0,n.read=n.write=0},n.reset(e,null),n.wt=(e,t)=>{let r,s,i;return s=e.rt,i=n.read,r=(i>n.write?n.end:n.write)-i,r>e.tt&&(r=e.tt),0!==r&&t==Ze&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r,i==n.end&&(i=0,n.write==n.end&&(n.write=0),r=n.write-i,r>e.tt&&(r=e.tt),0!==r&&t==Ze&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r),e.rt=s,n.read=i,t},n.ut=(e,t)=>{let i,f,y,m,b,g,k,v;for(m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g;;){let S,z,C,x,_,A,I,D;switch(s){case 0:for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}switch(i=7&f,h=1&i,i>>>1){case 0:f>>>=3,y-=3,i=7&y,f>>>=i,y-=i,s=1;break;case 1:S=[],z=[],C=[[]],x=[[]],ot.dt(S,z,C,x),w.init(S[0],z[0],C[0],0,x[0],0),f>>>=3,y-=3,s=6;break;case 2:f>>>=3,y-=3,s=3;break;case 3:return f>>>=3,y-=3,s=9,e.Le=\"invalid block type\",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}break;case 1:for(;32>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if((~f>>>16&65535)!=(65535&f))return s=9,e.Le=\"invalid stored block lengths\",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);o=65535&f,f=y=0,s=0!==o?2:0!==h?7:0;break;case 2:if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(0===k&&(g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k&&(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k)))return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(t=0,i=o,i>b&&(i=b),i>k&&(i=k),n.lt.set(e.je(m,i),g),m+=i,b-=i,g+=i,k-=i,0!=(o-=i))break;s=0!==h?7:0;break;case 3:for(;14>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(c=i=16383&f,(31&i)>29||(i>>5&31)>29)return s=9,e.Le=\"too many length or distance symbols\",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(i=258+(31&i)+(i>>5&31),!r||r.length<i)r=[];else for(v=0;i>v;v++)r[v]=0;f>>>=14,y-=14,a=0,s=4;case 4:for(;4+(c>>>10)>a;){for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}r[ft[a++]]=7&f,f>>>=3,y-=3}for(;19>a;)r[ft[a++]]=0;if(l[0]=7,i=p.st(r,l,u,d,e),0!=i)return(t=i)==Ye&&(r=null,s=9),n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);a=0,s=5;case 5:for(;i=c,258+(31&i)+(i>>5&31)>a;){let o,w;for(i=l[0];i>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(i=d[3*(u[0]+(f&$e[i]))+1],w=d[3*(u[0]+(f&$e[i]))+2],16>w)f>>>=i,y-=i,r[a++]=w;else{for(v=18==w?7:w-14,o=18==w?11:3;i+v>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(f>>>=i,y-=i,o+=f&$e[v],f>>>=v,y-=v,v=a,i=c,v+o>258+(31&i)+(i>>5&31)||16==w&&1>v)return r=null,s=9,e.Le=\"invalid bit length repeat\",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w=16==w?r[v-1]:0;do{r[v++]=w}while(0!=--o);a=v}}if(u[0]=-1,_=[],A=[],I=[],D=[],_[0]=9,A[0]=6,i=c,i=p.it(257+(31&i),1+(i>>5&31),r,_,A,I,D,d,e),0!=i)return i==Ye&&(r=null,s=9),t=i,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w.init(_[0],A[0],d,I[0],d,D[0]),s=6;case 6:if(n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,1!=(t=w.ut(n,e,t)))return n.wt(e,t);if(t=0,w.ht(e),m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g,0===h){s=0;break}s=7;case 7:if(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,n.read!=n.write)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);s=8;case 8:return t=1,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);case 9:return t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);default:return t=Xe,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}}},n.ht=e=>{n.reset(e,null),n.lt=null,d=null},n.yt=(e,t,r)=>{n.lt.set(e.subarray(t,t+r),0),n.read=n.write=r},n.bt=()=>1==s?1:0}const lt=13,ut=[0,0,255,255];function wt(){const e=this;function t(e){return e&&e.gt?(e.qe=e.Ge=0,e.Le=null,e.gt.mode=7,e.gt.kt.reset(e,null),0):Xe}e.mode=0,e.method=0,e.vt=[0],e.St=0,e.marker=0,e.zt=0,e.Ct=t=>(e.kt&&e.kt.ht(t),e.kt=null,0),e.xt=(n,r)=>(n.Le=null,e.kt=null,8>r||r>15?(e.Ct(n),Xe):(e.zt=r,n.gt.kt=new at(n,1<<r),t(n),0)),e._t=(e,t)=>{let n,r;if(!e||!e.gt||!e.et)return Xe;const s=e.gt;for(t=4==t?Ze:0,n=Ze;;)switch(s.mode){case 0:if(0===e.We)return n;if(n=t,e.We--,e.qe++,8!=(15&(s.method=e.ft(e.nt++)))){s.mode=lt,e.Le=\"unknown compression method\",s.marker=5;break}if(8+(s.method>>4)>s.zt){s.mode=lt,e.Le=\"invalid win size\",s.marker=5;break}s.mode=1;case 1:if(0===e.We)return n;if(n=t,e.We--,e.qe++,r=255&e.ft(e.nt++),((s.method<<8)+r)%31!=0){s.mode=lt,e.Le=\"incorrect header check\",s.marker=5;break}if(0==(32&r)){s.mode=7;break}s.mode=2;case 2:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St=(255&e.ft(e.nt++))<<24&4278190080,s.mode=3;case 3:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<16&16711680,s.mode=4;case 4:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<8&65280,s.mode=5;case 5:return 0===e.We?n:(n=t,e.We--,e.qe++,s.St+=255&e.ft(e.nt++),s.mode=6,2);case 6:return s.mode=lt,e.Le=\"need dictionary\",s.marker=0,Xe;case 7:if(n=s.kt.ut(e,n),n==Ye){s.mode=lt,s.marker=0;break}if(0==n&&(n=t),1!=n)return n;n=t,s.kt.reset(e,s.vt),s.mode=12;case 12:return e.We=0,1;case lt:return Ye;default:return Xe}},e.At=(e,t,n)=>{let r=0,s=n;if(!e||!e.gt||6!=e.gt.mode)return Xe;const i=e.gt;return s<1<<i.zt||(s=(1<<i.zt)-1,r=n-s),i.kt.yt(t,r,s),i.mode=7,0},e.It=e=>{let n,r,s,i,o;if(!e||!e.gt)return Xe;const c=e.gt;if(c.mode!=lt&&(c.mode=lt,c.marker=0),0===(n=e.We))return Ze;for(r=e.nt,s=c.marker;0!==n&&4>s;)e.ft(r)==ut[s]?s++:s=0!==e.ft(r)?0:4-s,r++,n--;return e.qe+=r-e.nt,e.nt=r,e.We=n,c.marker=s,4!=s?Ye:(i=e.qe,o=e.Ge,t(e),e.qe=i,e.Ge=o,c.mode=7,0)},e.Dt=e=>e&&e.gt&&e.gt.kt?e.gt.kt.bt():Xe}function ht(){}function dt(e){const t=new ht,n=e&&e.chunkSize?r.floor(2*e.chunkSize):131072,o=new i(n);let c=!1;t.xt(),t.$e=o,this.append=(e,r)=>{const f=[];let a,l,u=0,w=0,h=0;if(0!==e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,0!==t.We||c||(t.nt=0,c=!0),a=t._t(0),c&&a===Ze){if(0!==t.We)throw new s(\"inflating: bad input\")}else if(0!==a&&1!==a)throw new s(\"inflating: \"+t.Le);if((c||1===a)&&t.We===e.length)throw new s(\"inflating: bad input\");t.rt&&(t.rt===n?f.push(new i(o)):f.push(o.slice(0,t.rt))),h+=t.rt,r&&t.nt>0&&t.nt!=u&&(r(t.nt),u=t.nt)}while(t.We>0||0===t.tt);return f.length>1?(l=new i(h),f.forEach((e=>{l.set(e,w),w+=e.length}))):l=f[0]||new i,l}},this.flush=()=>{t.Ct()}}ht.prototype={xt(e){const t=this;return t.gt=new wt,e||(e=15),t.gt.xt(t,e)},_t(e){const t=this;return t.gt?t.gt._t(t,e):Xe},Ct(){const e=this;if(!e.gt)return Xe;const t=e.gt.Ct(e);return e.gt=null,t},It(){const e=this;return e.gt?e.gt.It(e):Xe},At(e,t){const n=this;return n.gt?n.gt.At(n,e,t):Xe},ft(e){return this.et[e]},je(e,t){return this.et.subarray(e,e+t)}},self.initCodec=()=>{self.Deflate=Qe,self.Inflate=dt};\\n'],{type:\"text/javascript\"}));e({workerScripts:{inflate:[t],deflate:[t]}})}export{e as configureWebWorker};\n","/// <reference types=\"./index.d.ts\" />\n\n/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport { Deflate } from \"./lib/core/streams/codecs/deflate.js\";\nimport { Inflate } from \"./lib/core/streams/codecs/inflate.js\";\nimport { configure } from \"./lib/core/configuration.js\";\nimport { getMimeType } from \"./lib/core/util/mime-type.js\";\nimport { terminateWorkers } from \"./lib/core/codec-pool.js\";\n\nconfigure({ Deflate, Inflate });\n\nexport {\n\tfs,\n\tconfigure,\n\tinitShimAsyncCodec,\n\tZipReader,\n\tZipWriter,\n\tReader,\n\tWriter,\n\tTextReader,\n\tTextWriter,\n\tData64URIReader,\n\tData64URIWriter,\n\tBlobReader,\n\tBlobWriter,\n\tHttpReader,\n\tHttpRangeReader,\n\tUint8ArrayWriter,\n\tUint8ArrayReader,\n\tSplitZipReader,\n\tSplitZipWriter,\n\tSplitDataReader,\n\tSplitDataWriter,\n\tERR_HTTP_RANGE,\n\tERR_BAD_FORMAT,\n\tERR_EOCDR_NOT_FOUND,\n\tERR_EOCDR_ZIP64_NOT_FOUND,\n\tERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND,\n\tERR_CENTRAL_DIRECTORY_NOT_FOUND,\n\tERR_LOCAL_FILE_HEADER_NOT_FOUND,\n\tERR_EXTRAFIELD_ZIP64_NOT_FOUND,\n\tERR_ENCRYPTED,\n\tERR_UNSUPPORTED_ENCRYPTION,\n\tERR_UNSUPPORTED_COMPRESSION,\n\tERR_INVALID_SIGNATURE,\n\tERR_INVALID_PASSWORD,\n\tERR_DUPLICATED_NAME,\n\tERR_INVALID_COMMENT,\n\tERR_INVALID_ENTRY_NAME,\n\tERR_INVALID_ENTRY_COMMENT,\n\tERR_INVALID_VERSION,\n\tERR_INVALID_EXTRAFIELD_TYPE,\n\tERR_INVALID_EXTRAFIELD_DATA,\n\tERR_INVALID_ENCRYPTION_STRENGTH,\n\tERR_UNSUPPORTED_FORMAT,\n\tERR_SPLIT_ZIP_FILE,\n\tERR_ITERATOR_COMPLETED_TOO_SOON\n} from \"./lib/zip-fs.js\";\nexport { getMimeType, terminateWorkers };","import { FactoryProgressCallback } from \"./factory\";\nimport {\n    Entry,\n    EntryGetDataOptions,\n    Uint8ArrayWriter,\n    WritableWriter,\n} from \"@zip.js/zip.js\";\n\nconst ZIP_ENTRY_HEADER_BEGIN_LENGTH = 30; // bytes\n\nexport enum DebugLevel {\n    Silent = 0,\n    Debug,\n    Verbose,\n}\n\nexport interface EntryMetadata {\n    offset: number;\n    compressionMethod: number;\n    compressedSize: number;\n    uncompressedSize: number;\n    headerSize: number;\n}\n\nlet debugLevel = DebugLevel.Silent;\n\nexport function logDebug(...data: any[]) {\n    if (debugLevel >= 1) {\n        console.log(...data);\n    }\n}\n\nexport function logVerbose(...data: any[]) {\n    if (debugLevel >= 2) {\n        console.log(...data);\n    }\n}\n\n/**\n * Change the debug level for the fastboot client:\n *   - 0 = silent\n *   - 1 = debug, recommended for general use\n *   - 2 = verbose, for debugging only\n *\n * @param {number} level - Debug level to use.\n */\nexport function setDebugLevel(level: DebugLevel) {\n    debugLevel = level;\n}\n\n/**\n * Reads all of the data in the given blob and returns it as an ArrayBuffer.\n *\n * @param {Blob} blob - Blob with the data to read.\n * @returns {Promise<ArrayBuffer>} ArrayBuffer containing data from the blob.\n * @ignore\n */\nexport function readBlobAsBuffer(blob: Blob): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n        let reader = new FileReader();\n        reader.onload = () => {\n            resolve(reader.result! as ArrayBuffer);\n        };\n        reader.onerror = () => {\n            reject(reader.error);\n        };\n\n        reader.readAsArrayBuffer(blob);\n    });\n}\n\nfunction waitForFrame() {\n    return new Promise((resolve, _reject) => {\n        window.requestAnimationFrame(resolve);\n    });\n}\n\nexport async function runWithTimedProgress<T>(\n    onProgress: FactoryProgressCallback,\n    action: string,\n    item: string,\n    duration: number,\n    workPromise: Promise<T>\n) {\n    let startTime = new Date().getTime();\n    let stop = false;\n\n    onProgress(action, item, 0.0);\n    let progressPromise = (async () => {\n        let now;\n        let targetTime = startTime + duration;\n\n        do {\n            now = new Date().getTime();\n            onProgress(action, item, (now - startTime) / duration);\n            await waitForFrame();\n        } while (!stop && now < targetTime);\n    })();\n\n    await Promise.race([progressPromise, workPromise]);\n    stop = true;\n    await progressPromise;\n    await workPromise;\n\n    onProgress(action, item, 1.0);\n}\n\n/** Exception class for operations that exceeded their timeout duration. */\nexport class TimeoutError extends Error {\n    timeout: number;\n\n    constructor(timeout: number) {\n        super(`Timeout of ${timeout} ms exceeded`);\n        this.name = \"TimeoutError\";\n        this.timeout = timeout;\n    }\n}\n\nexport function runWithTimeout<T>(\n    promise: Promise<T>,\n    timeout: number\n): Promise<T> {\n    return new Promise((resolve, reject) => {\n        // Set up timeout\n        let timedOut = false;\n        let tid = setTimeout(() => {\n            // Set sentinel first to prevent race in promise resolving\n            timedOut = true;\n            reject(new TimeoutError(timeout));\n        }, timeout);\n\n        // Passthrough\n        promise\n            .then((val) => {\n                if (!timedOut) {\n                    resolve(val);\n                }\n            })\n            .catch((err) => {\n                if (!timedOut) {\n                    reject(err);\n                }\n            })\n            .finally(() => {\n                if (!timedOut) {\n                    clearTimeout(tid);\n                }\n            });\n    });\n}\n\nexport async function getEntryMetadata(\n    blob: Blob,\n    entry: Entry\n): Promise<EntryMetadata> {\n    const offset = entry.offset;\n    const headerBeginRaw =\n        await blob.slice(offset, offset + ZIP_ENTRY_HEADER_BEGIN_LENGTH).arrayBuffer();\n    const dataView = new DataView(headerBeginRaw);\n    const compressionMethod = dataView.getUint16(8, true);\n    const compressedSize = dataView.getUint32(18, true);\n    const uncompressedSize = dataView.getUint32(22, true);\n    const fileNameLength = dataView.getUint16(26, true);\n    const extraFieldLength = dataView.getUint16(28, true);\n    const headerSize = ZIP_ENTRY_HEADER_BEGIN_LENGTH + fileNameLength + extraFieldLength;\n\n    return {\n        offset,\n        compressionMethod,\n        compressedSize,\n        uncompressedSize,\n        headerSize,\n    };\n}\n\n// Wrapper for Entry#getData() that unwraps ProgressEvent errors\nexport async function zipGetData<Type>(\n    entry: Entry,\n    writer: WritableWriter,\n    options?: EntryGetDataOptions\n): Promise<Type> {\n    try {\n        return await entry.getData!(writer, options);\n    } catch (e) {\n        if (\n            e instanceof ProgressEvent &&\n            e.type === \"error\" &&\n            e.target !== null\n        ) {\n            throw (e.target as any).error;\n        } else {\n            throw e;\n        }\n    }\n}\n\n// Unlike the TextWriter from zip.js, this function uses Uint8Array instead of Blob\nexport async function zipGetEntryAsString(\n    entry: Entry,\n    options?: EntryGetDataOptions\n): Promise<string> {\n    let writer = new Uint8ArrayWriter()\n    await zipGetData(entry, writer, options)\n    return new TextDecoder().decode(await writer.getData())\n}\n","import * as common from \"./common\";\n\nconst FILE_MAGIC = 0xed26ff3a;\n\nconst MAJOR_VERSION = 1;\nconst MINOR_VERSION = 0;\nexport const FILE_HEADER_SIZE = 28;\nconst CHUNK_HEADER_SIZE = 12;\n\n// AOSP libsparse uses 64 MiB chunks\nconst RAW_CHUNK_SIZE = 64 * 1024 * 1024;\n\nexport class ImageError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = \"ImageError\";\n    }\n}\n\nexport interface SparseSplit {\n    data: ArrayBuffer;\n    bytes: number;\n}\n\nexport enum ChunkType {\n    Raw = 0xcac1,\n    Fill = 0xcac2,\n    Skip = 0xcac3,\n    Crc32 = 0xcac4,\n}\n\nexport interface SparseHeader {\n    blockSize: number;\n    blocks: number;\n    chunks: number;\n    crc32: number;\n}\n\nexport interface SparseChunk {\n    type: ChunkType;\n    /* 2: reserved, 16 bits */\n    blocks: number;\n    dataBytes: number;\n    data: Blob | null; // to be populated by consumer\n}\n\nclass BlobBuilder {\n    private blob: Blob;\n    private type: string;\n\n    constructor(type: string = \"\") {\n        this.type = type;\n        this.blob = new Blob([], { type: this.type });\n    }\n\n    append(blob: Blob) {\n        this.blob = new Blob([this.blob, blob], { type: this.type });\n    }\n\n    getBlob(): Blob {\n        return this.blob;\n    }\n}\n\n/**\n * Returns a parsed version of the sparse image file header from the given buffer.\n *\n * @param {ArrayBuffer} buffer - Raw file header data.\n * @returns {SparseHeader} Object containing the header information.\n */\nexport function parseFileHeader(buffer: ArrayBuffer): SparseHeader | null {\n    let view = new DataView(buffer);\n\n    let magic = view.getUint32(0, true);\n    if (magic !== FILE_MAGIC) {\n        return null;\n    }\n\n    // v1.0+\n    let major = view.getUint16(4, true);\n    let minor = view.getUint16(6, true);\n    if (major !== MAJOR_VERSION || minor < MINOR_VERSION) {\n        throw new ImageError(\n            `Unsupported sparse image version ${major}.${minor}`\n        );\n    }\n\n    let fileHdrSize = view.getUint16(8, true);\n    let chunkHdrSize = view.getUint16(10, true);\n    if (\n        fileHdrSize !== FILE_HEADER_SIZE ||\n        chunkHdrSize !== CHUNK_HEADER_SIZE\n    ) {\n        throw new ImageError(\n            `Invalid file header size ${fileHdrSize}, chunk header size ${chunkHdrSize}`\n        );\n    }\n\n    let blockSize = view.getUint32(12, true);\n    if (blockSize % 4 !== 0) {\n        throw new ImageError(`Block size ${blockSize} is not a multiple of 4`);\n    }\n\n    return {\n        blockSize: blockSize,\n        blocks: view.getUint32(16, true),\n        chunks: view.getUint32(20, true),\n        crc32: view.getUint32(24, true),\n    };\n}\n\nfunction parseChunkHeader(buffer: ArrayBuffer) {\n    let view = new DataView(buffer);\n\n    // This isn't the same as what createImage takes.\n    // Further processing needs to be done on the chunks.\n    return {\n        type: view.getUint16(0, true),\n        /* 2: reserved, 16 bits */\n        blocks: view.getUint32(4, true),\n        dataBytes: view.getUint32(8, true) - CHUNK_HEADER_SIZE,\n        data: null, // to be populated by consumer\n    } as SparseChunk;\n}\n\nfunction calcChunksBlockSize(chunks: Array<SparseChunk>) {\n    return chunks\n        .map((chunk) => chunk.blocks)\n        .reduce((total, c) => total + c, 0);\n}\n\nfunction calcChunksDataSize(chunks: Array<SparseChunk>) {\n    return chunks\n        .map((chunk) => chunk.data!.size)\n        .reduce((total, c) => total + c, 0);\n}\n\nfunction calcChunksSize(chunks: Array<SparseChunk>) {\n    // 28-byte file header, 12-byte chunk headers\n    let overhead = FILE_HEADER_SIZE + CHUNK_HEADER_SIZE * chunks.length;\n    return overhead + calcChunksDataSize(chunks);\n}\n\nasync function createImage(header: SparseHeader, chunks: Array<SparseChunk>): Promise<Blob> {\n    let blobBuilder = new BlobBuilder();\n\n    let buffer = new ArrayBuffer(FILE_HEADER_SIZE);\n    let dataView = new DataView(buffer);\n    let arrayView = new Uint8Array(buffer);\n\n    dataView.setUint32(0, FILE_MAGIC, true);\n    // v1.0\n    dataView.setUint16(4, MAJOR_VERSION, true);\n    dataView.setUint16(6, MINOR_VERSION, true);\n    dataView.setUint16(8, FILE_HEADER_SIZE, true);\n    dataView.setUint16(10, CHUNK_HEADER_SIZE, true);\n\n    // Match input parameters\n    dataView.setUint32(12, header.blockSize, true);\n    dataView.setUint32(16, header.blocks, true);\n    dataView.setUint32(20, chunks.length, true);\n\n    // We don't care about the CRC. AOSP docs specify that this should be a CRC32,\n    // but AOSP libsparse always sets 0 and puts the CRC in a final undocumented\n    // 0xCAC4 chunk instead.\n    dataView.setUint32(24, 0, true);\n\n    blobBuilder.append(new Blob([buffer]));\n    for (let chunk of chunks) {\n        buffer = new ArrayBuffer(CHUNK_HEADER_SIZE + chunk.data!.size);\n        dataView = new DataView(buffer);\n        arrayView = new Uint8Array(buffer);\n\n        dataView.setUint16(0, chunk.type, true);\n        dataView.setUint16(2, 0, true); // reserved\n        dataView.setUint32(4, chunk.blocks, true);\n        dataView.setUint32(\n            8,\n            CHUNK_HEADER_SIZE + chunk.data!.size,\n            true\n        );\n\n        let chunkArrayView = new Uint8Array(await common.readBlobAsBuffer(chunk.data!));\n        arrayView.set(chunkArrayView, CHUNK_HEADER_SIZE);\n        blobBuilder.append(new Blob([buffer]));\n    }\n\n    return blobBuilder.getBlob();\n}\n\n/**\n * Creates a sparse image from buffer containing raw image data.\n *\n * @param {Blob} blob - Blob containing the raw image data.\n * @returns {Promise<Blob>} Promise that resolves the blob containing the new sparse image.\n */\nexport async function fromRaw(blob: Blob): Promise<Blob> {\n    let header = {\n        blockSize: 4096,\n        blocks: blob.size / 4096,\n        chunks: 1,\n        crc32: 0,\n    };\n\n    let chunks = [];\n    while (blob.size > 0) {\n        let chunkSize = Math.min(blob.size, RAW_CHUNK_SIZE);\n        chunks.push({\n            type: ChunkType.Raw,\n            blocks: chunkSize / header.blockSize,\n            data: blob.slice(0, chunkSize),\n        } as SparseChunk);\n        blob = blob.slice(chunkSize);\n    }\n\n    return createImage(header, chunks);\n}\n\n/**\n * Split a sparse image into smaller sparse images within the given size.\n * This takes a Blob instead of an ArrayBuffer because it may process images\n * larger than RAM.\n *\n * @param {Blob} blob - Blob containing the sparse image to split.\n * @param {number} splitSize - Maximum size per split.\n * @yields {Object} Data of the next split image and its output size in bytes.\n */\nexport async function* splitBlob(blob: Blob, splitSize: number) {\n    common.logDebug(\n        `Splitting ${blob.size}-byte sparse image into ${splitSize}-byte chunks`\n    );\n    // Short-circuit if splitting isn't required\n    if (blob.size <= splitSize) {\n        common.logDebug(\"Blob fits in 1 payload, not splitting\");\n        yield {\n            data: await common.readBlobAsBuffer(blob),\n            bytes: blob.size,\n        } as SparseSplit;\n        return;\n    }\n\n    let headerData = await common.readBlobAsBuffer(\n        blob.slice(0, FILE_HEADER_SIZE)\n    );\n    let header = parseFileHeader(headerData);\n    if (header === null) {\n        throw new ImageError(\"Blob is not a sparse image\");\n    }\n\n    // Remove CRC32 (if present), otherwise splitting will invalidate it\n    header.crc32 = 0;\n    blob = blob.slice(FILE_HEADER_SIZE);\n\n    let splitChunks: Array<SparseChunk> = [];\n    let splitDataBytes = 0;\n    for (let i = 0; i < header.chunks; i++) {\n        let chunkHeaderData = await common.readBlobAsBuffer(\n            blob.slice(0, CHUNK_HEADER_SIZE)\n        );\n        let chunk = parseChunkHeader(chunkHeaderData);\n        chunk.data = blob.slice(CHUNK_HEADER_SIZE, CHUNK_HEADER_SIZE + chunk.dataBytes);\n        blob = blob.slice(CHUNK_HEADER_SIZE + chunk.dataBytes);\n\n        let bytesRemaining = splitSize - calcChunksSize(splitChunks);\n        common.logVerbose(\n            `  Chunk ${i}: type ${chunk.type}, ${chunk.dataBytes} bytes / ${chunk.blocks} blocks, ${bytesRemaining} bytes remaining`\n        );\n        if (bytesRemaining >= chunk.dataBytes) {\n            // Read the chunk and add it\n            common.logVerbose(\"    Space is available, adding chunk\");\n            splitChunks.push(chunk);\n            // Track amount of data written on the output device, in bytes\n            splitDataBytes += chunk.blocks * header.blockSize;\n        } else {\n            // Out of space, finish this split\n            // Blocks need to be calculated from chunk headers instead of going by size\n            // because FILL and SKIP chunks cover more blocks than the data they contain.\n            let splitBlocks = calcChunksBlockSize(splitChunks);\n            splitChunks.push({\n                type: ChunkType.Skip,\n                blocks: header.blocks - splitBlocks,\n                data: new Blob([]),\n                dataBytes: 0,\n            });\n            common.logVerbose(\n                `Partition is ${\n                    header.blocks\n                } blocks, used ${splitBlocks}, padded with ${\n                    header.blocks - splitBlocks\n                }, finishing split with ${calcChunksBlockSize(\n                    splitChunks\n                )} blocks`\n            );\n            let splitImage = await createImage(header, splitChunks);\n            common.logDebug(\n                `Finished ${splitImage.size}-byte split with ${splitChunks.length} chunks`\n            );\n            yield {\n                data: await common.readBlobAsBuffer(splitImage),\n                bytes: splitDataBytes,\n            } as SparseSplit;\n\n            // Start a new split. Every split is considered a full image by the\n            // bootloader, so we need to skip the *total* written blocks.\n            common.logVerbose(\n                `Starting new split: skipping first ${splitBlocks} blocks and adding chunk`\n            );\n            splitChunks = [\n                {\n                    type: ChunkType.Skip,\n                    blocks: splitBlocks,\n                    data: new Blob([]),\n                    dataBytes: 0,\n                },\n                chunk,\n            ];\n            splitDataBytes = 0;\n        }\n    }\n\n    // Finish the final split if necessary\n    if (\n        splitChunks.length > 0 &&\n        (splitChunks.length > 1 || splitChunks[0].type !== ChunkType.Skip)\n    ) {\n        let splitImage = await createImage(header, splitChunks);\n        common.logDebug(\n            `Finishing final ${splitImage.size}-byte split with ${splitChunks.length} chunks`\n        );\n        yield {\n            data: await common.readBlobAsBuffer(splitImage),\n            bytes: splitDataBytes,\n        } as SparseSplit;\n    }\n}\n","import { Entry } from \"@zip.js/zip.js\";\nimport * as common from \"./common\";\nimport {\n    checkRequirements,\n    FactoryProgressCallback,\n    tryReboot,\n} from \"./factory\";\nimport {\n    FastbootDevice,\n    getOtherSlot,\n    PartitionSlot,\n    ReconnectCallback,\n} from \"./fastboot\";\n\nenum CommandType {\n    CheckRequirements,\n    CheckVar,\n    Erase,\n    Flash,\n    MaybeCancelSnapshotUpdate,\n    RebootBootloader,\n    RunCmd,\n    ToggleActiveSlot,\n}\n\ninterface Command {\n    type: CommandType;\n}\n\ninterface CheckRequirementsCommand extends Command {\n    fileName: string;\n}\n\ninterface CheckVarCommand extends Command {\n    varName: string;\n    expectedValue: string;\n}\n\ninterface EraseCommand extends Command {\n    partition: string;\n}\n\ninterface FlashCommand extends Command {\n    partition: string;\n    fileName: string;\n    slot: PartitionSlot;\n}\n\ninterface RunCmdCommand extends Command {\n    command: string;\n}\n\nexport async function flashOptimizedFactoryZip(\n    device: FastbootDevice,\n    zipEntriesArr: Entry[],\n    wipe: boolean,\n    onReconnect: ReconnectCallback,\n    onProgress: FactoryProgressCallback = (\n        _action: string,\n        _item: string,\n        _progress: number\n    ) => {}\n) {\n    let zipEntries = new Map<string, Entry>();\n    for (let e of zipEntriesArr) {\n        zipEntries.set(e.filename, e);\n    }\n\n    let flashScript = await FlashScript.parse(zipEntries);\n\n    let flashedBytes = 0;\n    for (let cmd_ of flashScript.commands) {\n        let totalProgress = flashedBytes / flashScript.totalFlashBytes;\n        switch (cmd_.type) {\n            case CommandType.CheckRequirements: {\n                let cmd = cmd_ as CheckRequirementsCommand;\n                let fileEntry = zipEntries.get(cmd.fileName)!;\n                await checkRequirements(\n                    device,\n                    await common.zipGetEntryAsString(fileEntry)\n                );\n                break;\n            }\n            case CommandType.CheckVar: {\n                let cmd = cmd_ as CheckVarCommand;\n                let value = await device.getVariable(cmd.varName);\n\n                if (value !== cmd.expectedValue) {\n                    throw new Error(\n                        `unexpected value of ${cmd.varName} variable: expected ${cmd.expectedValue}, got ${value}`\n                    );\n                }\n                common.logDebug(\n                    `checked that ${cmd.varName} is ${cmd.expectedValue}`\n                );\n                break;\n            }\n            case CommandType.Erase: {\n                let cmd = cmd_ as EraseCommand;\n                onProgress(\"wipe\", cmd.partition, totalProgress);\n                // avb_custom_key is required to be erased before flashing\n                if (wipe || cmd.partition === \"avb_custom_key\") {\n                    await device.runCommand(`erase:${cmd.partition}`);\n                } else {\n                    common.logDebug(\n                        `skipped EraseCommand for ${cmd.partition} since \"wipe\" param is false`\n                    );\n                }\n                break;\n            }\n            case CommandType.Flash: {\n                let cmd = cmd_ as FlashCommand;\n                let fileEntry = zipEntries.get(cmd.fileName)!;\n\n                let progressCallback = (progress: number) => {\n                    onProgress(\n                        \"flash\",\n                        cmd.fileName,\n                        totalProgress +\n                            progress *\n                                (fileEntry.uncompressedSize /\n                                    flashScript.totalFlashBytes)\n                    );\n                };\n\n                await device.flashZipEntry(\n                    cmd.partition,\n                    cmd.slot,\n                    fileEntry,\n                    progressCallback\n                );\n\n                flashedBytes += fileEntry.uncompressedSize;\n                break;\n            }\n            case CommandType.MaybeCancelSnapshotUpdate: {\n                let status = await device.getVariable(\"snapshot-update-status\");\n                if (status !== null && status !== \"none\") {\n                    await device.runCommand(\"snapshot-update:cancel\");\n                }\n                break;\n            }\n            case CommandType.RebootBootloader: {\n                onProgress(\"reboot\", \"device\", totalProgress);\n                await tryReboot(device, \"bootloader\", onReconnect);\n                break;\n            }\n            case CommandType.RunCmd: {\n                let cmd = cmd_ as RunCmdCommand;\n                await device.runCommand(cmd.command);\n                break;\n            }\n            case CommandType.ToggleActiveSlot: {\n                let curSlot = await device.getVariable(\"current-slot\");\n                await device.runCommand(\"set_active:\" + getOtherSlot(curSlot));\n                break;\n            }\n            default: {\n                throw new Error(\"unknown command: \" + cmd_.type);\n            }\n        }\n    }\n    common.logDebug(\"flashOptimizedFactoryZip() has completed\");\n}\n\nclass FlashScript {\n    public totalFlashBytes: number;\n\n    constructor(\n        readonly zipEntries: Map<string, Entry>,\n        readonly commands: Command[]\n    ) {\n        let totalBytes = 0;\n        for (let cmd of commands) {\n            if (cmd.type === CommandType.Flash) {\n                let flashCmd = cmd as FlashCommand;\n                let entry = zipEntries.get(flashCmd.fileName)!;\n                totalBytes += entry.uncompressedSize;\n            }\n        }\n        this.totalFlashBytes = totalBytes;\n    }\n\n    static async parse(zipEntries: Map<string, Entry>): Promise<FlashScript> {\n        let scriptEntry = zipEntries.get(\"script.txt\")!;\n        let scriptString = await common.zipGetEntryAsString(scriptEntry);\n        common.logDebug(\"script.txt:\\n\" + scriptString);\n        let scriptLines: string[] = scriptString.split(\"\\n\");\n\n        let commands: Command[] = [];\n        for (let line of scriptLines) {\n            if (line.length === 0 || line.startsWith(\"#\")) {\n                continue;\n            }\n\n            let tokens = line.split(\" \");\n            let name = tokens[0];\n            let cmd: Command;\n            let numTokens: number;\n            switch (name) {\n                case \"check-requirements\":\n                    cmd = {\n                        type: CommandType.CheckRequirements,\n                        fileName: tokens[1],\n                    } as CheckRequirementsCommand;\n                    numTokens = 2;\n                    break;\n                case \"check-var\":\n                    cmd = {\n                        type: CommandType.CheckVar,\n                        varName: tokens[1],\n                        expectedValue: tokens[2],\n                    } as CheckVarCommand;\n                    numTokens = 3;\n                    break;\n                case \"erase\":\n                    cmd = {\n                        type: CommandType.Erase,\n                        partition: tokens[1],\n                    } as EraseCommand;\n                    numTokens = 2;\n                    break;\n                case \"flash\":\n                    let flashCmd = {\n                        type: CommandType.Flash,\n                        partition: tokens[1],\n                        fileName: tokens[2],\n                    } as FlashCommand;\n                    cmd = flashCmd;\n                    if (tokens.length > 3) {\n                        if (tokens[3] === \"other-slot\") {\n                            flashCmd.slot = PartitionSlot.Other;\n                        } else {\n                            throw new Error(\"invalid command: \" + line);\n                        }\n                        numTokens = 4;\n                    } else {\n                        flashCmd.slot = PartitionSlot.Current;\n                        numTokens = 3;\n                    }\n                    break;\n                case \"maybe-cancel-snapshot-update\":\n                    cmd = {\n                        type: CommandType.MaybeCancelSnapshotUpdate,\n                    } as Command;\n                    numTokens = 1;\n                    break;\n                case \"reboot-bootloader\":\n                    cmd = {\n                        type: CommandType.RebootBootloader,\n                    } as Command;\n                    numTokens = 1;\n                    break;\n                case \"run-cmd\":\n                    cmd = {\n                        type: CommandType.RunCmd,\n                        command: line.substring(name.length + 1),\n                    } as RunCmdCommand;\n                    numTokens = tokens.length;\n                    break;\n                case \"toggle-active-slot\":\n                    cmd = {\n                        type: CommandType.ToggleActiveSlot,\n                    } as Command;\n                    numTokens = 1;\n                    break;\n                default:\n                    throw new Error(\"unknown command \" + line);\n            }\n            if (tokens.length !== numTokens) {\n                throw new Error(`invalid command ${line}`);\n            }\n            commands.push(cmd);\n        }\n\n        return new FlashScript(zipEntries, commands);\n    }\n}\n","import {\n    BlobReader,\n    BlobWriter,\n    Entry,\n    EntryGetDataOptions,\n    Reader,\n    Writer,\n} from \"@zip.js/zip.js\";\nimport {\n    EntryMetadata,\n    getEntryMetadata,\n    logDebug,\n    zipGetData,\n} from \"./common\";\n\nfunction parseIndex(index: number, size: number) {\n    return index < 0 ?\n        Math.max(index + size, 0) :\n        Math.min(index, size);\n}\n\nclass BlobEntryReaderImpl extends Reader<Blob> {\n    private readonly blob: Blob;\n    private readonly offset: number;\n\n    constructor(blob: Blob, entryMetadata: EntryMetadata) {\n        super(blob);\n\n        this.blob = blob;\n        this.offset = entryMetadata.offset + entryMetadata.headerSize;\n        this.size = entryMetadata.compressedSize;\n    }\n\n    async readUint8Array(index: number, length: number): Promise<Uint8Array> {\n        const start = parseIndex(index, this.size) + this.offset;\n        const end = parseIndex(index + length, this.size) + this.offset;\n        const blob = this.blob.slice(start, end);\n        return new Uint8Array(await blob.arrayBuffer());\n    }\n}\n\n/**\n * Represents a {@link Reader} instance used to read data of an entry in a zip\n * file provided as a {@link Blob}. It directly reads data if it is uncompressed.\n */\nexport class BlobEntryReader extends Reader<void> {\n    private readonly blob: Blob;\n    private readonly entry: Entry;\n    private readonly mimeString: string | undefined;\n    private readonly options: EntryGetDataOptions | undefined;\n\n    private reader: Reader<Blob> | undefined;\n\n    /**\n     * @param blob - The blob to read data from, usually the outer zip file.\n     * @param entry - The entry to read data of, usually the inner zip file.\n     * @param mimeString - The MIME type of the data.\n     * @param options - Represents options passed to {@link Entry#getData}.\n     */\n    constructor(\n        blob: Blob,\n        entry: Entry,\n        mimeString?: string,\n        options?: EntryGetDataOptions\n    ) {\n        super();\n\n        this.blob = blob;\n        this.entry = entry;\n        this.mimeString = mimeString;\n        this.options = options;\n    }\n\n    async init(): Promise<void> {\n        const entryMetadata = await getEntryMetadata(this.blob, this.entry);\n\n        if (entryMetadata.compressionMethod !== 0) {\n            const entryBlob: Blob = await zipGetData(\n                this.entry,\n                new BlobWriter(this.mimeString),\n                this.options\n            );\n            this.reader = new BlobReader(entryBlob);\n        } else {\n            this.reader = new BlobEntryReaderImpl(this.blob, entryMetadata);\n        }\n\n        this.size = this.reader.size;\n    }\n\n    async readUint8Array(index: number, length: number): Promise<Uint8Array> {\n        return this.reader!.readUint8Array(index, length);\n    }\n}\n\n/**\n * ChunkedWriter splits a stream into chunks and passes them to the consumer. Note that the final\n * chunk will be smaller than the requested chunk size if the stream length is not evenly divisible\n * by chunk size.\n */\nexport class ChunkedWriter extends Writer<number> {\n    private pendingChunk: Uint8Array;\n    private pendingChunkOffset = 0;\n\n    private streamOffset = 0;\n\n    constructor(\n        chunkSize: number,\n        readonly consumer: (buf: ArrayBuffer) => Promise<void>,\n        readonly streamLength: number\n    ) {\n        super();\n        this.pendingChunk = new Uint8Array(chunkSize);\n    }\n\n    async init(size?: number) {\n        if (this.streamLength !== size) {\n            throw new Error(`size (${size}) != streamLength (${this.streamLength}`);\n        }\n    }\n\n    private async sendToConsumer(buf: ArrayBuffer) {\n        await this.consumer(buf);\n        this.streamOffset += buf.byteLength;\n    }\n\n    async writeUint8Array(array: Uint8Array) {\n        let arrayOff = 0;\n        const arrayLen = array.length;\n        const chunkLen = this.pendingChunk.length;\n\n        while (arrayOff < arrayLen) {\n            const arrayRem = arrayLen - arrayOff;\n            if (this.pendingChunkOffset > 0 || arrayRem < chunkLen) {\n                const chunkRem = chunkLen - this.pendingChunkOffset;\n                if (chunkRem <= arrayRem) {\n                    this.pendingChunk.set(\n                        array.slice(arrayOff, arrayOff + chunkRem),\n                        this.pendingChunkOffset\n                    );\n                    arrayOff += chunkRem;\n                    this.pendingChunkOffset = 0;\n                    await this.sendToConsumer(this.pendingChunk);\n                    continue;\n                } else {\n                    this.pendingChunk.set(\n                        array.slice(arrayOff, arrayOff + arrayRem),\n                        this.pendingChunkOffset\n                    );\n                    arrayOff += arrayRem;\n                    this.pendingChunkOffset += arrayRem;\n                    break;\n                }\n            }\n            await this.sendToConsumer(array.slice(arrayOff, arrayOff + chunkLen));\n            arrayOff += chunkLen;\n        }\n\n        if (this.streamOffset + this.pendingChunkOffset > this.streamLength) {\n            throw new Error(\n                `streamOffset overflow: streamOffset ${this.streamOffset},` +\n                 ` pendingChunkOffset ${this.pendingChunkOffset}, streamLength ${this.streamLength}`\n            );\n        }\n\n        if (\n            this.pendingChunkOffset !== 0 &&\n            this.streamOffset + this.pendingChunkOffset === this.streamLength\n        ) {\n            logDebug(\n                `ChunkedWriter: sending remainder: ${this.pendingChunkOffset} bytes, streamLength: ${this.streamLength} bytes`\n            );\n            await this.sendToConsumer(this.pendingChunk.slice(0, this.pendingChunkOffset));\n            this.pendingChunkOffset = 0;\n        }\n    }\n\n    async getData() {\n        return this.streamOffset;\n    }\n}\n","import * as common from \"./common\";\nimport {\n    ZipReader,\n    BlobReader,\n    BlobWriter,\n    TextWriter,\n    Entry,\n} from \"@zip.js/zip.js\";\nimport { flashOptimizedFactoryZip } from \"./factory-optimized\";\nimport { FastbootDevice, FastbootError, ReconnectCallback } from \"./fastboot\";\nimport { BlobEntryReader } from \"./io\";\n\n/**\n * Callback for factory image flashing progress.\n *\n * @callback FactoryProgressCallback\n * @param {string} action - Action in the flashing process, e.g. unpack/flash.\n * @param {string} item - Item processed by the action, e.g. partition being flashed.\n * @param {number} progress - Progress within the current action between 0 and 1.\n */\nexport type FactoryProgressCallback = (\n    action: string,\n    item: string,\n    progress: number\n) => void;\n\n// Images needed for fastbootd\nconst BOOT_CRITICAL_IMAGES = [\n    \"boot\",\n    \"dt\",\n    \"dtbo\",\n    \"init_boot\",\n    \"pvmfw\",\n    \"recovery\",\n    \"vbmeta_system\",\n    \"vbmeta_vendor\",\n    \"vbmeta\",\n    \"vendor_boot\",\n    \"vendor_kernel_boot\",\n];\n\n// Less critical images to flash after boot-critical ones\nconst SYSTEM_IMAGES = [\n    \"odm\",\n    \"odm_dlkm\",\n    \"product\",\n    \"system_dlkm\",\n    \"system_ext\",\n    \"system\",\n    \"vendor_dlkm\",\n    \"vendor\",\n];\n\n/**\n * User-friendly action strings for factory image flashing progress.\n * This can be indexed by the action argument in FactoryFlashCallback.\n */\nexport const USER_ACTION_MAP = {\n    load: \"Loading\",\n    unpack: \"Unpacking\",\n    flash: \"Writing\",\n    wipe: \"Wiping\",\n    reboot: \"Restarting\",\n};\n\nconst BOOTLOADER_REBOOT_TIME = 4000; // ms\nconst FASTBOOTD_REBOOT_TIME = 16000; // ms\nconst USERDATA_ERASE_TIME = 1000; // ms\n\nasync function flashEntryBlob(\n    device: FastbootDevice,\n    entry: Entry,\n    onProgress: FactoryProgressCallback,\n    partition: string\n) {\n    const blob: Blob = await common.zipGetData(\n        entry,\n        new BlobWriter(\"application/octet-stream\"),\n        {\n            onstart(total: number): Promise<void> | undefined {\n                common.logDebug(`Unpacking ${partition} (${total} bytes)`);\n                onProgress(\"unpack\", partition, 0.0);\n                return;\n            },\n            onprogress(progress: number, total: number): Promise<void> | undefined {\n                onProgress(\"unpack\", partition, progress / total);\n                return;\n            }\n        }\n    );\n\n    common.logDebug(`Flashing ${partition}`);\n    onProgress(\"flash\", partition, 0.0);\n    await device.flashBlob(partition, blob, (progress) => {\n        onProgress(\"flash\", partition, progress);\n    });\n}\n\nasync function tryFlashImages(\n    device: FastbootDevice,\n    entries: Array<Entry>,\n    onProgress: FactoryProgressCallback,\n    imageNames: Array<string>\n) {\n    for (let imageName of imageNames) {\n        let pattern = new RegExp(`${imageName}(?:-.+)?\\\\.img$`);\n        let entry = entries.find((entry) => entry.filename.match(pattern));\n        if (entry !== undefined) {\n            if (imageName == \"bootloader\") {\n                let current_slot = await device.getVariable(\"current-slot\");\n                if (current_slot == \"a\") {\n                    await flashEntryBlob(device, entry, onProgress, (imageName + \"_b\"));\n                    await device.runCommand(\"set_active:b\");\n                } else if (current_slot == \"b\") {\n                    await flashEntryBlob(device, entry, onProgress, (imageName + \"_a\"));\n                    await device.runCommand(\"set_active:a\");\n                } else {\n                    throw new FastbootError(\n                        \"FAIL\",\n                        `Invalid slot given by bootloader.`\n                    );\n                }\n            }\n            else {\n                await flashEntryBlob(device, entry, onProgress, imageName);\n            }\n        }\n    }\n}\n\nexport async function checkRequirements(device: FastbootDevice, androidInfo: string) {\n    // Deal with CRLF just in case\n    for (let line of androidInfo.replace(\"\\r\", \"\").split(\"\\n\")) {\n        let match = line.match(/^require\\s+(.+?)=(.+)$/);\n        if (!match) {\n            continue;\n        }\n\n        let variable = match[1];\n        // Historical mismatch that we still need to deal with\n        if (variable === \"board\") {\n            variable = \"product\";\n        }\n\n        let expectValue = match[2];\n        let expectValues: Array<string | null> = expectValue.split(\"|\");\n\n        // Special case: not a real variable at all\n        if (variable === \"partition-exists\") {\n            // Check whether the partition exists on the device:\n            // has-slot = undefined || FAIL => doesn't exist\n            // has-slot = yes || no         => exists\n            let hasSlot = await device.getVariable(`has-slot:${expectValue}`);\n            if (hasSlot !== \"yes\" && hasSlot !== \"no\") {\n                throw new FastbootError(\n                    \"FAIL\",\n                    `Requirement ${variable}=${expectValue} failed, device lacks partition`\n                );\n            }\n\n            // Check whether we recognize the partition\n            if (\n                !BOOT_CRITICAL_IMAGES.includes(expectValue) &&\n                !SYSTEM_IMAGES.includes(expectValue)\n            ) {\n                throw new FastbootError(\n                    \"FAIL\",\n                    `Requirement ${variable}=${expectValue} failed, unrecognized partition`\n                );\n            }\n        } else {\n            let realValue = await device.getVariable(variable);\n\n            if (expectValues.includes(realValue)) {\n                common.logDebug(\n                    `Requirement ${variable}=${expectValue} passed`\n                );\n            } else {\n                let msg = `Requirement ${variable}=${expectValue} failed, value = ${realValue}`;\n                common.logDebug(msg);\n                throw new FastbootError(\"FAIL\", msg);\n            }\n        }\n    }\n}\n\nexport async function tryReboot(\n    device: FastbootDevice,\n    target: string,\n    onReconnect: ReconnectCallback\n) {\n    try {\n        await device.reboot(target, false);\n    } catch (e) {\n        /* Failed = device rebooted by itself */\n    }\n\n    await device.waitForConnect(onReconnect);\n}\n\nexport async function flashZip(\n    device: FastbootDevice,\n    blob: Blob,\n    wipe: boolean,\n    onReconnect: ReconnectCallback,\n    onProgress: FactoryProgressCallback = (\n        _action: string,\n        _item: string,\n        _progress: number\n    ) => {}\n) {\n    onProgress(\"load\", \"package\", 0.0);\n    let reader = new ZipReader(new BlobReader(blob));\n    let entries = await reader.getEntries();\n\n    if (entries.find((e) => e.filename === \"script.txt\") !== undefined) {\n        await flashOptimizedFactoryZip(device, entries, wipe, onReconnect, onProgress);\n        return;\n    }\n\n    // Bootloader and radio packs can only be flashed in the bare-metal bootloader\n    if ((await device.getVariable(\"is-userspace\")) === \"yes\") {\n        await device.reboot(\"bootloader\", true, onReconnect);\n    }\n\n    // 1. Bootloader pack (repeated for slot A and B)\n    await tryFlashImages(device, entries, onProgress, [\"bootloader\"]);\n    await common.runWithTimedProgress(\n        onProgress,\n        \"reboot\",\n        \"device\",\n        BOOTLOADER_REBOOT_TIME,\n        tryReboot(device, \"bootloader\", onReconnect)\n    );\n\n    await tryFlashImages(device, entries, onProgress, [\"bootloader\"]);\n    await common.runWithTimedProgress(\n        onProgress,\n        \"reboot\",\n        \"device\",\n        BOOTLOADER_REBOOT_TIME,\n        tryReboot(device, \"bootloader\", onReconnect)\n    );\n\n    // 2. Radio pack\n    await tryFlashImages(device, entries, onProgress, [\"radio\"]);\n    await common.runWithTimedProgress(\n        onProgress,\n        \"reboot\",\n        \"device\",\n        BOOTLOADER_REBOOT_TIME,\n        tryReboot(device, \"bootloader\", onReconnect)\n    );\n\n    // Cancel snapshot update if in progress\n    let snapshotStatus = await device.getVariable(\"snapshot-update-status\");\n    if (snapshotStatus !== null && snapshotStatus !== \"none\") {\n        await device.runCommand(\"snapshot-update:cancel\");\n    }\n\n    // Load nested images for the following steps\n    let entry = entries.find((e) => e.filename.match(/image-.+\\.zip$/));\n    const imageReader = new ZipReader(new BlobEntryReader(\n        blob,\n        entry!,\n        \"application/zip\",\n        {\n            onstart(total: number): Promise<void> | undefined {\n                common.logDebug(`Loading nested images from zip (${total} bytes)`);\n                onProgress(\"unpack\", \"images\", 0.0);\n                return;\n            },\n            onprogress(progress: number, total: number): Promise<void> | undefined {\n                onProgress(\"unpack\", \"images\", progress / total);\n                return;\n            }\n        }\n    ));\n    const imageEntries = await imageReader.getEntries();\n\n    // 3. Check requirements\n    entry = imageEntries.find((e) => e.filename === \"android-info.txt\");\n    if (entry !== undefined) {\n        const reqText: string = await common.zipGetData(entry, new TextWriter());\n        await checkRequirements(device, reqText);\n    }\n\n    // 4. Boot-critical images\n    await tryFlashImages(\n        device,\n        imageEntries,\n        onProgress,\n        BOOT_CRITICAL_IMAGES\n    );\n\n    // 5. Super partition template\n    // This is also where we reboot to fastbootd.\n    entry = imageEntries.find((e) => e.filename === \"super_empty.img\");\n    if (entry !== undefined) {\n        await common.runWithTimedProgress(\n            onProgress,\n            \"reboot\",\n            \"device\",\n            FASTBOOTD_REBOOT_TIME,\n            device.reboot(\"fastboot\", true, onReconnect)\n        );\n\n        let superName = await device.getVariable(\"super-partition-name\");\n        if (!superName) {\n            superName = \"super\";\n        }\n\n        let superAction = wipe ? \"wipe\" : \"flash\";\n        onProgress(superAction, \"super\", 0.0);\n        const superBlob: Blob = await common.zipGetData(\n            entry,\n            new BlobWriter(\"application/octet-stream\")\n        );\n        await device.upload(\n            superName,\n            await common.readBlobAsBuffer(superBlob),\n            (progress) => {\n                onProgress(superAction, \"super\", progress);\n            }\n        );\n        await device.runCommand(\n            `update-super:${superName}${wipe ? \":wipe\" : \"\"}`\n        );\n    }\n\n    // 6. Remaining system images\n    await tryFlashImages(device, imageEntries, onProgress, SYSTEM_IMAGES);\n\n    // We unconditionally reboot back to the bootloader here if we're in fastbootd,\n    // even when there's no custom AVB key, because common follow-up actions like\n    // locking the bootloader and wiping data need to be done in the bootloader.\n    if ((await device.getVariable(\"is-userspace\")) === \"yes\") {\n        await common.runWithTimedProgress(\n            onProgress,\n            \"reboot\",\n            \"device\",\n            BOOTLOADER_REBOOT_TIME,\n            device.reboot(\"bootloader\", true, onReconnect)\n        );\n    }\n\n    // 7. Custom AVB key\n    entry = entries.find((e) => e.filename.endsWith(\"avb_pkmd.bin\"));\n    if (entry !== undefined) {\n        await device.runCommand(\"erase:avb_custom_key\");\n        await flashEntryBlob(device, entry, onProgress, \"avb_custom_key\");\n    }\n\n    // 8. Wipe userdata\n    if (wipe) {\n        await common.runWithTimedProgress(\n            onProgress,\n            \"wipe\",\n            \"data\",\n            USERDATA_ERASE_TIME,\n            device.runCommand(\"erase:userdata\")\n        );\n    }\n}\n","import { Entry } from \"@zip.js/zip.js\";\nimport * as Sparse from \"./sparse\";\nimport * as common from \"./common\";\nimport {\n    FactoryProgressCallback,\n    flashZip as flashFactoryZip,\n} from \"./factory\";\nimport { ChunkedWriter } from \"./io\";\n\nconst FASTBOOT_USB_CLASS = 0xff;\nconst FASTBOOT_USB_SUBCLASS = 0x42;\nconst FASTBOOT_USB_PROTOCOL = 0x03;\n\nconst BULK_TRANSFER_SIZE = 16384;\n\nconst DEFAULT_DOWNLOAD_SIZE = 512 * 1024 * 1024; // 512 MiB\n// To conserve RAM and work around Chromium's ~2 GiB size limit, we limit the\n// max download size even if the bootloader can accept more data.\nconst MAX_DOWNLOAD_SIZE = 1024 * 1024 * 1024; // 1 GiB\n\nconst GETVAR_TIMEOUT = 10000; // ms\n\n/**\n * Exception class for USB errors not directly thrown by WebUSB.\n */\nexport class UsbError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = \"UsbError\";\n    }\n}\n\n/**\n * Exception class for errors returned by the bootloader, as well as high-level\n * fastboot errors resulting from bootloader responses.\n */\nexport class FastbootError extends Error {\n    status: string;\n    bootloaderMessage: string;\n\n    constructor(status: string, message: string) {\n        super(`Bootloader replied with ${status}: ${message}`);\n        this.status = status;\n        this.bootloaderMessage = message;\n        this.name = \"FastbootError\";\n    }\n}\n\ninterface CommandResponse {\n    text: string;\n    // hex string from DATA\n    dataSize?: string;\n}\n\n/**\n * Callback for progress updates while flashing or uploading an image.\n *\n * @callback FlashProgressCallback\n * @param {number} progress - Progress for the current action, between 0 and 1.\n */\nexport type FlashProgressCallback = (progress: number) => void;\n\n/**\n * Callback for reconnecting to the USB device.\n * This is necessary because some platforms do not support automatic reconnection,\n * and USB connection requests can only be triggered as the result of explicit\n * user action.\n *\n * @callback ReconnectCallback\n */\nexport type ReconnectCallback = () => void;\n\n/**\n * This class is a client for executing fastboot commands and operations on a\n * device connected over USB.\n */\nexport class FastbootDevice {\n    device: USBDevice | null;\n    epIn: number | null;\n    epOut: number | null;\n\n    private _registeredUsbListeners: boolean;\n    private _connectResolve: ((value: any) => void) | null;\n    private _connectReject: ((err: unknown) => void) | null;\n    private _disconnectResolve: ((value: any) => void) | null;\n\n    /**\n     * Create a new fastboot device instance. This doesn't actually connect to\n     * any USB devices; call {@link connect} to do so.\n     */\n    constructor() {\n        this.device = null;\n        this.epIn = null;\n        this.epOut = null;\n\n        this._registeredUsbListeners = false;\n        this._connectResolve = null;\n        this._connectReject = null;\n        this._disconnectResolve = null;\n    }\n\n    /**\n     * Returns whether a USB device is connected and ready for use.\n     */\n    get isConnected() {\n        return (\n            this.device !== null &&\n            this.device.opened &&\n            this.device.configurations[0].interfaces[0].claimed\n        );\n    }\n\n    /**\n     * Validate the current USB device's details and connect to it.\n     *\n     * @private\n     */\n    private async _validateAndConnectDevice() {\n        if (this.device === null) {\n            throw new UsbError(\"Attempted to connect to null device\");\n        }\n\n        // Validate device\n        let ife = this.device!.configurations[0].interfaces[0].alternates[0];\n        if (ife.endpoints.length !== 2) {\n            throw new UsbError(\"Interface has wrong number of endpoints\");\n        }\n\n        this.epIn = null;\n        this.epOut = null;\n        for (let endpoint of ife.endpoints) {\n            common.logVerbose(\"Checking endpoint:\", endpoint);\n            if (endpoint.type !== \"bulk\") {\n                throw new UsbError(\"Interface endpoint is not bulk\");\n            }\n\n            if (endpoint.direction === \"in\") {\n                if (this.epIn === null) {\n                    this.epIn = endpoint.endpointNumber;\n                } else {\n                    throw new UsbError(\"Interface has multiple IN endpoints\");\n                }\n            } else if (endpoint.direction === \"out\") {\n                if (this.epOut === null) {\n                    this.epOut = endpoint.endpointNumber;\n                } else {\n                    throw new UsbError(\"Interface has multiple OUT endpoints\");\n                }\n            }\n        }\n        common.logVerbose(\"Endpoints: in =\", this.epIn, \", out =\", this.epOut);\n\n        try {\n            await this.device!.open();\n            // Opportunistically reset to fix issues on some platforms\n            try {\n                await this.device!.reset();\n            } catch (error) {\n                /* Failed = doesn't support reset */\n            }\n\n            await this.device!.selectConfiguration(1);\n            await this.device!.claimInterface(0); // fastboot\n        } catch (error) {\n            // Propagate exception from waitForConnect()\n            if (this._connectReject !== null) {\n                this._connectReject(error);\n                this._connectResolve = null;\n                this._connectReject = null;\n            }\n\n            throw error;\n        }\n\n        // Return from waitForConnect()\n        if (this._connectResolve !== null) {\n            this._connectResolve(undefined);\n            this._connectResolve = null;\n            this._connectReject = null;\n        }\n    }\n\n    /**\n     * Wait for the current USB device to disconnect, if it's still connected.\n     * Returns immediately if no device is connected.\n     */\n    async waitForDisconnect() {\n        if (this.device === null) {\n            return;\n        }\n\n        return await new Promise((resolve, _reject) => {\n            this._disconnectResolve = resolve;\n        });\n    }\n\n    /**\n     * Wait for the USB device to connect. Returns at the next connection,\n     * regardless of whether the connected USB device matches the previous one.\n     *\n     * @param {ReconnectCallback} onReconnect - Callback to request device reconnection on Android.\n     */\n    async waitForConnect(onReconnect: ReconnectCallback = () => {}) {\n        // On Android, we need to request the user to reconnect the device manually\n        // because there is no support for automatic reconnection.\n        if (navigator.userAgent.includes(\"Android\")) {\n            await this.waitForDisconnect();\n            onReconnect();\n        }\n\n        return await new Promise((resolve, reject) => {\n            this._connectResolve = resolve;\n            this._connectReject = reject;\n        });\n    }\n\n    /**\n     * Request the user to select a USB device and connect to it using the\n     * fastboot protocol.\n     *\n     * @throws {UsbError}\n     */\n    async connect() {\n        let devices = await navigator.usb.getDevices();\n        common.logDebug(\"Found paired USB devices:\", devices);\n        if (devices.length === 1) {\n            this.device = devices[0];\n        } else {\n            // If multiple paired devices are connected, request the user to\n            // select a specific one to reduce ambiguity. This is also necessary\n            // if no devices are already paired, i.e. first use.\n            common.logDebug(\n                \"No or multiple paired devices are connected, requesting one\"\n            );\n            this.device = await navigator.usb.requestDevice({\n                filters: [\n                    {\n                        classCode: FASTBOOT_USB_CLASS,\n                        subclassCode: FASTBOOT_USB_SUBCLASS,\n                        protocolCode: FASTBOOT_USB_PROTOCOL,\n                    },\n                ],\n            });\n        }\n        common.logDebug(\"Using USB device:\", this.device);\n\n        if (!this._registeredUsbListeners) {\n            navigator.usb.addEventListener(\"disconnect\", (event) => {\n                if (event.device === this.device) {\n                    common.logDebug(\"USB device disconnected\");\n                    if (this._disconnectResolve !== null) {\n                        this._disconnectResolve(undefined);\n                        this._disconnectResolve = null;\n                    }\n                }\n            });\n\n            navigator.usb.addEventListener(\"connect\", async (event) => {\n                common.logDebug(\"USB device connected\");\n                this.device = event.device;\n\n                // Check whether waitForConnect() is pending and save it for later\n                let hasPromiseReject = this._connectReject !== null;\n                try {\n                    await this._validateAndConnectDevice();\n                } catch (error) {\n                    // Only rethrow errors from the event handler if waitForConnect()\n                    // didn't already handle them\n                    if (!hasPromiseReject) {\n                        throw error;\n                    }\n                }\n            });\n\n            this._registeredUsbListeners = true;\n        }\n\n        await this._validateAndConnectDevice();\n    }\n\n    /**\n     * Read a raw command response from the bootloader.\n     *\n     * @private\n     * @returns {Promise<CommandResponse>} Object containing response text and data size, if any.\n     * @throws {FastbootError}\n     */\n    private async _readResponse(): Promise<CommandResponse> {\n        let respData = {\n            text: \"\",\n        } as CommandResponse;\n        let respStatus;\n\n        do {\n            let respPacket = await this.device!.transferIn(this.epIn!, 64);\n            let response = new TextDecoder().decode(respPacket.data);\n\n            respStatus = response.substring(0, 4);\n            let respMessage = response.substring(4);\n            common.logDebug(`Response: ${respStatus} ${respMessage}`);\n\n            if (respStatus === \"OKAY\") {\n                // OKAY = end of response for this command\n                respData.text += respMessage;\n            } else if (respStatus === \"INFO\") {\n                // INFO = additional info line\n                respData.text += respMessage + \"\\n\";\n            } else if (respStatus === \"DATA\") {\n                // DATA = hex string, but it's returned separately for safety\n                respData.dataSize = respMessage;\n            } else {\n                // Assume FAIL or garbage data\n                throw new FastbootError(respStatus, respMessage);\n            }\n            // INFO = more packets are coming\n        } while (respStatus === \"INFO\");\n\n        return respData;\n    }\n\n    /**\n     * Send a textual command to the bootloader and read the response.\n     * This is in raw fastboot format, not AOSP fastboot syntax.\n     *\n     * @param {string} command - The command to send.\n     * @returns {Promise<CommandResponse>} Object containing response text and data size, if any.\n     * @throws {FastbootError}\n     */\n    async runCommand(command: string): Promise<CommandResponse> {\n        // Command and response length is always 64 bytes regardless of protocol\n        if (command.length > 64) {\n            throw new RangeError();\n        }\n\n        // Send raw UTF-8 command\n        let cmdPacket = new TextEncoder().encode(command);\n        await this.transferOut(cmdPacket);\n        common.logDebug(\"Command:\", command);\n\n        return this._readResponse();\n    }\n\n    /**\n     * Read the value of a bootloader variable. Returns undefined if the variable\n     * does not exist.\n     *\n     * @param {string} varName - The name of the variable to get.\n     * @returns {Promise<string>} Textual content of the variable.\n     * @throws {FastbootError}\n     */\n    async getVariable(varName: string): Promise<string | null> {\n        let resp;\n        try {\n            resp = (\n                await common.runWithTimeout(\n                    this.runCommand(`getvar:${varName}`),\n                    GETVAR_TIMEOUT\n                )\n            ).text;\n        } catch (error) {\n            // Some bootloaders return FAIL instead of empty responses, despite\n            // what the spec says. Normalize it here.\n            if (error instanceof FastbootError && error.status == \"FAIL\") {\n                resp = null;\n            } else {\n                throw error;\n            }\n        }\n\n        // Some bootloaders send whitespace around some variables.\n        // According to the spec, non-existent variables should return empty\n        // responses\n        return resp ? resp.trim() : null;\n    }\n\n    /**\n     * Get the maximum download size for a single payload, in bytes.\n     *\n     * @private\n     * @returns {Promise<number>}\n     * @throws {FastbootError}\n     */\n    private async _getDownloadSize(): Promise<number> {\n        try {\n            let resp = (await this.getVariable(\n                \"max-download-size\"\n            ))!.toLowerCase();\n            if (resp) {\n                // AOSP fastboot requires hex\n                return Math.min(parseInt(resp, 16), MAX_DOWNLOAD_SIZE);\n            }\n        } catch (error) {\n            /* Failed = no value, fallthrough */\n        }\n\n        // FAIL or empty variable means no max, set a reasonable limit to conserve memory\n        return DEFAULT_DOWNLOAD_SIZE;\n    }\n\n    /**\n     * Send a raw data payload to the bootloader.\n     *\n     * @private\n     */\n    private async _sendRawPayload(\n        buffer: ArrayBuffer,\n        onProgress: FlashProgressCallback\n    ) {\n        let i = 0;\n        let remainingBytes = buffer.byteLength;\n        while (remainingBytes > 0) {\n            let chunk = buffer.slice(\n                i * BULK_TRANSFER_SIZE,\n                (i + 1) * BULK_TRANSFER_SIZE\n            );\n            if (i % 1000 === 0) {\n                common.logVerbose(\n                    `  Sending ${chunk.byteLength} bytes to endpoint, ${remainingBytes} remaining, i=${i}`\n                );\n            }\n            if (i % 10 === 0) {\n                onProgress(\n                    (buffer.byteLength - remainingBytes) / buffer.byteLength\n                );\n            }\n\n            await this.transferOut(chunk);\n\n            remainingBytes -= chunk.byteLength;\n            i += 1;\n        }\n\n        onProgress(1.0);\n    }\n\n    async transferOut(data: BufferSource) {\n        let res: USBOutTransferResult = await this.device!.transferOut(\n            this.epOut!,\n            data\n        );\n        if (res.status !== \"ok\") {\n            throw new UsbError(`USBDevice.transferOut failed: ${res.status}`);\n        }\n        if (res.bytesWritten !== data.byteLength) {\n            throw new UsbError(\n                `USBDevice.transferOut failed: data length (${data.byteLength}) ` +\n                    `is not equal to bytesWritten (${res.bytesWritten})`\n            );\n        }\n    }\n\n    /**\n     * Upload a payload to the bootloader for later use, e.g. flashing.\n     * Does not handle raw images, flashing, or splitting.\n     *\n     * @param {string} partition - Name of the partition the payload is intended for.\n     * @param {ArrayBuffer} buffer - Buffer containing the data to upload.\n     * @param {FlashProgressCallback} onProgress - Callback for upload progress updates.\n     * @throws {FastbootError}\n     */\n    async upload(\n        partition: string,\n        buffer: ArrayBuffer,\n        onProgress: FlashProgressCallback = (_progress) => {}\n    ) {\n        common.logDebug(\n            `Uploading single sparse to ${partition}: ${buffer.byteLength} bytes`\n        );\n\n        // Bootloader requires an 8-digit hex number\n        let xferHex = buffer.byteLength.toString(16).padStart(8, \"0\");\n        if (xferHex.length !== 8) {\n            throw new FastbootError(\n                \"FAIL\",\n                `Transfer size overflow: ${xferHex} is more than 8 digits`\n            );\n        }\n\n        // Check with the device and make sure size matches\n        let downloadResp = await this.runCommand(`download:${xferHex}`);\n        if (downloadResp.dataSize === undefined) {\n            throw new FastbootError(\n                \"FAIL\",\n                `Unexpected response to download command: ${downloadResp.text}`\n            );\n        }\n        let downloadSize = parseInt(downloadResp.dataSize!, 16);\n        if (downloadSize !== buffer.byteLength) {\n            throw new FastbootError(\n                \"FAIL\",\n                `Bootloader wants ${downloadSize} bytes, requested to send ${buffer.byteLength} bytes`\n            );\n        }\n\n        common.logDebug(`Sending payload: ${buffer.byteLength} bytes`);\n        await this._sendRawPayload(buffer, onProgress);\n\n        common.logDebug(\"Payload sent, waiting for response...\");\n        await this._readResponse();\n    }\n\n    /**\n     * Uncompress and upload a zip entry to the device.\n     * Uncompressed zip entry contents are sent to the device as is, without any processing.\n     *\n     * @param {string} partition - Target partition.\n     * @param {Entry} entry - Source zip entry.\n     * @param {FlashProgressCallback} onProgress - Callback for upload progress updates.\n     * @throws {FastbootError}\n     */\n    async uploadZipEntry(\n        partition: string,\n        entry: Entry,\n        onProgress: FlashProgressCallback = (_progress) => {}\n    ) {\n        const entryLength = entry.uncompressedSize;\n        common.logDebug(`Uploading ${entryLength} bytes to ${partition}`);\n\n        // Bootloader requires an 8-digit hex number\n        let xferHex = entryLength.toString(16).padStart(8, \"0\");\n        if (xferHex.length !== 8) {\n            throw new FastbootError(\n                \"FAIL\",\n                `Transfer size overflow: ${xferHex} is more than 8 digits`\n            );\n        }\n\n        // Check with the device and make sure size matches\n        let downloadResp = await this.runCommand(`download:${xferHex}`);\n        if (downloadResp.dataSize === undefined) {\n            throw new FastbootError(\n                \"FAIL\",\n                `Unexpected response to download command: ${downloadResp.text}`\n            );\n        }\n\n        let downloadSize = parseInt(downloadResp.dataSize!, 16);\n        if (downloadSize !== entryLength) {\n            throw new FastbootError(\n                \"FAIL\",\n                `Bootloader wants ${downloadSize} bytes, requested to send ${entryLength} bytes`\n            );\n        }\n\n        common.logDebug(`Sending payload: ${entryLength} bytes`);\n\n        let xferredBytes = 0;\n        let prevProgressReport = 0;\n        let prevLog = 0;\n\n        let chunkConsumer = async (buf: ArrayBuffer) => {\n            await this.transferOut(buf);\n            xferredBytes += buf.byteLength;\n            // send progress updates every ~5 MiB\n            if (xferredBytes - prevProgressReport >= 5 * (1 << 20)) {\n                onProgress(xferredBytes / entryLength);\n                prevProgressReport = xferredBytes;\n            }\n            // log every ~50 MiB\n            if (xferredBytes - prevLog >= 50 * (1 << 20)) {\n                common.logDebug(\n                    `sent ${xferredBytes >> 20} MiB / ${entryLength >> 20} MiB`\n                );\n                prevLog = xferredBytes;\n            }\n        };\n\n        onProgress(0.0);\n\n        let uncompressedLength = await common.zipGetData(\n            entry,\n            // Split uncompressed entry contents into BULK_TRANSFER_SIZE-sized chunks.\n            // The final chunk might be smaller.\n            new ChunkedWriter(BULK_TRANSFER_SIZE, chunkConsumer, entryLength)\n        );\n        if (uncompressedLength !== entryLength) {\n            throw new Error(\n                `uncompressedLength (${uncompressedLength} != entryLength (${entryLength}`\n            );\n        }\n        if (xferredBytes !== entryLength) {\n            throw new Error(\n                `xferredBytes (${xferredBytes} != entryLength (${entryLength}`\n            );\n        }\n\n        onProgress(1.0);\n\n        common.logDebug(\"Payload sent, waiting for response...\");\n        await this._readResponse();\n    }\n\n    /**\n     * Reboot to the given target, and optionally wait for the device to\n     * reconnect.\n     *\n     * @param {string} target - Where to reboot to, i.e. fastboot or bootloader.\n     * @param {boolean} wait - Whether to wait for the device to reconnect.\n     * @param {ReconnectCallback} onReconnect - Callback to request device reconnection, if wait is enabled.\n     */\n    async reboot(\n        target: string = \"\",\n        wait: boolean = false,\n        onReconnect: ReconnectCallback = () => {}\n    ) {\n        if (target.length > 0) {\n            await this.runCommand(`reboot-${target}`);\n        } else {\n            await this.runCommand(\"reboot\");\n        }\n\n        if (wait) {\n            await this.waitForConnect(onReconnect);\n        }\n    }\n\n    /**\n     * Flash the given Blob to the given partition on the device. Any image\n     * format supported by the bootloader is allowed, e.g. sparse or raw images.\n     * Large raw images will be converted to sparse images automatically, and\n     * large sparse images will be split and flashed in multiple passes\n     * depending on the bootloader's payload size limit.\n     *\n     * @param {string} partition - The name of the partition to flash.\n     * @param {Blob} blob - The Blob to retrieve data from.\n     * @param {FlashProgressCallback} onProgress - Callback for flashing progress updates.\n     * @throws {FastbootError}\n     */\n    async flashBlob(\n        partition: string,\n        blob: Blob,\n        onProgress: FlashProgressCallback = (_progress) => {}\n    ) {\n        // Use current slot if partition is A/B\n        if ((await this.getVariable(`has-slot:${partition}`)) === \"yes\") {\n            partition += \"_\" + (await this.getVariable(\"current-slot\"));\n        }\n\n        let maxDlSize = await this._getDownloadSize();\n        let fileHeader = await common.readBlobAsBuffer(\n            blob.slice(0, Sparse.FILE_HEADER_SIZE)\n        );\n\n        let totalBytes = blob.size;\n        let isSparse = false;\n        try {\n            let sparseHeader = Sparse.parseFileHeader(fileHeader);\n            if (sparseHeader !== null) {\n                totalBytes = sparseHeader.blocks * sparseHeader.blockSize;\n                isSparse = true;\n            }\n        } catch (error) {\n            // ImageError = invalid, so keep blob.size\n        }\n\n        // Logical partitions need to be resized before flashing because they're\n        // sized perfectly to the payload.\n        if ((await this.getVariable(`is-logical:${partition}`)) === \"yes\") {\n            // As per AOSP fastboot, we reset the partition to 0 bytes first\n            // to optimize extent allocation.\n            await this.runCommand(`resize-logical-partition:${partition}:0`);\n            // Set the actual size\n            await this.runCommand(\n                `resize-logical-partition:${partition}:${totalBytes}`\n            );\n        }\n\n        // Convert image to sparse (for splitting) if it exceeds the size limit\n        if (blob.size > maxDlSize && !isSparse) {\n            common.logDebug(`${partition} image is raw, converting to sparse`);\n            blob = await Sparse.fromRaw(blob);\n        }\n\n        common.logDebug(\n            `Flashing ${blob.size} bytes to ${partition}, ${maxDlSize} bytes per split`\n        );\n        let splits = 0;\n        let sentBytes = 0;\n        for await (let split of Sparse.splitBlob(blob, maxDlSize)) {\n            await this.upload(partition, split.data, (progress) => {\n                onProgress((sentBytes + progress * split.bytes) / totalBytes);\n            });\n\n            common.logDebug(\"Flashing payload...\");\n            await this.runCommand(`flash:${partition}`);\n\n            splits += 1;\n            sentBytes += split.bytes;\n        }\n\n        common.logDebug(`Flashed ${partition} with ${splits} split(s)`);\n    }\n\n    /**\n     * Flash the given zip entry to the given partition on the device.\n     * Uncompressed zip entry contents are sent to the device as is, without any processing.\n     * The caller is expected to ensure that the entry size doesn't exceed the maximal bootloader\n     * payload limit.\n     *\n     * @param {string} partition - Target partition name, without slot suffix.\n     * @param {PartitionSlot} slot - Target partition slot.\n     * @param {Entry} entry - Source zip entry.\n     * @param {FlashProgressCallback} onProgress - Callback for flashing progress updates.\n     * @throws {FastbootError}\n     */\n    async flashZipEntry(\n        partition: string,\n        slot: PartitionSlot,\n        entry: Entry,\n        onProgress: FlashProgressCallback = (_progress) => {}\n    ) {\n        if ((await this.getVariable(`has-slot:${partition}`)) === \"yes\") {\n            let curSlot = await this.getVariable(\"current-slot\");\n            if (curSlot === null) {\n                throw new Error(\"unknown current slot\");\n            }\n            if (slot === PartitionSlot.Current) {\n                partition += \"_\" + curSlot;\n            } else {\n                if (slot !== PartitionSlot.Other) {\n                    throw new Error(`unexpected PartitionSlot ${slot}`);\n                }\n                partition += \"_\" + getOtherSlot(curSlot);\n            }\n        } else if (slot === PartitionSlot.Other) {\n            throw new Error(\n                `requested other partition slot, but ${partition} is not an A/B partition`\n            );\n        }\n\n        common.logDebug(\n            `Flashing ${entry.uncompressedSize} bytes to ${partition}`\n        );\n        await this.uploadZipEntry(partition, entry, onProgress);\n\n        common.logDebug(\"Flashing payload...\");\n        await this.runCommand(`flash:${partition}`);\n\n        common.logDebug(`Flashed ${partition}`);\n    }\n\n    /**\n     * Boot the given Blob on the device.\n     * Equivalent to `fastboot boot boot.img`.\n     *\n     * @param {Blob} blob - The Blob to retrieve data from.\n     * @param {FlashProgressCallback} onProgress - Callback for flashing progress updates.\n     * @throws {FastbootError}\n     */\n    async bootBlob(\n        blob: Blob,\n        onProgress: FlashProgressCallback = (_progress) => {}\n    ) {\n\n        common.logDebug(`Booting ${blob.size} bytes image`);\n\n        let data = await common.readBlobAsBuffer(blob);\n        await this.upload(\"boot.img\", data, onProgress);\n\n        common.logDebug(\"Booting payload...\");\n        await this.runCommand(\"boot\");\n\n        common.logDebug(`Booted ${blob.size} bytes image`);\n    }\n\n    /**\n     * Flash the given factory images zip onto the device, with automatic handling\n     * of firmware, system, and logical partitions as AOSP fastboot and\n     * flash-all.sh would do.\n     * Equivalent to `fastboot update name.zip`.\n     *\n     * @param {Blob} blob - Blob containing the zip file to flash.\n     * @param {boolean} wipe - Whether to wipe super and userdata. Equivalent to `fastboot -w`.\n     * @param {ReconnectCallback} onReconnect - Callback to request device reconnection.\n     * @param {FactoryProgressCallback} onProgress - Progress callback for image flashing.\n     */\n    async flashFactoryZip(\n        blob: Blob,\n        wipe: boolean,\n        onReconnect: ReconnectCallback,\n        onProgress: FactoryProgressCallback = (_progress) => {}\n    ) {\n        return await flashFactoryZip(this, blob, wipe, onReconnect, onProgress);\n    }\n}\n\nexport enum PartitionSlot {\n    Current, // no-op for non-A/B partitions\n    Other,\n}\n\nexport function getOtherSlot(currentSlot: string | null) {\n    if (currentSlot === \"a\") {\n        return \"b\";\n    }\n    if (currentSlot === \"b\") {\n        return \"a\";\n    }\n    throw new Error(\"unsupported currentSlot value: \" + currentSlot);\n}\n"],"names":["MAX_BITS","LITERALS","HEAP_SIZE","END_BLOCK","Z_DEFAULT_COMPRESSION","Z_NO_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_STREAM_ERROR","Z_BUF_ERROR","extractArray","array","flatArray","map","length","value","Array","fill","reduce","a","b","concat","isArray","_dist_code","Tree","that","this","bi_reverse","code","len","res","build_tree","s","tree","dyn_tree","stree","stat_desc","static_tree","elems","n","m","node","max_code","heap_len","heap_max","heap","depth","opt_len","static_len","Math","floor","pqdownheap","max","extra","extra_bits","base","extra_base","max_length","h","bits","xbits","f","overflow","bl_count","gen_bitlen","next_code","gen_codes","StaticTree","_length_code","base_length","base_dist","d_code","dist","extra_lbits","extra_dbits","extra_blbits","bl_order","static_ltree2_second_part","static_ltree","index","static_dtree_second_part","static_dtree","static_l_desc","static_d_desc","static_bl_desc","Config","good_length","max_lazy","nice_length","max_chain","func","config_table","z_errmsg","BUSY_STATE","FINISH_STATE","MAX_MATCH","MIN_LOOKAHEAD","smaller","tn2","tm2","Deflate","strm","status","pending_buf_size","last_flush","w_size","w_bits","w_mask","win","window_size","prev","head","ins_h","hash_size","hash_bits","hash_mask","hash_shift","block_start","match_length","prev_match","match_available","strstart","match_start","lookahead","prev_length","max_chain_length","max_lazy_match","level","strategy","good_match","nice_match","dyn_ltree","dyn_dtree","bl_tree","l_desc","d_desc","bl_desc","lit_bufsize","last_lit","matches","last_eob_len","bi_buf","bi_valid","init_block","i","scan_tree","curlen","prevlen","nextlen","count","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","put_byte","p","pending_buf","pending","put_short","w","send_bits","val","send_code","c","c2","send_tree","bi_flush","_tr_tally","lc","out_length","in_length","dcode","dist_buf","lc_buf","compress_block","ltree","dtree","lx","bi_windup","_tr_stored_block","buf","stored_len","eof","header","set","subarray","copy_block","_tr_flush_block","opt_lenb","static_lenb","max_blindex","BL_CODES","build_bl_tree","lcodes","dcodes","blcodes","rank","send_all_trees","flush_block_only","flush_pending","fill_window","more","avail_in","read_buf","longest_match","cur_match","match","chain_length","scan","best_len","limit","_nice_match","wmask","strend","scan_end1","scan_end","deflateReset","total_in","total_out","msg","pending_out","MIN_MATCH","lm_init","k","v","j","deflateInit","_level","_method","memLevel","_strategy","dstate","Uint8Array","Uint16Array","deflateEnd","deflateParams","err","deflate","deflateSetDictionary","_strm","dictionary","dictLength","flush","level_flags","old_flush","bstate","next_out","next_in","avail_out","Z_NEED_DICT","max_start","max_block_size","deflate_stored","bflush","hash_head","deflate_fast","max_insert","deflate_slow","STATIC_TREES","ZStream","next_in_index","next_out_index","prototype","ret","start","size","Z_DATA_ERROR","Z_MEM_ERROR","inflate_mask","MANY","fixed_tl","fixed_td","cplens","cplext","cpdist","cpdext","BMAX","InfTree","hn","r","u","x","huft_build","bindex","d","e","t","hp","g","l","mask","q","xp","y","z","initWorkArea","vsize","Int32Array","inflate_trees_bits","bb","tb","result","inflate_trees_dynamic","nl","nd","bl","bd","tl","td","inflate_trees_fixed","START","LEN","LENEXT","DIST","DISTEXT","COPY","LIT","WASH","END","BADCODE","InfCodes","mode","tree_index","need","lit","get","lbits","dbits","ltree_index","dtree_index","inflate_fast","tl_index","td_index","tp","tp_index","ml","md","tp_index_t_3","bitb","bitk","write","read","end","read_byte","init","proc","tindex","inflate_flush","free","border","TYPE","LENS","STORED","TABLE","BTREE","DTREE","CODES","DRY","DONELOCKS","BADBLOCKS","InfBlocks","blens","left","table","codes","last","hufts","inftree","reset","bl_","bd_","tl_","td_","set_dictionary","sync_point","BAD","mark","Inflate","inflateReset","istate","blocks","method","was","marker","wbits","inflateEnd","inflateInit","inflate","inflateSetDictionary","inflateSync","inflateSyncPoint","MAX_32_BITS","MAX_16_BITS","CENTRAL_FILE_HEADER_SIGNATURE","ZIP64_END_OF_CENTRAL_DIR_SIGNATURE","EXTRAFIELD_TYPE_NTFS_TAG1","UNDEFINED_VALUE","undefined","UNDEFINED_TYPE","FUNCTION_TYPE","StreamAdapter","constructor","Codec","TransformStream","_format","options","codec","super","transform","chunk","controller","enqueue","append","maxWorkers","navigator","hardwareConcurrency","_error","DEFAULT_CONFIGURATION","chunkSize","terminateWorkerTimeout","useWebWorkers","useCompressionStream","workerScripts","CompressionStreamNative","CompressionStream","DecompressionStreamNative","DecompressionStream","config","Object","assign","configure","configuration","baseURL","setIfDefined","Error","propertyName","propertyValue","application","annodex","bbolin","cap","dsptype","ecmascript","futuresplash","hta","javascript","m3g","mathematica","msaccess","msword","mxf","oda","ogg","pdf","postscript","rar","rtf","smil","xml","zip","applixware","exi","gxf","hyperstudio","ipfix","json","marc","mbox","mp21","mp4","onenote","oxps","pkcs10","pkcs8","pkixcmp","sdp","srgs","widget","winhlp","yang","envoy","fractals","olescript","audio","amr","basic","flac","midi","mpeg","mpegurl","adpcm","s3m","silk","webm","xm","mid","chemical","image","gif","ief","jpeg","pcx","png","tiff","bmp","cgm","g3fax","ktx","sgi","webp","pipeg","message","rfc822","model","iges","mesh","vrml","text","calendar","css","csv","h323","html","iuls","mathml","plain","richtext","scriptlet","texmacs","n3","sgml","troff","turtle","vcard","webviewhtml","video","avif","dl","dv","fli","gl","quicktime","h261","h263","h264","jpm","mj2","mimeTypes","type","hasOwnProperty","subtype","indexMimeType","Crc32","crc","data","offset","Crc32Stream","crc32","DataView","buffer","setUint32","bitArray","a1","a2","shift","getPartial","_shiftRight","slice","bitLength","clamp","ceil","partial","_end","round","carry","out","push","last2","shift2","pop","bytes","fromBits","arr","byteLength","tmp","toBits","hash","sha1","blockSize","_init","_key","_h","_buffer","_length","update","utf8String","ol","Uint32Array","_block","splice","finalize","_f","_S","words","cipher","key","aes","_tables","_precompute","sbox","decTable","keyLen","encKey","decKey","rcon","encrypt","_crypt","decrypt","encTable","sboxInv","th","xInv","x2","x4","x8","tDec","tEnc","input","dir","nInnerRounds","t0","t1","t2","t3","b2","kIndex","random","getRandomValues","typedArray","m_w","m_z","rcache","_r","prf","iv","_prf","_initIv","_iv","calculate","incWord","word","b1","b3","incCounter","counter","misc","importKey","password","hmacSha1","pbkdf2","salt","ui","arrayBuffer","ArrayBuffer","outLength","setInt32","hmac","Hash","_hash","exKey","_baseHash","bs","_resultHash","_updated","digest","GET_RANDOM_VALUES_SUPPORTED","crypto","ERR_INVALID_PASSWORD","ERR_INVALID_SIGNATURE","ERR_ABORT_CHECK_PASSWORD","BLOCK_LENGTH","RAW_FORMAT","PBKDF2_ALGORITHM","name","BASE_KEY_ALGORITHM","DERIVED_BITS_ALGORITHM","iterations","DERIVED_BITS_USAGE","SALT_LENGTH","KEY_LENGTH","SIGNATURE_LENGTH","COUNTER_DEFAULT_VALUE","CRYPTO_API_SUPPORTED","subtle","SUBTLE_API_SUPPORTED","codecBytes","Aes","CtrGladman","ctrGladman","HmacSha1","IMPORT_KEY_SUPPORTED","DERIVE_BITS_SUPPORTED","deriveBits","AESDecryptionStream","signed","encryptionStrength","checkPasswordOnly","ready","Promise","resolve","resolveReady","strength","async","aesCrypto","preamble","passwordVerificationKey","createKeys","passwordVerification","createDecryptionKeys","error","output","ctr","chunkToDecrypt","originalSignature","decryptedChunkArray","encryptedChunk","decryptedChunk","signature","indexSignature","AESEncryptionStream","stream","createEncryptionKeys","encryptedChunkArray","paddingStart","paddingEnd","verifySignature","inputLength","inputArray","expand","inputChunk","outputChunk","encodedPassword","TextEncoder","unescape","encodeURIComponent","charCodeAt","encode","encodeText","baseKey","format","algorithm","extractable","keyUsages","derivedBits","compositeKey","authentication","keys","from","leftArray","rightArray","begin","HEADER_LENGTH","ZipCryptoDecryptionStream","zipCrypto","decryptedHeader","ZipCryptoEncryptionStream","target","getByte","updateKeys","crcKey0","crcKey2","byte","key0","key1","key2","getInt32","imul","getInt8","temp","number","COMPRESSION_FORMAT","DeflateStream","compressed","encrypted","crc32Stream","encryptionStream","readable","filterEmptyChunks","tee","pipeThrough","pipeThroughCommpressionStream","setReadable","getReader","getUint32","InflateStream","decryptionStream","streamSignature","dataViewSignature","defineProperty","CodecStreamNative","CodecStream","transformStream","MESSAGE_EVENT_TYPE","MESSAGE_START","MESSAGE_PULL","MESSAGE_DATA","MESSAGE_ACK_DATA","MESSAGE_CLOSE","CODEC_INFLATE","codecType","Stream","startsWith","WEB_WORKERS_SUPPORTED","Worker","CodecWorker","workerData","writable","streamOptions","transferStreams","scripts","onTaskFinished","signal","busy","ProgressWatcherStream","terminate","worker","interface","createWebWorkerInterface","createWorkerInterface","readableSource","onstart","onprogress","onend","chunkOffset","callHandler","highWaterMark","handler","parameters","run","codecStream","pipeTo","preventClose","preventAbort","runWorker","getWebWorker","resolveResult","rejectResult","reject","reader","writer","closed","writableSource","getWriter","resolveStreamClosed","WritableStream","close","releaseLock","abort","reason","watchClosedStream","streamsTransferred","sendMessage","resultValue","runWebWorker","classicWorkersSupported","transferStreamsSupported","url","workerOptions","scriptUrl","URL","addEventListener","event","messageId","stack","responseError","done","onMessage","transferables","postMessage","pool","pendingRequests","indexWorker","clearTerminateTimeout","terminateTimeout","clearTimeout","DEFAULT_CHUNK_SIZE","PROPERTY_NAME_WRITABLE","initialized","Reader","ReadableStream","diskNumberStart","readUint8Array","min","Writer","writeUint8Array","BlobReader","blob","offsetEnd","BlobWriter","contentType","headers","Response","getData","TextWriter","encoding","utf8","toLowerCase","FileReader","onload","onerror","readAsText","Uint8ArrayWriter","initSize","previousArray","SplitDataReader","readers","lastDiskNumber","all","diskReader","diskNumber","currentDiskNumber","currentReaderOffset","currentReader","currentReaderSize","chunkLength","SplitDataWriter","writerGenerator","maxSize","zipWriter","diskSourceWriter","diskWritable","diskWriter","diskOffset","availableSize","writeChunk","closeDisk","next","initStream","initReader","CP437","split","VALID_CP437","decodeText","trim","stringValue","indexCharacter","TextDecoder","decode","decodeCP437","PROPERTY_NAME_FILENAME","PROPERTY_NAME_RAW_FILENAME","PROPERTY_NAME_COMMENT","PROPERTY_NAME_RAW_COMMENT","PROPERTY_NAME_UNCOMPPRESSED_SIZE","PROPERTY_NAME_COMPPRESSED_SIZE","PROPERTY_NAME_OFFSET","PROPERTY_NAME_DISK_NUMBER_START","PROPERTY_NAME_LAST_MODIFICATION_DATE","PROPERTY_NAME_RAW_LAST_MODIFICATION_DATE","PROPERTY_NAME_LAST_ACCESS_DATE","PROPERTY_NAME_RAW_LAST_ACCESS_DATE","PROPERTY_NAME_CREATION_DATE","PROPERTY_NAME_RAW_CREATION_DATE","PROPERTY_NAMES","Entry","forEach","ERR_BAD_FORMAT","ERR_EXTRAFIELD_ZIP64_NOT_FOUND","ERR_UNSUPPORTED_COMPRESSION","ERR_SPLIT_ZIP_FILE","CHARSET_UTF8","CHARSET_CP437","ZIP64_PROPERTIES","ZIP64_EXTRACTION","getValue","getBigUint64","ZipReader","zipReader","getChunkSize","endOfDirectoryInfo","startOffset","minimumBytes","maximumLength","signatureArray","view","getDataView","maximumBytes","seek","indexByte","seekSignature","endOfDirectoryView","directoryDataLength","directoryDataOffset","commentOffset","commentLength","getUint16","appendedDataOffset","expectedLastDiskNumber","filesLength","prependedDataLength","endOfDirectoryLocatorView","endOfDirectoryArray","expectedDirectoryDataOffset","originalDirectoryDataOffset","directoryArray","directoryView","filenameEncoding","getOptionValue","commentEncoding","indexFile","fileEntry","ZipEntry","readCommonHeader","languageEncodingFlag","Boolean","bitFlag","filenameOffset","extraFieldOffset","filenameLength","extraFieldLength","versionMadeBy","msDosCompatible","rawFilename","endOffset","rawComment","filenameUTF8","commentUTF8","directory","getUint8","offsetFileEntry","compressedSize","uncompressedSize","internalFileAttribute","externalFileAttribute","rawExtraField","filename","comment","endsWith","readCommonFooter","entry","extractPrependedData","extractAppendedData","prependedData","appendedData","entries","getEntriesGenerator","zipEntry","extraFieldAES","compressionMethod","rawLastModDate","localDirectory","dataView","originalCompressionMethod","lastAccessDate","creationDate","dataOffset","Infinity","initWriter","dataDescriptor","outputSize","streamCopy","find","Number","isFinite","setTimeout","filter","locked","rawBitFlag","version","lastModDate","getDate","extraField","Map","rawExtraFieldView","offsetExtraField","extraFieldZip64","zip64","extraFieldView","missingProperties","indexMissingProperty","extraction","readExtraFieldZip64","extraFieldUnicodePath","readExtraFieldUnicode","extraFieldUnicodeComment","vendorVersion","vendorId","readExtraFieldAES","extraFieldNTFS","tag1Data","tagValue","attributeSize","tag1View","rawLastAccessDate","rawCreationDate","getDateNTFS","extraFieldData","readExtraFieldNTFS","extraFieldExtendedTimestamp","flags","timeProperties","timeRawProperties","indexProperty","time","Date","rawPropertyName","readExtraFieldExtendedTimestamp","extraFieldUnicode","valid","timeRaw","date","BigInt","createObjectURL","Blob","configureWebWorker","bufsize","lastIndex","bufferIndex","bufferSize","buffers","nomoreinput","DebugLevel","debugLevel","Silent","logDebug","console","log","logVerbose","setDebugLevel","readBlobAsBuffer","readAsArrayBuffer","runWithTimedProgress","onProgress","action","item","duration","workPromise","startTime","getTime","stop","progressPromise","now","targetTime","_reject","window","requestAnimationFrame","race","TimeoutError","timeout","zipGetData","ProgressEvent","zipGetEntryAsString","FILE_MAGIC","MAJOR_VERSION","MINOR_VERSION","FILE_HEADER_SIZE","CHUNK_HEADER_SIZE","ImageError","ChunkType","CommandType","BlobBuilder","getBlob","parseFileHeader","major","minor","fileHdrSize","chunkHdrSize","chunks","parseChunkHeader","dataBytes","calcChunksBlockSize","total","createImage","blobBuilder","arrayView","setUint16","chunkArrayView","common.readBlobAsBuffer","FlashScript","zipEntries","commands","totalBytes","cmd","Flash","flashCmd","fileName","totalFlashBytes","static","scriptEntry","scriptString","common.zipGetEntryAsString","common.logDebug","scriptLines","line","numTokens","tokens","CheckRequirements","CheckVar","varName","expectedValue","Erase","partition","slot","PartitionSlot","Other","Current","MaybeCancelSnapshotUpdate","RebootBootloader","RunCmd","command","substring","ToggleActiveSlot","parseIndex","BlobEntryReaderImpl","entryMetadata","headerSize","BlobEntryReader","mimeString","headerBeginRaw","getEntryMetadata","entryBlob","ChunkedWriter","consumer","streamLength","pendingChunkOffset","streamOffset","pendingChunk","arrayOff","arrayLen","chunkLen","arrayRem","chunkRem","sendToConsumer","BOOT_CRITICAL_IMAGES","SYSTEM_IMAGES","USER_ACTION_MAP","load","unpack","flash","wipe","reboot","BOOTLOADER_REBOOT_TIME","flashEntryBlob","device","common.zipGetData","progress","flashBlob","tryFlashImages","imageNames","imageName","pattern","RegExp","current_slot","getVariable","runCommand","FastbootError","checkRequirements","androidInfo","replace","variable","expectValue","expectValues","hasSlot","includes","realValue","tryReboot","onReconnect","waitForConnect","flashZip","_action","_item","_progress","getEntries","zipEntriesArr","flashScript","parse","flashedBytes","cmd_","totalProgress","progressCallback","flashZipEntry","curSlot","getOtherSlot","flashOptimizedFactoryZip","common.runWithTimedProgress","snapshotStatus","imageReader","imageEntries","reqText","superName","superAction","superBlob","upload","BULK_TRANSFER_SIZE","UsbError","bootloaderMessage","FastbootDevice","epIn","epOut","_registeredUsbListeners","_connectResolve","_connectReject","_disconnectResolve","isConnected","opened","configurations","interfaces","claimed","ife","alternates","endpoints","endpoint","common.logVerbose","direction","endpointNumber","open","selectConfiguration","claimInterface","userAgent","waitForDisconnect","devices","usb","getDevices","requestDevice","filters","classCode","subclassCode","protocolCode","hasPromiseReject","_validateAndConnectDevice","respStatus","respData","respPacket","transferIn","response","respMessage","dataSize","RangeError","cmdPacket","transferOut","_readResponse","resp","promise","timedOut","tid","then","catch","finally","parseInt","remainingBytes","bytesWritten","xferHex","toString","padStart","downloadResp","downloadSize","_sendRawPayload","entryLength","xferredBytes","prevProgressReport","prevLog","uncompressedLength","wait","maxDlSize","_getDownloadSize","fileHeader","Sparse.FILE_HEADER_SIZE","isSparse","sparseHeader","Sparse.parseFileHeader","Raw","Sparse.fromRaw","splits","sentBytes","splitSize","splitChunks","splitDataBytes","bytesRemaining","calcChunksDataSize","splitBlocks","Skip","splitImage","Sparse.splitBlob","uploadZipEntry","flashFactoryZip","currentSlot"],"mappings":"AAuCA,MAAMA,EAAW,GAKXC,EAAW,IAEXC,MAEAC,EAAY,IAqBZC,GAAyB,EAOzBC,EAAa,EAGbC,EAAW,EAEXC,EAAO,EACPC,EAAe,EAEfC,GAAkB,EAElBC,GAAe,EAIrB,SAASC,EAAaC,GACrB,OAAOC,EAAUD,EAAME,KAAI,EAAEC,EAAQC,KAAW,IAAKC,MAAMF,GAASG,KAAKF,EAAO,EAAGD,KACpF,CAEA,SAASF,EAAUD,GAClB,OAAOA,EAAMO,QAAO,CAACC,EAAGC,IAAMD,EAAEE,OAAOL,MAAMM,QAAQF,GAAKR,EAAUQ,GAAKA,IAAI,GAC9E,CAGA,MAAMG,EAAa,CAAC,EAAG,EAAG,EAAG,GAAGF,UAAUX,EAAa,CACtD,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,EAAG,GAAI,CAAC,EAAG,IACxH,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,OAGvH,SAASc,IACR,MAAMC,EAAOC,KA6Fb,SAASC,EAAWC,EACnBC,GAEA,IAAIC,EAAM,EACV,GACCA,GAAc,EAAPF,EACPA,KAAU,EACVE,IAAQ,UACED,EAAM,GACjB,OAAOC,IAAQ,CACf,CA8CDL,EAAKM,WAAa,SAAUC,GAC3B,MAAMC,EAAOR,EAAKS,SACZC,EAAQV,EAAKW,UAAUC,YACvBC,EAAQb,EAAKW,UAAUE,MAC7B,IAAIC,EAAGC,EAEHC,EADAC,GAAY,EAShB,IAHAV,EAAEW,SAAW,EACbX,EAAEY,SAAW3C,EAERsC,EAAI,EAAGA,EAAID,EAAOC,IACF,IAAhBN,EAAS,EAAJM,IACRP,EAAEa,OAAOb,EAAEW,UAAYD,EAAWH,EAClCP,EAAEc,MAAMP,GAAK,GAEbN,EAAS,EAAJM,EAAQ,GAAK,EAQpB,KAAOP,EAAEW,SAAW,GACnBF,EAAOT,EAAEa,OAAOb,EAAEW,UAAYD,EAAW,IAAMA,EAAW,EAC1DT,EAAY,EAAPQ,GAAY,EACjBT,EAAEc,MAAML,GAAQ,EAChBT,EAAEe,UACEZ,IACHH,EAAEgB,YAAcb,EAAa,EAAPM,EAAW,IAQnC,IALAhB,EAAKiB,SAAWA,EAKXH,EAAIU,KAAKC,MAAMlB,EAAEW,SAAW,GAAIJ,GAAK,EAAGA,IAC5CP,EAAEmB,WAAWlB,EAAMM,GAKpBE,EAAOH,EACP,GAECC,EAAIP,EAAEa,KAAK,GACXb,EAAEa,KAAK,GAAKb,EAAEa,KAAKb,EAAEW,YACrBX,EAAEmB,WAAWlB,EAAM,GACnBO,EAAIR,EAAEa,KAAK,GAEXb,EAAEa,OAAOb,EAAEY,UAAYL,EACvBP,EAAEa,OAAOb,EAAEY,UAAYJ,EAGvBP,EAAY,EAAPQ,GAAaR,EAAS,EAAJM,GAASN,EAAS,EAAJO,GACrCR,EAAEc,MAAML,GAAQQ,KAAKG,IAAIpB,EAAEc,MAAMP,GAAIP,EAAEc,MAAMN,IAAM,EACnDP,EAAS,EAAJM,EAAQ,GAAKN,EAAS,EAAJO,EAAQ,GAAKC,EAGpCT,EAAEa,KAAK,GAAKJ,IACZT,EAAEmB,WAAWlB,EAAM,SACXD,EAAEW,UAAY,GAEvBX,EAAEa,OAAOb,EAAEY,UAAYZ,EAAEa,KAAK,GA1M/B,SAAoBb,GACnB,MAAMC,EAAOR,EAAKS,SACZC,EAAQV,EAAKW,UAAUC,YACvBgB,EAAQ5B,EAAKW,UAAUkB,WACvBC,EAAO9B,EAAKW,UAAUoB,WACtBC,EAAahC,EAAKW,UAAUqB,WAClC,IAAIC,EACAnB,EAAGC,EACHmB,EACAC,EACAC,EACAC,EAAW,EAEf,IAAKH,EAAO,EAAGA,GAAQ5D,EAAU4D,IAChC3B,EAAE+B,SAASJ,GAAQ,EAMpB,IAFA1B,EAA0B,EAArBD,EAAEa,KAAKb,EAAEY,UAAgB,GAAK,EAE9Bc,EAAI1B,EAAEY,SAAW,EAAGc,EAAIzD,EAAWyD,IACvCnB,EAAIP,EAAEa,KAAKa,GACXC,EAAO1B,EAAuB,EAAlBA,EAAS,EAAJM,EAAQ,GAAS,GAAK,EACnCoB,EAAOF,IACVE,EAAOF,EACPK,KAED7B,EAAS,EAAJM,EAAQ,GAAKoB,EAGdpB,EAAId,EAAKiB,WAGbV,EAAE+B,SAASJ,KACXC,EAAQ,EACJrB,GAAKgB,IACRK,EAAQP,EAAMd,EAAIgB,IACnBM,EAAI5B,EAAS,EAAJM,GACTP,EAAEe,SAAWc,GAAKF,EAAOC,GACrBzB,IACHH,EAAEgB,YAAca,GAAK1B,EAAU,EAAJI,EAAQ,GAAKqB,KAE1C,GAAiB,IAAbE,EAAJ,CAKA,EAAG,CAEF,IADAH,EAAOF,EAAa,EACQ,IAArBzB,EAAE+B,SAASJ,IACjBA,IACD3B,EAAE+B,SAASJ,KACX3B,EAAE+B,SAASJ,EAAO,IAAM,EACxB3B,EAAE+B,SAASN,KAGXK,GAAY,CACf,OAAWA,EAAW,GAEpB,IAAKH,EAAOF,EAAqB,IAATE,EAAYA,IAEnC,IADApB,EAAIP,EAAE+B,SAASJ,GACF,IAANpB,GACNC,EAAIR,EAAEa,OAAOa,GACTlB,EAAIf,EAAKiB,WAETT,EAAS,EAAJO,EAAQ,IAAMmB,IACtB3B,EAAEe,UAAYY,EAAO1B,EAAS,EAAJO,EAAQ,IAAMP,EAAS,EAAJO,GAC7CP,EAAS,EAAJO,EAAQ,GAAKmB,GAEnBpB,IA1BM,CA6BR,CAuIAyB,CAAWhC,GA/GZ,SAAmBC,EAClBS,EACAqB,GAEA,MAAME,EAAY,GAElB,IACIN,EACApB,EACAV,EAHAD,EAAO,EAOX,IAAK+B,EAAO,EAAGA,GAAQ5D,EAAU4D,IAChCM,EAAUN,GAAQ/B,EAASA,EAAOmC,EAASJ,EAAO,IAAO,EAS1D,IAAKpB,EAAI,EAAGA,GAAKG,EAAUH,IAC1BV,EAAMI,EAAS,EAAJM,EAAQ,GACP,IAARV,IAGJI,EAAS,EAAJM,GAASZ,EAAWsC,EAAUpC,KAAQA,GAE5C,CAoFAqC,CAAUjC,EAAMR,EAAKiB,SAAUV,EAAE+B,SACnC,CAEA,CA+BA,SAASI,EAAW9B,EAAaiB,EAAYE,EAAYlB,EAAOmB,GAC/D,MAAMhC,EAAOC,KACbD,EAAKY,YAAcA,EACnBZ,EAAK6B,WAAaA,EAClB7B,EAAK+B,WAAaA,EAClB/B,EAAKa,MAAQA,EACbb,EAAKgC,WAAaA,CACnB,CApCAjC,EAAK4C,aAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAG/C,UAAUX,EAAa,CACnE,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IAAK,CAAC,EAAG,IACrG,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,GAAI,IAAK,CAAC,EAAG,OAErFc,EAAK6C,YAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAEhI7C,EAAK8C,UAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,MACjJ,OAKD9C,EAAK+C,OAAS,SAAUC,GACvB,OAAQ,EAAS,IAAMjD,EAAWiD,GAAQjD,EAAW,KAAO,IAAW,GACxE,EAGAC,EAAKiD,YAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAGxGjD,EAAKkD,YAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAGlHlD,EAAKmD,aAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE3EnD,EAAKoD,SAAW,CAAC,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,IAa/E,MAUMC,EAA4BnE,EAAa,CAAC,CAAC,IAAK,GAAI,CAAC,IAAK,GAAI,CAAC,GAAI,GAAI,CAAC,EAAG,KACjFyD,EAAWW,aAAelE,EAXO,CAAC,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,EAAG,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,GACvJ,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,EAAG,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAC/I,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,EAAG,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,GAC9I,IAAK,GAAI,IAAK,IAAK,IAAK,EAAG,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,EAAG,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAC9I,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAC5I,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAC5I,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAC/I,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAC5I,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,EAAG,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,EAAG,GAAI,GAAI,IAAK,GAAI,GAAI,GAC/I,IAAK,EAAG,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,KAEyBC,KAAI,CAACE,EAAOgE,IAAU,CAAChE,EAAO8D,EAA0BE,OAErH,MACMC,EAA2BtE,EAAa,CAAC,CAAC,GAAI,KACpDyD,EAAWc,aAAerE,EAFM,CAAC,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,IAE/EC,KAAI,CAACE,EAAOgE,IAAU,CAAChE,EAAOiE,EAAyBD,OAEnHZ,EAAWe,cAAgB,IAAIf,EAAWA,EAAWW,aAActD,EAAKiD,YAAazE,QAAuBD,GAE5GoE,EAAWgB,cAAgB,IAAIhB,EAAWA,EAAWc,aAAczD,EAAKkD,YAAa,EAhWrE,GAgWiF3E,GAEjGoE,EAAWiB,eAAiB,IAAIjB,EAAW,KAAM3C,EAAKmD,aAAc,EAjWnD,GAUG,GA8VpB,SAASU,EAAOC,EAAaC,EAAUC,EAAaC,EAAWC,GAC9D,MAAMjE,EAAOC,KACbD,EAAK6D,YAAcA,EACnB7D,EAAK8D,SAAWA,EAChB9D,EAAK+D,YAAcA,EACnB/D,EAAKgE,UAAYA,EACjBhE,EAAKiE,KAAOA,CACb,CAEA,MAGMC,EAAe,CACpB,IAAIN,EAAO,EAAG,EAAG,EAAG,EAJN,GAKd,IAAIA,EAAO,EAAG,EAAG,EAAG,EAJR,GAKZ,IAAIA,EAAO,EAAG,EAAG,GAAI,EALT,GAMZ,IAAIA,EAAO,EAAG,EAAG,GAAI,GANT,GAOZ,IAAIA,EAAO,EAAG,EAAG,GAAI,GANT,GAOZ,IAAIA,EAAO,EAAG,GAAI,GAAI,GAPV,GAQZ,IAAIA,EAAO,EAAG,GAAI,IAAK,IARX,GASZ,IAAIA,EAAO,EAAG,GAAI,IAAK,IATX,GAUZ,IAAIA,EAAO,GAAI,IAAK,IAAK,KAVb,GAWZ,IAAIA,EAAO,GAAI,IAAK,IAAK,KAXb,IAcPO,EAAW,CAAC,kBAEjB,aACA,GACA,GACA,eACA,aACA,GACA,eACA,GACA,IAkBKC,EAAa,IACbC,EAAe,IAUfC,EAAY,IACZC,MAEN,SAASC,EAAQhE,EAAMM,EAAGC,EAAGM,GAC5B,MAAMoD,EAAMjE,EAAS,EAAJM,GACX4D,EAAMlE,EAAS,EAAJO,GACjB,OAAQ0D,EAAMC,GAAQD,GAAOC,GAAOrD,EAAMP,IAAMO,EAAMN,EACvD,CAEA,SAAS4D,IAER,MAAM3E,EAAOC,KACb,IAAI2E,EACAC,EAEAC,EASAC,EAEAC,EACAC,EACAC,EAEAC,EASAC,EAIAC,EAKAC,EAEAC,EACAC,EACAC,EACAC,EAMAC,EAKAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIAC,EAIAC,EAKAC,EAMAC,EACAC,EAGAC,EAGAC,EAEAC,EACAC,EACAC,EAEJ,MAAMC,EAAS,IAAI9G,EACb+G,EAAS,IAAI/G,EACbgH,GAAU,IAAIhH,EA2BpB,IAAIiH,GAEAC,GAIAC,GACAC,GAIAC,GAIAC,GAkCJ,SAASC,KACR,IAAIC,EAEJ,IAAKA,EAAI,EAAGA,MAAaA,IACxBb,EAAc,EAAJa,GAAS,EACpB,IAAKA,EAAI,EAAGA,EAnmBE,GAmmBWA,IACxBZ,EAAc,EAAJY,GAAS,EACpB,IAAKA,EAAI,EAAGA,EApmBG,GAomBWA,IACzBX,EAAY,EAAJW,GAAS,EAElBb,EAAUjI,KAAiB,EAC3BuB,EAAKsB,QAAUtB,EAAKuB,WAAa,EACjC0F,GAAWC,GAAU,CACrB,CAqDD,SAASM,GAAUhH,EAClBS,GAEA,IACIwG,EADAC,GAAW,EAEXC,EAAUnH,EAAK,GACfoH,EAAQ,EACRC,EAAY,EACZC,EAAY,EAEA,IAAZH,IACHE,EAAY,IACZC,EAAY,GAEbtH,EAAsB,GAAhBS,EAAW,GAAS,GAAK,MAE/B,IAAK,IAAIH,EAAI,EAAGA,GAAKG,EAAUH,IAC9B2G,EAASE,EACTA,EAAUnH,EAAe,GAATM,EAAI,GAAS,KACvB8G,EAAQC,GAAaJ,GAAUE,IAE1BC,EAAQE,EAClBlB,EAAiB,EAATa,IAAeG,EACF,IAAXH,GACNA,GAAUC,GACbd,EAAiB,EAATa,KACTb,EAAQmB,OACEH,GAAS,GACnBhB,EAAQoB,MAERpB,EAAQqB,MAETL,EAAQ,EACRF,EAAUD,EACM,IAAZE,GACHE,EAAY,IACZC,EAAY,GACFL,GAAUE,GACpBE,EAAY,EACZC,EAAY,IAEZD,EAAY,EACZC,EAAY,GAGd,CAgCD,SAASI,GAASC,GACjBnI,EAAKoI,YAAYpI,EAAKqI,WAAaF,CACnC,CAED,SAASG,GAAUC,GAClBL,GAAa,IAAJK,GACTL,GAAUK,IAAM,EAAK,IACrB,CAOD,SAASC,GAAUlJ,EAAOD,GACzB,IAAIoJ,EACJ,MAAMrI,EAAMf,EACRgI,GApuBW,GAouBWjH,GACzBqI,EAAMnJ,EAEN8H,IAAYqB,GAAOpB,GAAY,MAC/BiB,GAAUlB,IACVA,GAASqB,IAzuBK,GAyuBepB,GAC7BA,IAAYjH,EA1uBE,KA6uBdgH,IAAY,GAAWC,GAAY,MACnCA,IAAYjH,EAEb,CAED,SAASsI,GAAUC,EAAGnI,GACrB,MAAMoI,EAAS,EAAJD,EACXH,GAAqB,MAAXhI,EAAKoI,GAA6B,MAAfpI,EAAKoI,EAAK,GACvC,CAID,SAASC,GAAUrI,EAClBS,GAEA,IAAIH,EAEA2G,EADAC,GAAW,EAEXC,EAAUnH,EAAK,GACfoH,EAAQ,EACRC,EAAY,EACZC,EAAY,EAOhB,IALgB,IAAZH,IACHE,EAAY,IACZC,EAAY,GAGRhH,EAAI,EAAGA,GAAKG,EAAUH,IAG1B,GAFA2G,EAASE,EACTA,EAAUnH,EAAe,GAATM,EAAI,GAAS,OACvB8G,EAAQC,GAAaJ,GAAUE,GAArC,CAEO,GAAIC,EAAQE,EAClB,GACCY,GAAUjB,EAAQb,SACE,KAAVgB,QACU,IAAXH,GACNA,GAAUC,IACbgB,GAAUjB,EAAQb,GAClBgB,KAEDc,GAnyBY,GAmyBO9B,GACnB4B,GAAUZ,EAAQ,EAAG,IACXA,GAAS,IACnBc,GAnyBc,GAmyBO9B,GACrB4B,GAAUZ,EAAQ,EAAG,KAErBc,GAnyBgB,GAmyBO9B,GACvB4B,GAAUZ,EAAQ,GAAI,IAEvBA,EAAQ,EACRF,EAAUD,EACM,IAAZE,GACHE,EAAY,IACZC,EAAY,GACFL,GAAUE,GACpBE,EAAY,EACZC,EAAY,IAEZD,EAAY,EACZC,EAAY,EAXZ,CAcF,CAmBD,SAASgB,KACQ,IAAZzB,IACHiB,GAAUlB,IACVA,GAAS,EACTC,GAAW,GACDA,IAAY,IACtBa,GAAkB,IAATd,IACTA,MAAY,EACZC,IAAY,EAEb,CA+BD,SAAS0B,GAAUhG,EAClBiG,GAEA,IAAIC,EAAYC,EAAWC,EAgB3B,GAfAnJ,EAAKoJ,SAASnC,IAAYlE,EAC1B/C,EAAKqJ,OAAOpC,IAAiB,IAAL+B,EACxB/B,KAEa,IAATlE,EAEH2D,EAAe,EAALsC,MAEV9B,KAEAnE,IACA2D,EAAmD,GAAxC3G,EAAK4C,aAAaqG,GAAMzK,EAAW,MAC9CoI,EAA8B,EAApB5G,EAAK+C,OAAOC,OAGK,IAAZ,KAAXkE,KAA4BX,EAAQ,EAAG,CAI3C,IAFA2C,EAAwB,EAAXhC,GACbiC,EAAYlD,EAAWJ,EAClBuD,EAAQ,EAAGA,EA15BH,GA05BoBA,IAChCF,GAActC,EAAkB,EAARwC,IAAc,EAAIpJ,EAAKkD,YAAYkG,IAG5D,GADAF,KAAgB,EACX/B,GAAU1F,KAAKC,MAAMwF,GAAW,IAAOgC,EAAazH,KAAKC,MAAMyH,EAAY,GAC/E,OAAO,CACR,CAED,OAAQjC,IAAYD,GAAc,CAIlC,CAGD,SAASsC,GAAeC,EAAOC,GAC9B,IAAIzG,EACAiG,EAEA7I,EACAyB,EAFA6H,EAAK,EAIT,GAAiB,IAAbxC,GACH,GACClE,EAAO/C,EAAKoJ,SAASK,GACrBT,EAAKhJ,EAAKqJ,OAAOI,GACjBA,IAEa,IAAT1G,EACH2F,GAAUM,EAAIO,IAGdpJ,EAAOJ,EAAK4C,aAAaqG,GAEzBN,GAAUvI,EAAO5B,EAAW,EAAGgL,GAE/B3H,EAAQ7B,EAAKiD,YAAY7C,GACX,IAAVyB,IACHoH,GAAMjJ,EAAK6C,YAAYzC,GACvBqI,GAAUQ,EAAIpH,IAEfmB,IACA5C,EAAOJ,EAAK+C,OAAOC,GAEnB2F,GAAUvI,EAAMqJ,GAChB5H,EAAQ7B,EAAKkD,YAAY9C,GACX,IAAVyB,IACHmB,GAAQhD,EAAK8C,UAAU1C,GACvBqI,GAAUzF,EAAMnB,WAGV6H,EAAKxC,IAGfyB,GAAUjK,EAAW8K,GACrBpC,GAAeoC,EAAM9K,IACrB,CAGD,SAASiL,KACJrC,GAAW,EACdiB,GAAUlB,IACAC,GAAW,GACrBa,GAAkB,IAATd,IAEVA,GAAS,EACTC,GAAW,CACX,CAqBD,SAASsC,GAAiBC,EACzBC,EACAC,GAEAtB,GAAU,GAAuBsB,EAAM,EAAI,GAAI,GArBhD,SAAoBF,EACnBxJ,EACA2J,GAEAL,KACAvC,GAAe,EAEX4C,IACHzB,GAAUlI,GACVkI,IAAWlI,IAGZJ,EAAKoI,YAAY4B,IAAI7E,EAAI8E,SAASL,EAAKA,EAAMxJ,GAAMJ,EAAKqI,SACxDrI,EAAKqI,SAAWjI,CAChB,CAQA8J,CAAWN,EAAKC,GAAY,EAC5B,CAID,SAASM,GAAgBP,EACxBC,EACAC,GAEA,IAAIM,EAAUC,EACVC,EAAc,EAGdhE,EAAQ,GAEXO,EAAOvG,WAAWN,GAElB8G,EAAOxG,WAAWN,GASlBsK,EAhUF,WACC,IAAIA,EAeJ,IAZA9C,GAAUd,EAAWG,EAAO5F,UAC5BuG,GAAUb,EAAWG,EAAO7F,UAG5B8F,GAAQzG,WAAWN,GAQdsK,EAAcC,GAAcD,GAAe,GACK,IAAhD1D,EAAqC,EAA7B7G,EAAKoD,SAASmH,GAAmB,GADKA,KAOnD,OAFAtK,EAAKsB,SAAW,GAAKgJ,EAAc,GAAK,EAAI,EAAI,EAEzCA,CACP,CAwSeE,GAIdJ,EAAYpK,EAAKsB,QAAU,EAAI,IAAO,EACtC+I,EAAerK,EAAKuB,WAAa,EAAI,IAAO,EAExC8I,GAAeD,IAClBA,EAAWC,IAEZD,EAAWC,EAAcR,EAAa,EAGlCA,EAAa,GAAKO,IAAqB,GAARR,EAQnCD,GAAiBC,EAAKC,EAAYC,GACxBO,GAAeD,GACzB5B,GAAU,GAAuBsB,EAAM,EAAI,GAAI,GAC/CR,GAAe5G,EAAWW,aAAcX,EAAWc,gBAEnDgF,GAAU,GAAoBsB,EAAM,EAAI,GAAI,GA/N9C,SAAwBW,EAAQC,EAAQC,GACvC,IAAIC,EAKJ,IAHApC,GAAUiC,EAAS,IAAK,GACxBjC,GAAUkC,EAAS,EAAG,GACtBlC,GAAUmC,EAAU,EAAG,GAClBC,EAAO,EAAGA,EAAOD,EAASC,IAC9BpC,GAAU5B,EAA8B,EAAtB7G,EAAKoD,SAASyH,GAAY,GAAI,GAEjD/B,GAAUnC,EAAW+D,EAAS,GAC9B5B,GAAUlC,EAAW+D,EAAS,EAC9B,CAqNCG,CAAehE,EAAO5F,SAAW,EAAG6F,EAAO7F,SAAW,EAAGqJ,EAAc,GACvEhB,GAAe5C,EAAWC,IAM3BW,KAEIwC,GACHJ,IAED,CAED,SAASoB,GAAiBhB,GACzBK,GAAgBvE,GAAe,EAAIA,GAAe,EAAGI,EAAWJ,EAAakE,GAC7ElE,EAAcI,EACdpB,EAAKmG,eACL,CAUD,SAASC,KACR,IAAIlK,EAAGC,EACHoH,EACA8C,EAEJ,EAAG,CAIF,GAHAA,EAAQ7F,EAAcc,EAAYF,EAGrB,IAATiF,GAA2B,IAAbjF,GAAgC,IAAdE,EACnC+E,EAAOjG,OACD,IAAa,GAATiG,EAIVA,SAMM,GAAIjF,GAAYhB,EAASA,EAAST,EAAe,CACvDY,EAAI6E,IAAI7E,EAAI8E,SAASjF,EAAQA,EAASA,GAAS,GAE/CiB,GAAejB,EACfgB,GAAYhB,EACZY,GAAeZ,EAUflE,EAAI0E,EACJ2C,EAAIrH,EACJ,GACCC,EAAiB,MAAZuE,IAAO6C,GACZ7C,EAAK6C,GAAMpH,GAAKiE,EAASjE,EAAIiE,EAAS,QACtB,KAANlE,GAEXA,EAAIkE,EACJmD,EAAIrH,EACJ,GACCC,EAAiB,MAAZsE,IAAO8C,GACZ9C,EAAK8C,GAAMpH,GAAKiE,EAASjE,EAAIiE,EAAS,QAGtB,KAANlE,GACXmK,GAAQjG,CACR,CAED,GAAsB,IAAlBJ,EAAKsG,SACR,OAaDpK,EAAI8D,EAAKuG,SAAShG,EAAKa,EAAWE,EAAW+E,GAC7C/E,GAAapF,EAGToF,GAxuBW,IAyuBdX,EAAwB,IAAhBJ,EAAIa,GACZT,GAAU,GAAWI,EAAmC,IAApBR,EAAIa,EAAW,IAAcN,EAMlE,OAAQQ,EAAY3B,GAAmC,IAAlBK,EAAKsG,SAC3C,CAiED,SAASE,GAAcC,GACtB,IAEIC,EACAlL,EAHAmL,EAAenF,EACfoF,EAAOxF,EAGPyF,EAAWtF,EACf,MAAMuF,EAAQ1F,EAAYhB,EAAST,EAAiByB,GAAYhB,EAAST,GAAiB,EAC1F,IAAIoH,EAAclF,EAKlB,MAAMmF,EAAQ1G,EAER2G,EAAS7F,EAAW1B,EAC1B,IAAIwH,EAAY3G,EAAIqG,EAAOC,EAAW,GAClCM,EAAW5G,EAAIqG,EAAOC,GAOtBtF,GAAeK,IAClB+E,IAAiB,GAMdI,EAAczF,IACjByF,EAAczF,GAEf,GAKC,GAJAoF,EAAQD,EAIJlG,EAAImG,EAAQG,IAAaM,GAAY5G,EAAImG,EAAQG,EAAW,IAAMK,GAAa3G,EAAImG,IAAUnG,EAAIqG,IACjGrG,IAAMmG,IAAUnG,EAAIqG,EAAO,GAD/B,CASAA,GAAQ,EACRF,IAKA,UAESnG,IAAMqG,IAASrG,IAAMmG,IAAUnG,IAAMqG,IAASrG,IAAMmG,IAAUnG,IAAMqG,IAASrG,IAAMmG,IACzFnG,IAAMqG,IAASrG,IAAMmG,IAAUnG,IAAMqG,IAASrG,IAAMmG,IAAUnG,IAAMqG,IAASrG,IAAMmG,IACnFnG,IAAMqG,IAASrG,IAAMmG,IAAUnG,IAAMqG,IAASrG,IAAMmG,IAAUE,EAAOK,GAKxE,GAHAzL,EAAMkE,GAAauH,EAASL,GAC5BA,EAAOK,EAASvH,EAEZlE,EAAMqL,EAAU,CAGnB,GAFAxF,EAAcoF,EACdI,EAAWrL,EACPA,GAAOuL,EACV,MACDG,EAAY3G,EAAIqG,EAAOC,EAAW,GAClCM,EAAW5G,EAAIqG,EAAOC,EACtB,CA7BS,SA+BDJ,EAAuC,MAA1BhG,EAAKgG,EAAYO,IAAoBF,GAA4B,KAAjBH,GAEvE,OAAIE,GAAYvF,EACRuF,EACDvF,CACP,CAoPD,SAAS8F,GAAapH,GAarB,OAZAA,EAAKqH,SAAWrH,EAAKsH,UAAY,EACjCtH,EAAKuH,IAAM,KAEXnM,EAAKqI,QAAU,EACfrI,EAAKoM,YAAc,EAEnBvH,EAAST,EAETW,EAAapG,EAn7BbkI,EAAOpG,SAAWiG,EAClBG,EAAOlG,UAAY+B,EAAWe,cAE9BqD,EAAOrG,SAAWkG,EAClBG,EAAOnG,UAAY+B,EAAWgB,cAE9BqD,GAAQtG,SAAWmG,EACnBG,GAAQpG,UAAY+B,EAAWiB,eAE/ByD,GAAS,EACTC,GAAW,EACXF,GAAe,EAGfG,KAtDD,WACClC,EAAc,EAAIJ,EAElBM,EAAKE,EAAY,GAAK,EACtB,IAAK,IAAI+B,EAAI,EAAGA,EAAI/B,EAAY,EAAG+B,IAClCjC,EAAKiC,GAAK,EAIXlB,EAAiBnC,EAAaoC,GAAOxC,SACrC0C,EAAatC,EAAaoC,GAAOzC,YACjC4C,EAAavC,EAAaoC,GAAOvC,YACjCqC,EAAmBlC,EAAaoC,GAAOtC,UAEvCgC,EAAW,EACXJ,EAAc,EACdM,EAAY,EACZL,EAAeM,EAAckG,EAC7BtG,EAAkB,EAClBR,EAAQ,CACR,CA08BA+G,GACOzN,CACP,CA9gCDmB,EAAKqB,MAAQ,GAqCbrB,EAAKsC,SAAW,GAGhBtC,EAAKoB,KAAO,GAEZsF,EAAY,GACZC,EAAY,GACZC,EAAU,GAgEV5G,EAAK0B,WAAa,SAAUlB,EAC3B+L,GAEA,MAAMnL,EAAOpB,EAAKoB,KACZoL,EAAIpL,EAAKmL,GACf,IAAIE,EAAIF,GAAK,EACb,KAAOE,GAAKzM,EAAKkB,WAEZuL,EAAIzM,EAAKkB,UAAYsD,EAAQhE,EAAMY,EAAKqL,EAAI,GAAIrL,EAAKqL,GAAIzM,EAAKqB,QACjEoL,KAGGjI,EAAQhE,EAAMgM,EAAGpL,EAAKqL,GAAIzM,EAAKqB,SAInCD,EAAKmL,GAAKnL,EAAKqL,GACfF,EAAIE,EAEJA,IAAM,EAEPrL,EAAKmL,GAAKC,CACZ,EA84BCxM,EAAK0M,YAAc,SAAU9H,EAAM+H,EAAQzK,EAAM0K,EAASC,EAAUC,GAqBnE,OApBKF,IACJA,EA1oCgB,GA2oCZC,IACJA,EAvsCmB,GAwsCfC,IACJA,EA9gDwB,GAwhDzBlI,EAAKuH,IAAM,KAEPQ,GAAUjO,IACbiO,EAAS,GAENE,EAAW,GAAKA,EAztCA,GA4DH,GA6pC+BD,GAAyB1K,EAAO,GAAKA,EAAO,IAAMyK,EAAS,GAAKA,EAAS,GAAKG,EAAY,GACtIA,EA/hDiB,EAgiDb/N,GAGR6F,EAAKmI,OAAS/M,EAEdiF,EAAS/C,EACT8C,EAAS,GAAKC,EACdC,EAASF,EAAS,EAElBS,EAAYoH,EAAW,EACvBrH,EAAY,GAAKC,EACjBC,EAAYF,EAAY,EACxBG,EAAanE,KAAKC,OAAOgE,EArqCT,EAqqCiC,GArqCjC,GAuqChBN,EAAM,IAAI6H,WAAoB,EAAThI,GACrBK,EAAO,GACPC,EAAO,GAEP0B,GAAc,GAAM6F,EAAW,EAE/B7M,EAAKoI,YAAc,IAAI4E,WAAyB,EAAdhG,IAClClC,EAAiC,EAAdkC,GAEnBhH,EAAKoJ,SAAW,IAAI6D,YAAYjG,IAChChH,EAAKqJ,OAAS,IAAI2D,WAAWhG,IAE7BV,EAAQqG,EAERpG,EAAWuG,EAEJd,GAAapH,GACtB,EAEC5E,EAAKkN,WAAa,WACjB,OAtsCiB,IAssCbrI,GAAwBA,GAAUT,GAAcS,GAAUR,EACtDtF,GAGRiB,EAAKqJ,OAAS,KACdrJ,EAAKoJ,SAAW,KAChBpJ,EAAKoI,YAAc,KACnB9C,EAAO,KACPD,EAAO,KACPF,EAAM,KAENnF,EAAK+M,OAAS,KACPlI,GAAUT,GAlkDE,EAkkD0BvF,EAC/C,EAECmB,EAAKmN,cAAgB,SAAUvI,EAAM+H,EAAQG,GAC5C,IAAIM,EAAMvO,EAKV,OAHI8N,GAAUjO,IACbiO,EAAS,GAENA,EAAS,GAAKA,EAAS,GAAKG,EAAY,GAAKA,EAvlD5B,EAwlDb/N,GAGJmF,EAAaoC,GAAOrC,MAAQC,EAAayI,GAAQ1I,MAA0B,IAAlBW,EAAKqH,WAEjEmB,EAAMxI,EAAKyI,QAzlDU,IA4lDlB/G,GAASqG,IACZrG,EAAQqG,EACRtG,EAAiBnC,EAAaoC,GAAOxC,SACrC0C,EAAatC,EAAaoC,GAAOzC,YACjC4C,EAAavC,EAAaoC,GAAOvC,YACjCqC,EAAmBlC,EAAaoC,GAAOtC,WAExCuC,EAAWuG,EACJM,EACT,EAECpN,EAAKsN,qBAAuB,SAAUC,EAAOC,EAAYC,GACxD,IACI3M,EADAzB,EAASoO,EACNnK,EAAQ,EAEf,IAAKkK,GAnvCY,IAmvCE3I,EAClB,OAAO9F,EAER,GAAIM,EA3uCY,EA4uCf,OAAOR,EAiBR,IAhBIQ,EAAS2F,EAAST,IACrBlF,EAAS2F,EAAST,EAClBjB,EAAQmK,EAAapO,GAEtB8F,EAAI6E,IAAIwD,EAAWvD,SAAS3G,EAAOA,EAAQjE,GAAS,GAEpD2G,EAAW3G,EACXuG,EAAcvG,EAMdkG,EAAiB,IAATJ,EAAI,GACZI,GAAU,GAAWI,EAAwB,IAATR,EAAI,IAAcO,EAEjD5E,EAAI,EAAGA,GAAKzB,EA7vCD,EA6vCqByB,IACpCyE,GAAU,GAAWI,EAA4C,IAA7BR,EAAI,EAAO,IAA2BO,EAC1EL,EAAKvE,EAAIoE,GAAUI,EAAKC,GACxBD,EAAKC,GAASzE,EAEf,OAAOjC,CACT,EAECmB,EAAKqN,QAAU,SAAUE,EAAOG,GAC/B,IAAInG,EAAGwC,EAAQ4D,EAAaC,EAAWC,EAEvC,GAAIH,EAAQ9O,GAAY8O,EAAQ,EAC/B,OAAO3O,EAGR,IAAKwO,EAAMO,WAAcP,EAAMQ,SAA8B,IAAnBR,EAAMrC,UAAoBrG,GAAUR,GAAgBqJ,GAAS9O,EAEtG,OADA2O,EAAMpB,IAAMhI,EA1oDK,EA0oDmBpF,GAC7BA,EAER,GAAwB,IAApBwO,EAAMS,UAET,OADAT,EAAMpB,IAAMhI,EAAS8J,GACdjP,EAp8BT,IAAqBW,EA49BpB,GArBAiF,EAAO2I,EACPK,EAAY7I,EACZA,EAAa2I,EAlyCI,IAqyCb7I,IACHkF,EAjyCgB,GAiyCS9E,EAAS,GAAM,IAAO,EAC/C0I,GAAgBrH,EAAQ,EAAK,MAAS,EAElCqH,EAAc,IACjBA,EAAc,GACf5D,GAAW4D,GAAe,EACT,IAAb3H,IACH+D,GA/yCgB,IAgzCjBA,GAAU,GAAMA,EAAS,GAEzBlF,EAAST,EAt9BV8D,IADoBvI,EAw9BPoK,IAv9BE,EAAK,KACpB7B,GAAc,IAAJvI,IA09BW,IAAjBK,EAAKqI,SAER,GADAzD,EAAKmG,gBACkB,IAAnBnG,EAAKoJ,UAQR,OADAjJ,GAAc,EACPlG,OAOF,GAAsB,IAAlB+F,EAAKsG,UAAkBwC,GAASE,GAAaF,GAAS9O,EAEhE,OADAgG,EAAKuH,IAAMhI,EAAS8J,GACbjP,EAIR,GAAI6F,GAAUR,GAAkC,IAAlBO,EAAKsG,SAElC,OADAqC,EAAMpB,IAAMhI,EAAS8J,GACdjP,EAIR,GAAsB,IAAlB4F,EAAKsG,UAAgC,IAAdhF,GAAoBwH,GAAS/O,GAAckG,GAAUR,EAAe,CAE9F,OADAwJ,GAAU,EACF3J,EAAaoC,GAAOrC,MAC3B,KAh4CW,EAi4CV4J,EAhlBJ,SAAwBH,GAIvB,IACIQ,EADAC,EAAiB,MASrB,IANIA,EAAiBrJ,EAAmB,IACvCqJ,EAAiBrJ,EAAmB,KAKxB,CAEZ,GAAIoB,GAAa,EAAG,CAEnB,GADA8E,KACkB,IAAd9E,GAAmBwH,GAAS/O,EAC/B,OAtyBY,EAuyBb,GAAkB,IAAduH,EACH,KACD,CAOD,GALAF,GAAYE,EACZA,EAAY,EAGZgI,EAAYtI,EAAcuI,GACT,IAAbnI,GAAkBA,GAAYkI,KAEjChI,EAAaF,EAAWkI,EACxBlI,EAAWkI,EAEXpD,IAAiB,GACM,IAAnBlG,EAAKoJ,WACR,OAvzBY,EA6zBd,GAAIhI,EAAWJ,GAAeZ,EAAST,IACtCuG,IAAiB,GACM,IAAnBlG,EAAKoJ,WACR,OAh0BY,CAk0Bd,CAGD,OADAlD,GAAiB4C,GAAS9O,GACH,IAAnBgG,EAAKoJ,UACAN,GAAS9O,EAh0BE,EANL,EAw0BR8O,GAAS9O,EA/zBC,EAND,CAs0BhB,CA2hBYwP,CAAeV,GACxB,MACD,KAl4CS,EAm4CRG,EAzcJ,SAAsBH,GAErB,IACIW,EADAC,EAAY,EAIhB,OAAa,CAKZ,GAAIpI,EAAY3B,EAAe,CAE9B,GADAyG,KACI9E,EAAY3B,GAAiBmJ,GAAS/O,EACzC,OA56BY,EA86Bb,GAAkB,IAAduH,EACH,KACD,CAyBD,GArBIA,GA35BW,IA45BdX,GAAU,GAAWI,EAAmD,IAApCR,EAAI,EAAc,IAA2BO,EAGjF4I,EAA2B,MAAdhJ,EAAKC,GAClBF,EAAKW,EAAWd,GAAUI,EAAKC,GAC/BD,EAAKC,GAASS,GAMG,IAAdsI,IAAqBtI,EAAWsI,EAAa,QAAWtJ,EAAST,GA9yCjD,GAkzCfgC,IACHV,EAAeuF,GAAckD,IAI3BzI,GAh7BW,EAy7Bd,GANAwI,EAAStF,GAAU/C,EAAWC,EAAaJ,EAn7B7B,GAq7BdK,GAAaL,EAITA,GAAgBQ,GAAkBH,GAz7BxB,EAy7BgD,CAC7DL,IACA,GACCG,IAEAT,GAAUA,GAASI,EAAmD,IAApCR,EAAI,EAAc,IAA2BO,EAE/E4I,EAA2B,MAAdhJ,EAAKC,GAClBF,EAAKW,EAAWd,GAAUI,EAAKC,GAC/BD,EAAKC,GAASS,QAIa,KAAjBH,GACXG,GACL,MACKA,GAAYH,EACZA,EAAe,EACfN,EAAwB,IAAhBJ,EAAIa,GAEZT,GAAU,GAAWI,EAAmC,IAApBR,EAAIa,EAAW,IAAcN,OAQlE2I,EAAStF,GAAU,EAAmB,IAAhB5D,EAAIa,IAC1BE,IACAF,IAED,GAAIqI,IAEHvD,IAAiB,GACM,IAAnBlG,EAAKoJ,WACR,OAt/BY,CAw/Bd,CAGD,OADAlD,GAAiB4C,GAAS9O,GACH,IAAnBgG,EAAKoJ,UACJN,GAAS9O,EAt/BM,EANL,EAigCR8O,GAAS9O,EAx/BC,EAND,CA+/BhB,CAqWY2P,CAAab,GACtB,MACD,KAp4CS,EAq4CRG,EAnWJ,SAAsBH,GAErB,IACIW,EACAG,EAFAF,EAAY,EAMhB,OAAa,CAMZ,GAAIpI,EAAY3B,EAAe,CAE9B,GADAyG,KACI9E,EAAY3B,GAAiBmJ,GAAS/O,EACzC,OAxhCY,EA0hCb,GAAkB,IAAduH,EACH,KACD,CAsCD,GAjCIA,GAxgCW,IAygCdX,GAAU,GAAWI,EAAmD,IAApCR,EAAI,EAAc,IAA2BO,EAEjF4I,EAA2B,MAAdhJ,EAAKC,GAClBF,EAAKW,EAAWd,GAAUI,EAAKC,GAC/BD,EAAKC,GAASS,GAIfG,EAAcN,EACdC,EAAaG,EACbJ,EAAewG,EAEG,IAAdiC,GAAmBnI,EAAcE,IAAoBL,EAAWsI,EAAa,QAAWtJ,EAAST,IA55CjF,GAi6CfgC,IACHV,EAAeuF,GAAckD,IAI1BzI,GAAgB,IAv6CL,GAu6CWU,GA/hCZ,GA+hCuCV,GAA6BG,EAAWC,EAAc,QAI1GJ,EAAewG,IAMblG,GAziCW,GAyiCiBN,GAAgBM,EAAa,CAC5DqI,EAAaxI,EAAWE,EA1iCV,EA+iCdmI,EAAStF,GAAU/C,EAAW,EAAIF,EAAYK,EA/iChC,GAqjCdD,GAAaC,EAAc,EAC3BA,GAAe,EACf,KACOH,GAAYwI,IACjBjJ,GAAU,GAAWI,EAAmD,IAApCR,EAAI,EAAc,IAA2BO,EAEjF4I,EAA2B,MAAdhJ,EAAKC,GAClBF,EAAKW,EAAWd,GAAUI,EAAKC,GAC/BD,EAAKC,GAASS,SAEW,KAAhBG,GAKX,GAJAJ,EAAkB,EAClBF,EAAewG,EACfrG,IAEIqI,IACHvD,IAAiB,GACM,IAAnBlG,EAAKoJ,WACR,OAhmCW,CAkmCjB,MAAU,GAAwB,IAApBjI,GAaV,GAPAsI,EAAStF,GAAU,EAAuB,IAApB5D,EAAIa,EAAW,IAEjCqI,GACHvD,IAAiB,GAElB9E,IACAE,IACuB,IAAnBtB,EAAKoJ,UACR,OAhnCY,OAqnCbjI,EAAkB,EAClBC,IACAE,GAED,CAQD,OANwB,IAApBH,IACHsI,EAAStF,GAAU,EAAuB,IAApB5D,EAAIa,EAAW,IACrCD,EAAkB,GAEnB+E,GAAiB4C,GAAS9O,GAEH,IAAnBgG,EAAKoJ,UACJN,GAAS9O,EA5nCM,EANL,EAwoCR8O,GAAS9O,EA/nCC,EAND,CAsoChB,CAiOY6P,CAAaf,GAQxB,GA52CmB,GAy2CfG,GAt2CY,GAs2CeA,IAC9BhJ,EAASR,GAh3CI,GAk3CVwJ,GA52Ce,GA42COA,EAIzB,OAHuB,IAAnBjJ,EAAKoJ,YACRjJ,GAAc,GAERlG,EASR,GA53Ce,GA43CXgP,EAAqB,CACxB,GA1uDoB,GA0uDhBH,EA/5BNlF,GAAUkG,EAAmB,GAC7BhG,GAAUjK,EAAWiE,EAAWW,cAEhCyF,KAMI,EAAI3B,GAAe,GAAKE,GAAW,IACtCmB,GAAUkG,EAAmB,GAC7BhG,GAAUjK,EAAWiE,EAAWW,cAChCyF,MAED3B,GAAe,OAu5BZ,GAHAwC,GAAiB,EAAG,GAAG,GA5uDP,GA+uDZ+D,EAEH,IAAKnG,EAAI,EAAGA,EAAI/B,EAAiB+B,IAEhCjC,EAAKiC,GAAK,EAIb,GADA3C,EAAKmG,gBACkB,IAAnBnG,EAAKoJ,UAER,OADAjJ,GAAc,EACPlG,CAER,CACD,CAED,OAAI6O,GAAS9O,EACLC,EACDC,CACT,CACA,CAIA,SAAS6P,IACR,MAAM3O,EAAOC,KACbD,EAAK4O,cAAgB,EACrB5O,EAAK6O,eAAiB,EAEtB7O,EAAKkL,SAAW,EAChBlL,EAAKiM,SAAW,EAEhBjM,EAAKgO,UAAY,EACjBhO,EAAKkM,UAAY,CAGlB,CAEAyC,EAAQG,UAAY,CACnBpC,YAAYpG,EAAOpE,GAClB,MAAMlC,EAAOC,KAIb,OAHAD,EAAK+M,OAAS,IAAIpI,EACbzC,IACJA,EAAO5D,GACD0B,EAAK+M,OAAOL,YAAY1M,EAAMsG,EAAOpE,EAC5C,EAEDmL,QAAQK,GACP,MAAM1N,EAAOC,KACb,OAAKD,EAAK+M,OAGH/M,EAAK+M,OAAOM,QAAQrN,EAAM0N,GAFzB3O,CAGR,EAEDmO,aACC,MAAMlN,EAAOC,KACb,IAAKD,EAAK+M,OACT,OAAOhO,EACR,MAAMgQ,EAAM/O,EAAK+M,OAAOG,aAExB,OADAlN,EAAK+M,OAAS,KACPgC,CACP,EAED5B,cAAc7G,EAAOC,GACpB,MAAMvG,EAAOC,KACb,OAAKD,EAAK+M,OAEH/M,EAAK+M,OAAOI,cAAcnN,EAAMsG,EAAOC,GADtCxH,CAER,EAEDuO,qBAAqBE,EAAYC,GAChC,MAAMzN,EAAOC,KACb,OAAKD,EAAK+M,OAEH/M,EAAK+M,OAAOO,qBAAqBtN,EAAMwN,EAAYC,GADlD1O,CAER,EAODoM,SAASvB,EAAKoF,EAAOC,GACpB,MAAMjP,EAAOC,KACb,IAAIG,EAAMJ,EAAKkL,SAGf,OAFI9K,EAAM6O,IACT7O,EAAM6O,GACK,IAAR7O,EACI,GACRJ,EAAKkL,UAAY9K,EACjBwJ,EAAII,IAAIhK,EAAK+N,QAAQ9D,SAASjK,EAAK4O,cAAe5O,EAAK4O,cAAgBxO,GAAM4O,GAC7EhP,EAAK4O,eAAiBxO,EACtBJ,EAAKiM,UAAY7L,EACVA,EACP,EAMD2K,gBACC,MAAM/K,EAAOC,KACb,IAAIG,EAAMJ,EAAK+M,OAAO1E,QAElBjI,EAAMJ,EAAKgO,YACd5N,EAAMJ,EAAKgO,WACA,IAAR5N,IAWJJ,EAAK8N,SAAS9D,IAAIhK,EAAK+M,OAAO3E,YAAY6B,SAASjK,EAAK+M,OAAOX,YAAapM,EAAK+M,OAAOX,YAAchM,GAAMJ,EAAK6O,gBAEjH7O,EAAK6O,gBAAkBzO,EACvBJ,EAAK+M,OAAOX,aAAehM,EAC3BJ,EAAKkM,WAAa9L,EAClBJ,EAAKgO,WAAa5N,EAClBJ,EAAK+M,OAAO1E,SAAWjI,EACK,IAAxBJ,EAAK+M,OAAO1E,UACfrI,EAAK+M,OAAOX,YAAc,GAE3B,GCr5DF,MAEMvN,EAAO,EACPC,EAAe,EAEfC,GAAkB,EAClBmQ,GAAgB,EAChBC,GAAe,EACfnQ,GAAe,EAEfoQ,EAAe,CAAC,EAAY,EAAY,EAAY,EAAY,GAAY,GAAY,GAAY,IAAY,IAAY,IAAY,KAC7I,KAAY,KAAY,KAAY,MAAY,MAAY,OAEvDC,EAAO,KAUPC,EAAW,CAAC,GAAI,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EACxJ,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAChJ,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAChJ,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAC9I,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAC9I,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAC9I,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAC/I,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAC/I,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EACjJ,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,GAC/I,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAC7I,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAC/I,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAC7I,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAChJ,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAC/I,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAC/I,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAC/I,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAC9I,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAC9I,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAC/I,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAChJ,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EACjJ,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EACjJ,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAChJ,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EACjJ,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EACjJ,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAC/I,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,EACjJ,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EACjJ,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EACjJ,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EACjJ,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EACjJ,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EACjJ,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAChJ,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAChJ,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAChJ,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,EAAG,EAAG,KACrGC,EAAW,CAAC,GAAI,EAAG,EAAG,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,GAAI,EAAG,KAAM,GAAI,EAAG,EAAG,GAAI,EAAG,KAAM,GAAI,EAAG,GAAI,GAAI,EAAG,MAAO,GAAI,EAAG,EAAG,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,GAAI,EACpJ,KAAM,GAAI,EAAG,EAAG,GAAI,EAAG,KAAM,GAAI,EAAG,IAAK,IAAK,EAAG,MAAO,GAAI,EAAG,EAAG,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,GAAI,EAAG,KAAM,GAAI,EAAG,EAAG,GAAI,EAAG,KAAM,GAAI,EAAG,GAAI,GAAI,EAC5I,MAAO,GAAI,EAAG,EAAG,GAAI,EAAG,IAAK,GAAI,EAAG,GAAI,GAAI,EAAG,MAAO,GAAI,EAAG,GAAI,GAAI,EAAG,KAAM,GAAI,EAAG,IAAK,IAAK,EAAG,OAG7FC,EAAS,CACd,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GAGjHC,EAAS,CACd,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,KAGvFC,EAAS,CACd,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,OAElIC,EAAS,CACd,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAGzFC,EAAO,GAEb,SAASC,IAGR,IAAIC,EACAtD,EACA7D,EACAoH,EACAC,EACAC,EAEJ,SAASC,EAAWvQ,EAEnBwQ,EAAQrP,EACRP,EACA6P,EACAC,EACAC,EACAvP,EACAwP,EACAT,EACAtD,GAWA,IAAI9M,EACA0C,EACAoO,EACAvO,EACAsF,EACAkF,EACAF,EACAkE,EACAC,EACAvI,EACAwI,EACApI,EACAqI,EACAC,EACAC,EAIJ3I,EAAI,EACJZ,EAAIzG,EACJ,GACC6H,EAAEhJ,EAAEwQ,EAAShI,MACbA,IACAZ,UACc,IAANA,GAET,GAAIoB,EAAE,IAAM7H,EAGX,OAFAwP,EAAE,IAAM,EACRvP,EAAE,GAAK,EACAlC,EAKR,IADA4R,EAAI1P,EAAE,GACD0L,EAAI,EAAGA,GAAKmD,GACH,IAATjH,EAAE8D,GADgBA,KAOvB,IAJAF,EAAIE,EACAgE,EAAIhE,IACPgE,EAAIhE,GAEAlF,EAAIqI,EAAY,IAANrI,GACD,IAAToB,EAAEpB,GADiBA,KAWxB,IAPAiJ,EAAIjJ,EACAkJ,EAAIlJ,IACPkJ,EAAIlJ,GAELxG,EAAE,GAAK0P,EAGFI,EAAI,GAAKpE,EAAGA,EAAIlF,EAAGkF,IAAKoE,IAAM,EAClC,IAAKA,GAAKlI,EAAE8D,IAAM,EACjB,OAAOyC,EAGT,IAAK2B,GAAKlI,EAAEpB,IAAM,EACjB,OAAO2H,EAQR,IANAvG,EAAEpB,IAAMsJ,EAGRZ,EAAE,GAAKxD,EAAI,EACXtE,EAAI,EACJyI,EAAK,EACU,KAANrJ,GACR0I,EAAEW,GAAOnE,GAAK9D,EAAER,GAChByI,IACAzI,IAIDZ,EAAI,EACJY,EAAI,EACJ,GAC6B,KAAvBsE,EAAI9M,EAAEwQ,EAAShI,MACnBqE,EAAEyD,EAAExD,MAAQlF,GAEbY,YACUZ,EAAIzG,GAaf,IAZAA,EAAImP,EAAEO,GAGNP,EAAE,GAAK1I,EAAI,EACXY,EAAI,EACJlG,GAAK,EACLsG,GAAKkI,EACLT,EAAE,GAAK,EACPW,EAAI,EACJG,EAAI,EAGGvE,GAAKiE,EAAGjE,IAEd,IADA7M,EAAIiJ,EAAE4D,GACS,GAAR7M,KAAW,CAGjB,KAAO6M,EAAIhE,EAAIkI,GAAG,CAMjB,GALAxO,IACAsG,GAAKkI,EAELK,EAAIN,EAAIjI,EACRuI,EAAKA,EAAIL,EAAKA,EAAIK,GACb1O,EAAI,IAAMqK,EAAIF,EAAIhE,IAAM7I,EAAI,IAGhC0C,GAAK1C,EAAI,EACTkR,EAAKrE,EACDE,EAAIqE,GACP,OAASrE,EAAIqE,MACP1O,IAAM,IAAMuG,IAAIiI,KAErBxO,GAAKuG,EAAEiI,GAOV,GAHAE,EAAI,GAAKrE,EAGLqD,EAAG,GAAKgB,EAAIzB,EACf,OAAOH,EAERc,EAAE/N,GAAK0O,EAAab,EAAG,GACvBA,EAAG,IAAMgB,EAGC,IAAN7O,GACHgO,EAAEhO,GAAKsF,EACPwI,EAAE,GAAiBtD,EACnBsD,EAAE,GAAiBU,EACnBhE,EAAIlF,IAAOgB,EAAIkI,EACfV,EAAE,GAAiBY,EAAIX,EAAE/N,EAAI,GAAKwK,EAClC8D,EAAGvG,IAAI+F,EAAoB,GAAhBC,EAAE/N,EAAI,GAAKwK,KAKtB6D,EAAE,GAAKK,CAER,CAkBD,IAfAZ,EAAE,GAAkBxD,EAAIhE,EACpBJ,GAAKrH,EACRiP,EAAE,GAAK,IACGvD,EAAErE,GAAK5H,GACjBwP,EAAE,GAAkBvD,EAAErE,GAAK,IAAM,EAAI,GAErC4H,EAAE,GAAKvD,EAAErE,OAET4H,EAAE,GAAkBM,EAAE7D,EAAErE,GAAK5H,GAAK,GAAK,GAEvCwP,EAAE,GAAKK,EAAE5D,EAAErE,KAAO5H,IAInB6B,EAAI,GAAMmK,EAAIhE,EACTkE,EAAIlF,IAAMgB,EAAGkE,EAAIqE,EAAGrE,GAAKrK,EAC7BmO,EAAGvG,IAAI+F,EAAa,GAATY,EAAIlE,IAIhB,IAAKA,EAAI,GAAMF,EAAI,EAAgB,IAAXhF,EAAIkF,GAAUA,KAAO,EAC5ClF,GAAKkF,EAMN,IAJAlF,GAAKkF,EAGLiE,GAAQ,GAAKnI,GAAK,GACVhB,EAAImJ,IAAST,EAAEhO,IACtBA,IACAsG,GAAKkI,EACLC,GAAQ,GAAKnI,GAAK,CAEnB,CAGF,OAAa,IAANsI,GAAgB,GAALL,EAASxR,EAAcH,CACzC,CAED,SAASkS,EAAaC,GACrB,IAAIzJ,EAYJ,IAXKuI,IACJA,EAAK,GACLtD,EAAI,GACJ7D,EAAI,IAAIsI,WAAWrB,EAAO,GAC1BG,EAAI,GACJC,EAAI,IAAIiB,WAAWrB,GACnBK,EAAI,IAAIgB,WAAWrB,EAAO,IAEvBpD,EAAEnN,OAAS2R,IACdxE,EAAI,IAEAjF,EAAI,EAAGA,EAAIyJ,EAAOzJ,IACtBiF,EAAEjF,GAAK,EAER,IAAKA,EAAI,EAAGA,EAAIqI,EAAO,EAAGrI,IACzBoB,EAAEpB,GAAK,EAER,IAAKA,EAAI,EAAGA,EAAI,EAAGA,IAClBwI,EAAExI,GAAK,EAGRyI,EAAEhG,IAAIrB,EAAEsB,SAAS,EAAG2F,GAAO,GAE3BK,EAAEjG,IAAIrB,EAAEsB,SAAS,EAAG2F,EAAO,GAAI,EAC/B,CA7OY3P,KA+ORiR,mBAAqB,SAAUvI,EACnCwI,EACAC,EACAb,EACAO,GAEA,IAAIO,EAWJ,OAVAN,EAAa,IACbjB,EAAG,GAAK,EACRuB,EAASnB,EAAWvH,EAAG,EAAG,GAAI,GAAI,KAAM,KAAMyI,EAAID,EAAIZ,EAAIT,EAAItD,GAE1D6E,GAAUnC,EACb4B,EAAE3E,IAAM,0CACEkF,GAAUrS,GAAyB,IAAVmS,EAAG,KACtCL,EAAE3E,IAAM,sCACRkF,EAASnC,GAEHmC,CACT,EAjQcpR,KAmQRqR,sBAAwB,SAAUC,EACtCC,EACA7I,EACA8I,EACAC,EACAC,EACAC,EACArB,EACAO,GAEA,IAAIO,EAMJ,OAHAN,EAAa,KACbjB,EAAG,GAAK,EACRuB,EAASnB,EAAWvH,EAAG,EAAG4I,EAAI,IAAK/B,EAAQC,EAAQkC,EAAIF,EAAIlB,EAAIT,EAAItD,GAC/D6E,GAAUxS,GAAkB,IAAV4S,EAAG,IACpBJ,GAAUnC,EACb4B,EAAE3E,IAAM,qCACEkF,GAAUlC,IACpB2B,EAAE3E,IAAM,iCACRkF,EAASnC,GAEHmC,IAIRN,EAAa,KACbM,EAASnB,EAAWvH,EAAG4I,EAAIC,EAAI,EAAG9B,EAAQC,EAAQiC,EAAIF,EAAInB,EAAIT,EAAItD,GAE9D6E,GAAUxS,GAAmB,IAAV6S,EAAG,IAAYH,EAAK,KACtCF,GAAUnC,EACb4B,EAAE3E,IAAM,+BACEkF,GAAUrS,GACpB8R,EAAE3E,IAAM,2BACRkF,EAASnC,GACCmC,GAAUlC,IACpB2B,EAAE3E,IAAM,mCACRkF,EAASnC,GAEHmC,GAGDxS,EACT,CAEA,CAEAgR,EAAQgC,oBAAsB,SAAUJ,EACvCC,EACAC,EACAC,GAMA,OAJAH,EAAG,GAvXa,EAwXhBC,EAAG,GAvXa,EAwXhBC,EAAG,GAAKrC,EACRsC,EAAG,GAAKrC,EACD1Q,CACR,EAOA,MAAMiT,EAAQ,EACRC,EAAM,EACNC,EAAS,EACTC,EAAO,EACPC,EAAU,EACVC,EAAO,EAEPC,EAAM,EAENC,EAAO,EAEPC,EAAM,EACNC,EAAU,EAEhB,SAASC,KACR,MAAMxS,EAAOC,KAEb,IAAIwS,EAKAjS,EAYA+I,EAEAC,EAhBApJ,EAAM,EAGNsS,EAAa,EACbC,EAAO,EAEPC,EAAM,EAGNC,EAAM,EACN9P,EAAO,EAEP+P,EAAQ,EACRC,EAAQ,EAERC,EAAc,EAEdC,EAAc,EAOlB,SAASC,EAAazB,EAAIC,EAAIC,EAAIwB,EAAUvB,EAAIwB,EAAU7S,EAAGuQ,GAC5D,IAAIR,EACA+C,EACAC,EACAjD,EACA1Q,EACA4M,EACApE,EACArH,EACA6P,EACA5P,EACAwS,EACAC,EACA7K,EACAyH,EACAL,EAEA0D,EAGJtL,EAAI2I,EAAElC,cACN9N,EAAIgQ,EAAE5F,SACNvL,EAAIY,EAAEmT,KACNnH,EAAIhM,EAAEoT,KACNhD,EAAIpQ,EAAEqT,MACN7S,EAAI4P,EAAIpQ,EAAEsT,KAAOtT,EAAEsT,KAAOlD,EAAI,EAAIpQ,EAAEuT,IAAMnD,EAG1C4C,EAAKnE,EAAaqC,GAClB+B,EAAKpE,EAAasC,GAGlB,EAAG,CAEF,KAAOnF,EAAK,IACXzL,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,EAON,GAJA+D,EAAI3Q,EAAI4T,EACRF,EAAK1B,EACL2B,EAAWH,EACXM,EAAgC,GAAhBH,EAAWhD,GACI,KAA1BD,EAAIgD,EAAGI,IAQZ,OAAG,CAKF,GAHA9T,IAAO0T,EAAGI,EAAe,GACzBlH,GAAM8G,EAAGI,EAAe,GAEP,IAAR,GAAJpD,GAAe,CAQnB,IAPAA,GAAK,GACL1H,EAAI0K,EAAGI,EAAe,IAAiB9T,EAAIyP,EAAaiB,IAExD1Q,IAAM0Q,EACN9D,GAAK8D,EAGE9D,EAAK,IACXzL,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,EASN,IANA+D,EAAI3Q,EAAI6T,EACRH,EAAKzB,EACL0B,EAAWF,EACXK,EAAgC,GAAhBH,EAAWhD,GAC3BD,EAAIgD,EAAGI,KAEJ,CAKF,GAHA9T,IAAO0T,EAAGI,EAAe,GACzBlH,GAAM8G,EAAGI,EAAe,GAEP,IAAR,GAAJpD,GAAe,CAGnB,IADAA,GAAK,GACE9D,EAAK,GACXzL,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,EAUN,GAPA6D,EAAIiD,EAAGI,EAAe,IAAM9T,EAAIyP,EAAaiB,IAE7C1Q,IAAC,EACD4M,GAAC,EAGDxL,GAAK4H,EACDgI,GAAKP,EAERL,EAAIY,EAAIP,EACJO,EAAIZ,EAAI,GAAK,EAAKY,EAAIZ,GACzBxP,EAAE4E,IAAIwL,KAAOpQ,EAAE4E,IAAI4K,KAGnBxP,EAAE4E,IAAIwL,KAAOpQ,EAAE4E,IAAI4K,KAGnBpH,GAAK,IAELpI,EAAE4E,IAAI6E,IAAIzJ,EAAE4E,IAAI8E,SAAS8F,EAAGA,EAAI,GAAIY,GACpCA,GAAK,EACLZ,GAAK,EACLpH,GAAK,OAEA,CACNoH,EAAIY,EAAIP,EACR,GACCL,GAAKxP,EAAEuT,UACC/D,EAAI,GAEb,GADAM,EAAI9P,EAAEuT,IAAM/D,EACRpH,EAAI0H,EAAG,CAEV,GADA1H,GAAK0H,EACDM,EAAIZ,EAAI,GAAKM,EAAKM,EAAIZ,EACzB,GACCxP,EAAE4E,IAAIwL,KAAOpQ,EAAE4E,IAAI4K,WACH,KAANM,QAEX9P,EAAE4E,IAAI6E,IAAIzJ,EAAE4E,IAAI8E,SAAS8F,EAAGA,EAAIM,GAAIM,GACpCA,GAAKN,EACLN,GAAKM,EACLA,EAAI,EAELN,EAAI,CACJ,CAED,CAGD,GAAIY,EAAIZ,EAAI,GAAKpH,EAAKgI,EAAIZ,EACzB,GACCxP,EAAE4E,IAAIwL,KAAOpQ,EAAE4E,IAAI4K,WACH,KAANpH,QAEXpI,EAAE4E,IAAI6E,IAAIzJ,EAAE4E,IAAI8E,SAAS8F,EAAGA,EAAIpH,GAAIgI,GACpCA,GAAKhI,EACLoH,GAAKpH,EACLA,EAAI,EAEL,KACA,CAAM,GAAiB,IAAR,GAAJ0H,GAqBX,OAfAS,EAAE3E,IAAM,wBAERxD,EAAImI,EAAE5F,SAAWpK,EACjB6H,EAAK4D,GAAK,EAAK5D,EAAI4D,GAAK,EAAI5D,EAC5B7H,GAAK6H,EACLR,GAAKQ,EACL4D,GAAK5D,GAAK,EAEVpI,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EAEHzB,EApBPoB,GAAK+C,EAAGI,EAAe,GACvBnD,GAAM3Q,EAAIyP,EAAaiB,GACvBoD,EAAgC,GAAhBH,EAAWhD,GAC3BD,EAAIgD,EAAGI,EAoBR,CACD,KACA,CAED,GAAiB,IAAR,GAAJpD,GAaE,OAAiB,IAAR,GAAJA,IAEX1H,EAAImI,EAAE5F,SAAWpK,EACjB6H,EAAK4D,GAAK,EAAK5D,EAAI4D,GAAK,EAAI5D,EAC5B7H,GAAK6H,EACLR,GAAKQ,EACL4D,GAAK5D,GAAK,EAEVpI,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EAEH7R,IAEPgS,EAAE3E,IAAM,8BAERxD,EAAImI,EAAE5F,SAAWpK,EACjB6H,EAAK4D,GAAK,EAAK5D,EAAI4D,GAAK,EAAI5D,EAC5B7H,GAAK6H,EACLR,GAAKQ,EACL4D,GAAK5D,GAAK,EAEVpI,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EAEHzB,GAzCP,GAHAoB,GAAK+C,EAAGI,EAAe,GACvBnD,GAAM3Q,EAAIyP,EAAaiB,GACvBoD,EAAgC,GAAhBH,EAAWhD,GACI,KAA1BD,EAAIgD,EAAGI,IAAsB,CAEjC9T,IAAO0T,EAAGI,EAAe,GACzBlH,GAAM8G,EAAGI,EAAe,GAExBlT,EAAE4E,IAAIwL,KAAmB0C,EAAGI,EAAe,GAC3C1S,IACA,KACA,CAoCF,MArLApB,IAAO0T,EAAGI,EAAe,GACzBlH,GAAM8G,EAAGI,EAAe,GAExBlT,EAAE4E,IAAIwL,KAAmB0C,EAAGI,EAAe,GAC3C1S,GAkLD,OAAQA,GAAK,KAAOD,GAAK,IAgB1B,OAbA6H,EAAImI,EAAE5F,SAAWpK,EACjB6H,EAAK4D,GAAK,EAAK5D,EAAI4D,GAAK,EAAI5D,EAC5B7H,GAAK6H,EACLR,GAAKQ,EACL4D,GAAK5D,GAAK,EAEVpI,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EAEH9R,CACP,CAEDmB,EAAKgU,KAAO,SAAUvC,EAAIC,EAAIC,EAAIwB,EAAUvB,EAAIwB,GAC/CX,EAAOX,EACPgB,EAAoBrB,EACpBsB,EAAoBrB,EACpBnI,EAAQoI,EACRqB,EAAcG,EACd3J,EAAQoI,EACRqB,EAAcG,EACd5S,EAAO,IACT,EAECR,EAAKiU,KAAO,SAAU1T,EAAGuQ,EAAGf,GAC3B,IAAItD,EACAyH,EACA7D,EAIAvP,EACA6P,EACA5P,EACAqB,EANAzC,EAAI,EACJ4M,EAAI,EACJpE,EAAI,EAgBR,IATAA,EAAI2I,EAAElC,cACN9N,EAAIgQ,EAAE5F,SACNvL,EAAIY,EAAEmT,KACNnH,EAAIhM,EAAEoT,KACNhD,EAAIpQ,EAAEqT,MACN7S,EAAI4P,EAAIpQ,EAAEsT,KAAOtT,EAAEsT,KAAOlD,EAAI,EAAIpQ,EAAEuT,IAAMnD,IAKzC,OAAQ8B,GAEP,KAAKX,EACJ,GAAI/Q,GAAK,KAAOD,GAAK,KAEpBP,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACVZ,EAAImD,EAAaJ,EAAOC,EAAOxJ,EAAOyJ,EAAaxJ,EAAOyJ,EAAa1S,EAAGuQ,GAE1E3I,EAAI2I,EAAElC,cACN9N,EAAIgQ,EAAE5F,SACNvL,EAAIY,EAAEmT,KACNnH,EAAIhM,EAAEoT,KACNhD,EAAIpQ,EAAEqT,MACN7S,EAAI4P,EAAIpQ,EAAEsT,KAAOtT,EAAEsT,KAAOlD,EAAI,EAAIpQ,EAAEuT,IAAMnD,EAEtCZ,GAAKlR,GAAM,CACd4T,EAAO1C,GAAKjR,EAAeuT,EAAOE,EAClC,KACA,CAEFI,EAAOG,EACPtS,EAAO+I,EACPmJ,EAAaM,EAEbP,EAAOV,EAER,KAAKA,EAGJ,IAFAtF,EAAIkG,EAEGpG,EAAK,GAAI,CACf,GAAU,IAANzL,EAUH,OANAP,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACHpQ,EAAE4T,cAAcrD,EAAGf,GAT1BA,EAAIlR,EAWLiC,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,CACL,CASD,GAPA2H,EAAgD,GAAtCxB,GAAc/S,EAAIyP,EAAa3C,KAEzC9M,KAAQa,EAAK0T,EAAS,GACtB3H,GAAM/L,EAAK0T,EAAS,GAEpB7D,EAAI7P,EAAK0T,GAEC,IAAN7D,EAAS,CACZuC,EAAMpS,EAAK0T,EAAS,GACpBzB,EAAOL,EACP,KACA,CACD,GAAiB,IAAR,GAAJ/B,GAAe,CACnBwC,EAAU,GAAJxC,EACNjQ,EAAMI,EAAK0T,EAAS,GACpBzB,EAAOT,EACP,KACA,CACD,GAAiB,IAAR,GAAJ3B,GAAe,CACnBsC,EAAOtC,EACPqC,EAAawB,EAAS,EAAI1T,EAAK0T,EAAS,GACxC,KACA,CACD,GAAiB,IAAR,GAAJ7D,GAAe,CACnBoC,EAAOJ,EACP,KACA,CAWD,OAVAI,EAAOF,EACPzB,EAAE3E,IAAM,8BACR4D,EAAIb,EAEJ3O,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACHpQ,EAAE4T,cAAcrD,EAAGf,GAE3B,KAAKiC,EAGJ,IAFAvF,EAAIoG,EAEGtG,EAAK,GAAI,CACf,GAAU,IAANzL,EAUH,OANAP,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACHpQ,EAAE4T,cAAcrD,EAAGf,GAT1BA,EAAIlR,EAWLiC,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,CACL,CAEDnM,GAAQT,EAAIyP,EAAa3C,GAEzB9M,IAAM8M,EACNF,GAAKE,EAELkG,EAAOI,EACPvS,EAAOgJ,EACPkJ,EAAaO,EACbR,EAAOR,EAER,KAAKA,EAGJ,IAFAxF,EAAIkG,EAEGpG,EAAK,GAAI,CACf,GAAU,IAANzL,EAUH,OANAP,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACHpQ,EAAE4T,cAAcrD,EAAGf,GAT1BA,EAAIlR,EAWLiC,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,CACL,CAQD,GANA2H,EAAgD,GAAtCxB,GAAc/S,EAAIyP,EAAa3C,KAEzC9M,IAAMa,EAAK0T,EAAS,GACpB3H,GAAK/L,EAAK0T,EAAS,GAEnB7D,EAAK7P,EAAK0T,GACO,IAAR,GAAJ7D,GAAe,CACnBwC,EAAU,GAAJxC,EACNtN,EAAOvC,EAAK0T,EAAS,GACrBzB,EAAOP,EACP,KACA,CACD,GAAiB,IAAR,GAAJ7B,GAAe,CACnBsC,EAAOtC,EACPqC,EAAawB,EAAS,EAAI1T,EAAK0T,EAAS,GACxC,KACA,CAWD,OAVAzB,EAAOF,EACPzB,EAAE3E,IAAM,wBACR4D,EAAIb,EAEJ3O,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACHpQ,EAAE4T,cAAcrD,EAAGf,GAE3B,KAAKmC,EAGJ,IAFAzF,EAAIoG,EAEGtG,EAAK,GAAI,CACf,GAAU,IAANzL,EAUH,OANAP,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACHpQ,EAAE4T,cAAcrD,EAAGf,GAT1BA,EAAIlR,EAWLiC,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,CACL,CAEDxJ,GAASpD,EAAIyP,EAAa3C,GAE1B9M,IAAM8M,EACNF,GAAKE,EAELgG,EAAON,EAER,KAAKA,EAEJ,IADA/P,EAAIuO,EAAI5N,EACDX,EAAI,GACVA,GAAK7B,EAAEuT,IAER,KAAe,IAAR1T,GAAW,CAEjB,GAAU,IAANW,IACC4P,GAAKpQ,EAAEuT,KAAkB,IAAXvT,EAAEsT,OACnBlD,EAAI,EACJ5P,EAAI4P,EAAIpQ,EAAEsT,KAAOtT,EAAEsT,KAAOlD,EAAI,EAAIpQ,EAAEuT,IAAMnD,GAEjC,IAAN5P,IACHR,EAAEqT,MAAQjD,EACVZ,EAAIxP,EAAE4T,cAAcrD,EAAGf,GACvBY,EAAIpQ,EAAEqT,MACN7S,EAAI4P,EAAIpQ,EAAEsT,KAAOtT,EAAEsT,KAAOlD,EAAI,EAAIpQ,EAAEuT,IAAMnD,EAEtCA,GAAKpQ,EAAEuT,KAAkB,IAAXvT,EAAEsT,OACnBlD,EAAI,EACJ5P,EAAI4P,EAAIpQ,EAAEsT,KAAOtT,EAAEsT,KAAOlD,EAAI,EAAIpQ,EAAEuT,IAAMnD,GAGjC,IAAN5P,IAOH,OANAR,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACHpQ,EAAE4T,cAAcrD,EAAGf,GAK7BxP,EAAE4E,IAAIwL,KAAOpQ,EAAE4E,IAAI/C,KACnBrB,IAEIqB,GAAK7B,EAAEuT,MACV1R,EAAI,GACLhC,GACA,CACDqS,EAAOX,EACP,MACD,KAAKM,EACJ,GAAU,IAANrR,IACC4P,GAAKpQ,EAAEuT,KAAkB,IAAXvT,EAAEsT,OACnBlD,EAAI,EACJ5P,EAAI4P,EAAIpQ,EAAEsT,KAAOtT,EAAEsT,KAAOlD,EAAI,EAAIpQ,EAAEuT,IAAMnD,GAEjC,IAAN5P,IACHR,EAAEqT,MAAQjD,EACVZ,EAAIxP,EAAE4T,cAAcrD,EAAGf,GACvBY,EAAIpQ,EAAEqT,MACN7S,EAAI4P,EAAIpQ,EAAEsT,KAAOtT,EAAEsT,KAAOlD,EAAI,EAAIpQ,EAAEuT,IAAMnD,EAEtCA,GAAKpQ,EAAEuT,KAAkB,IAAXvT,EAAEsT,OACnBlD,EAAI,EACJ5P,EAAI4P,EAAIpQ,EAAEsT,KAAOtT,EAAEsT,KAAOlD,EAAI,EAAIpQ,EAAEuT,IAAMnD,GAEjC,IAAN5P,IAOH,OANAR,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACHpQ,EAAE4T,cAAcrD,EAAGf,GAI7BA,EAAIlR,EAEJ0B,EAAE4E,IAAIwL,KAAmBiC,EACzB7R,IAEA0R,EAAOX,EACP,MACD,KAAKO,EAYJ,GAXI9F,EAAI,IACPA,GAAK,EACLzL,IACAqH,KAGD5H,EAAEqT,MAAQjD,EACVZ,EAAIxP,EAAE4T,cAAcrD,EAAGf,GACvBY,EAAIpQ,EAAEqT,MACN7S,EAAI4P,EAAIpQ,EAAEsT,KAAOtT,EAAEsT,KAAOlD,EAAI,EAAIpQ,EAAEuT,IAAMnD,EAEtCpQ,EAAEsT,MAAQtT,EAAEqT,MAOf,OANArT,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACHpQ,EAAE4T,cAAcrD,EAAGf,GAE3B0C,EAAOH,EAER,KAAKA,EAQJ,OAPAvC,EAAIjR,EACJyB,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACHpQ,EAAE4T,cAAcrD,EAAGf,GAE3B,KAAKwC,EAUJ,OARAxC,EAAIb,EAEJ3O,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACHpQ,EAAE4T,cAAcrD,EAAGf,GAE3B,QASC,OARAA,EAAIhR,EAEJwB,EAAEmT,KAAO/T,EACTY,EAAEoT,KAAOpH,EACTuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB5H,EAAEqT,MAAQjD,EACHpQ,EAAE4T,cAAcrD,EAAGf,GAG/B,EAEC/P,EAAKoU,KAAO,WAEb,CAEA,CAKA,MAAMC,GAAS,CACd,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,IAEzDC,GAAO,EACPC,GAAO,EACPC,GAAS,EACTC,GAAQ,EACRC,GAAQ,EAERC,GAAQ,EAERC,GAAQ,EACRC,GAAM,EACNC,GAAY,EACZC,GAAY,EAElB,SAASC,GAAUlE,EAAGvI,GACrB,MAAMvI,EAAOC,KAEb,IAMIgV,EANAxC,EAAO6B,GAEPY,EAAO,EAEPC,EAAQ,EACR7R,EAAQ,EAEZ,MAAM6N,EAAK,CAAC,GACNC,EAAK,CAAC,GAENgE,EAAQ,IAAI5C,GAElB,IAAI6C,EAAO,EAEPC,EAAQ,IAAIrE,WAAkB,EAAP5B,GAC3B,MACMkG,EAAU,IAAI1F,EAEpB7P,EAAK2T,KAAO,EACZ3T,EAAK0T,KAAO,EACZ1T,EAAKmF,IAAM,IAAI6H,WAAWzE,GAC1BvI,EAAK8T,IAAMvL,EACXvI,EAAK6T,KAAO,EACZ7T,EAAK4T,MAAQ,EAEb5T,EAAKwV,MAAQ,SAAU1E,EAAGnI,GACrBA,IACHA,EAAE,GAZU,GAeT8J,GAAQmC,IACXQ,EAAMhB,KAAKtD,GAEZ2B,EAAO6B,GACPtU,EAAK2T,KAAO,EACZ3T,EAAK0T,KAAO,EACZ1T,EAAK6T,KAAO7T,EAAK4T,MAAQ,CAC3B,EAEC5T,EAAKwV,MAAM1E,EAAG,MAGd9Q,EAAKmU,cAAgB,SAAUrD,EAAGf,GACjC,IAAIjP,EACAqH,EACAwI,EAmDJ,OAhDAxI,EAAI2I,EAAEjC,eACN8B,EAAI3Q,EAAK6T,KAGT/S,GAAiB6P,GAAK3Q,EAAK4T,MAAQ5T,EAAK4T,MAAQ5T,EAAK8T,KAAOnD,EACxD7P,EAAIgQ,EAAE9C,YACTlN,EAAIgQ,EAAE9C,WACG,IAANlN,GAAWiP,GAAK/Q,IACnB+Q,EAAIlR,GAGLiS,EAAE9C,WAAalN,EACfgQ,EAAE5E,WAAapL,EAGfgQ,EAAEhD,SAAS9D,IAAIhK,EAAKmF,IAAI8E,SAAS0G,EAAGA,EAAI7P,GAAIqH,GAC5CA,GAAKrH,EACL6P,GAAK7P,EAGD6P,GAAK3Q,EAAK8T,MAEbnD,EAAI,EACA3Q,EAAK4T,OAAS5T,EAAK8T,MACtB9T,EAAK4T,MAAQ,GAGd9S,EAAId,EAAK4T,MAAQjD,EACb7P,EAAIgQ,EAAE9C,YACTlN,EAAIgQ,EAAE9C,WACG,IAANlN,GAAWiP,GAAK/Q,IACnB+Q,EAAIlR,GAGLiS,EAAE9C,WAAalN,EACfgQ,EAAE5E,WAAapL,EAGfgQ,EAAEhD,SAAS9D,IAAIhK,EAAKmF,IAAI8E,SAAS0G,EAAGA,EAAI7P,GAAIqH,GAC5CA,GAAKrH,EACL6P,GAAK7P,GAINgQ,EAAEjC,eAAiB1G,EACnBnI,EAAK6T,KAAOlD,EAGLZ,CACT,EAEC/P,EAAKiU,KAAO,SAAUnD,EAAGf,GACxB,IAAIO,EACA3Q,EACA4M,EACApE,EACArH,EACA6P,EACA5P,EAEAwG,EAiBJ,IAbAY,EAAI2I,EAAElC,cACN9N,EAAIgQ,EAAE5F,SACNvL,EAAIK,EAAK0T,KACTnH,EAAIvM,EAAK2T,KAGThD,EAAI3Q,EAAK4T,MACT7S,EAAgB4P,EAAI3Q,EAAK6T,KAAO7T,EAAK6T,KAAOlD,EAAI,EAAI3Q,EAAK8T,IAAMnD,IAMlD,CACZ,IAAIc,EAAIC,EAAIC,EAAIC,EAAI6D,EAAKC,EAAKC,EAAKC,EACnC,OAAQnD,GACP,KAAK6B,GAEJ,KAAO/H,EAAK,GAAI,CACf,GAAU,IAANzL,EASH,OANAd,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAR7BA,EAAIlR,EAULiC,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,CACL,CAID,OAHA+D,EAAoB,EAAJ3Q,EAChB0V,EAAW,EAAJ/E,EAECA,IAAM,GACb,KAAK,EAEJ3Q,KAAC,EACD4M,GAAC,EAED+D,EAAQ,EAAJ/D,EAGJ5M,KAAC,EACD4M,GAAC,EAEDkG,EAAO8B,GACP,MACD,KAAK,EAEJ9C,EAAK,GACLC,EAAK,GACLC,EAAK,CAAC,IACNC,EAAK,CAAC,IAEN/B,EAAQgC,oBAAoBJ,EAAIC,EAAIC,EAAIC,GACxCwD,EAAMpB,KAAKvC,EAAG,GAAIC,EAAG,GAAIC,EAAG,GAAI,EAAGC,EAAG,GAAI,GAI1CjS,KAAC,EACD4M,GAAC,EAGDkG,EAAOmC,GACP,MACD,KAAK,EAGJjV,KAAC,EACD4M,GAAC,EAGDkG,EAAOgC,GACP,MACD,KAAK,EAgBJ,OAbA9U,KAAC,EACD4M,GAAC,EAEDkG,EAAOsC,GACPjE,EAAE3E,IAAM,qBACR4D,EAAIb,EAEJlP,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAE/B,MACD,KAAKwE,GAEJ,KAAOhI,EAAK,IAAK,CAChB,GAAU,IAANzL,EASH,OANAd,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAR7BA,EAAIlR,EAULiC,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,CACL,CAED,KAAQ5M,IAAO,GAAM,SAAgB,MAAJA,GAWhC,OAVA8S,EAAOsC,GACPjE,EAAE3E,IAAM,+BACR4D,EAAIb,EAEJlP,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAE9BmF,EAAY,MAAJvV,EACRA,EAAI4M,EAAI,EACRkG,EAAgB,IAATyC,EAAaV,GAAmB,IAATa,EAAaR,GAAMP,GACjD,MACD,KAAKE,GACJ,GAAU,IAAN1T,EAOH,OANAd,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAG9B,GAAU,IAANhP,IACC4P,GAAK3Q,EAAK8T,KAAqB,IAAd9T,EAAK6T,OACzBlD,EAAI,EACJ5P,EAAgB4P,EAAI3Q,EAAK6T,KAAO7T,EAAK6T,KAAOlD,EAAI,EAAI3Q,EAAK8T,IAAMnD,GAEtD,IAAN5P,IACHf,EAAK4T,MAAQjD,EACbZ,EAAI/P,EAAKmU,cAAcrD,EAAGf,GAC1BY,EAAI3Q,EAAK4T,MACT7S,EAAgB4P,EAAI3Q,EAAK6T,KAAO7T,EAAK6T,KAAOlD,EAAI,EAAI3Q,EAAK8T,IAAMnD,EAC3DA,GAAK3Q,EAAK8T,KAAqB,IAAd9T,EAAK6T,OACzBlD,EAAI,EACJ5P,EAAgB4P,EAAI3Q,EAAK6T,KAAO7T,EAAK6T,KAAOlD,EAAI,EAAI3Q,EAAK8T,IAAMnD,GAEtD,IAAN5P,IAOH,OANAf,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAgBhC,GAZAA,EAAIlR,EAEJyR,EAAI4E,EACA5E,EAAIxP,IACPwP,EAAIxP,GACDwP,EAAIvP,IACPuP,EAAIvP,GACLf,EAAKmF,IAAI6E,IAAI8G,EAAE3F,SAAShD,EAAGmI,GAAIK,GAC/BxI,GAAKmI,EACLxP,GAAKwP,EACLK,GAAKL,EACLvP,GAAKuP,EACe,IAAf4E,GAAQ5E,GACZ,MACDmC,EAAgB,IAAT4C,EAAaR,GAAMP,GAC1B,MACD,KAAKG,GAEJ,KAAOlI,EAAK,IAAK,CAChB,GAAU,IAANzL,EASH,OANAd,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAR7BA,EAAIlR,EAWLiC,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,CACL,CAGD,GADA4I,EAAQ7E,EAAS,MAAJ3Q,GACJ,GAAJ2Q,GAAY,KAAQA,GAAK,EAAK,IAAQ,GAW1C,OAVAmC,EAAOsC,GACPjE,EAAE3E,IAAM,sCACR4D,EAAIb,EAEJlP,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAG9B,GADAO,EAAI,KAAW,GAAJA,IAAcA,GAAK,EAAK,KAC9B2E,GAASA,EAAM5V,OAASiR,EAC5B2E,EAAQ,QAER,IAAK1N,EAAI,EAAGA,EAAI+I,EAAG/I,IAClB0N,EAAM1N,GAAK,EAKb5H,KAAC,GACD4M,GAAC,GAGDjJ,EAAQ,EACRmP,EAAOiC,GAER,KAAKA,GACJ,KAAOpR,EAAQ,GAAK6R,IAAU,KAAK,CAClC,KAAO5I,EAAK,GAAI,CACf,GAAU,IAANzL,EASH,OANAd,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAR7BA,EAAIlR,EAULiC,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,CACL,CAED0I,EAAMZ,GAAO/Q,MAAgB,EAAJ3D,EAGzBA,KAAC,EACD4M,GAAC,CAED,CAED,KAAOjJ,EAAQ,IACd2R,EAAMZ,GAAO/Q,MAAY,EAK1B,GAFA6N,EAAG,GAAK,EACRb,EAAIiF,EAAQrE,mBAAmB+D,EAAO9D,EAAIC,EAAIkE,EAAOxE,GACjDR,GAAKzR,EAaR,OAZAkR,EAAIO,IACKpB,IACR+F,EAAQ,KACRxC,EAAOsC,IAGR/U,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAG9BzM,EAAQ,EACRmP,EAAOkC,GAER,KAAKA,GAEJ,KACCrE,EAAI6E,IACA7R,GAAS,KAAW,GAAJgN,IAAcA,GAAK,EAAK,MAFhC,CAMZ,IAAI7D,EAAG9D,EAIP,IAFA2H,EAAIa,EAAG,GAEA5E,EAAK,GAAI,CACf,GAAU,IAANzL,EASH,OANAd,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAR7BA,EAAIlR,EAULiC,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,CACL,CASD,GAHA+D,EAAIgF,EAAwC,GAAjClE,EAAG,IAAMzR,EAAIyP,EAAakB,KAAW,GAChD3H,EAAI2M,EAAwC,GAAjClE,EAAG,IAAMzR,EAAIyP,EAAakB,KAAW,GAE5C3H,EAAI,GACPhJ,KAAC,EACD4M,GAAC,EACD0I,EAAM3R,KAAWqF,MACX,CAIN,IAHApB,EAAS,IAALoB,EAAU,EAAIA,EAAI,GACtB8D,EAAS,IAAL9D,EAAU,GAAK,EAEZ4D,EAAK+D,EAAI/I,GAAI,CACnB,GAAU,IAANzG,EASH,OANAd,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAR7BA,EAAIlR,EAULiC,IACAnB,IAAyB,IAAnBmR,EAAEiD,UAAU5L,OAAgBoE,EAClCA,GAAK,CACL,CAYD,GAVA5M,KAAC,EACD4M,GAAC,EAEDE,GAAM9M,EAAIyP,EAAa7H,GAEvB5H,KAAC,EACD4M,GAAC,EAEDhF,EAAIjE,EACJgN,EAAI6E,EACA5N,EAAIkF,EAAI,KAAW,GAAJ6D,IAAcA,GAAK,EAAK,KAAe,IAAL3H,GAAWpB,EAAI,EAYnE,OAXA0N,EAAQ,KACRxC,EAAOsC,GACPjE,EAAE3E,IAAM,4BACR4D,EAAIb,EAEJlP,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAG9BpH,EAAS,IAALA,EAAUsM,EAAM1N,EAAI,GAAK,EAC7B,GACC0N,EAAM1N,KAAOoB,QACG,KAAN8D,GACXnJ,EAAQiE,CACR,CACD,CAcD,GAZA6J,EAAG,IAAM,EAETqE,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNH,EAAI,GAAK,EACTC,EAAI,GAAK,EAETpF,EAAI6E,EACJ7E,EAAIiF,EAAQjE,sBAAsB,KAAW,GAAJhB,GAAW,GAAMA,GAAK,EAAK,IAAO2E,EAAOQ,EAAKC,EAAKC,EAAKC,EAAKN,EAAOxE,GAEzGR,GAAKzR,EAaR,OAZIyR,GAAKpB,IACR+F,EAAQ,KACRxC,EAAOsC,IAERhF,EAAIO,EAEJtQ,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAE9BqF,EAAMpB,KAAKyB,EAAI,GAAIC,EAAI,GAAIJ,EAAOK,EAAI,GAAIL,EAAOM,EAAI,IAErDnD,EAAOmC,GAER,KAAKA,GAQJ,GAPA5U,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,GAERZ,EAAIqF,EAAMnB,KAAKjU,EAAM8Q,EAAGf,KAAOjR,EACnC,OAAOkB,EAAKmU,cAAcrD,EAAGf,GAY9B,GAVAA,EAAIlR,EACJuW,EAAMhB,KAAKtD,GAEX3I,EAAI2I,EAAElC,cACN9N,EAAIgQ,EAAE5F,SACNvL,EAAIK,EAAK0T,KACTnH,EAAIvM,EAAK2T,KACThD,EAAI3Q,EAAK4T,MACT7S,EAAgB4P,EAAI3Q,EAAK6T,KAAO7T,EAAK6T,KAAOlD,EAAI,EAAI3Q,EAAK8T,IAAMnD,EAElD,IAAT0E,EAAY,CACf5C,EAAO6B,GACP,KACA,CACD7B,EAAOoC,GAER,KAAKA,GAKJ,GAJA7U,EAAK4T,MAAQjD,EACbZ,EAAI/P,EAAKmU,cAAcrD,EAAGf,GAC1BY,EAAI3Q,EAAK4T,MACT7S,EAAgB4P,EAAI3Q,EAAK6T,KAAO7T,EAAK6T,KAAOlD,EAAI,EAAI3Q,EAAK8T,IAAMnD,EAC3D3Q,EAAK6T,MAAQ7T,EAAK4T,MAOrB,OANA5T,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAE9B0C,EAAOqC,GAER,KAAKA,GASJ,OARA/E,EAAIjR,EAEJkB,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAC9B,KAAKgF,GASJ,OARAhF,EAAIb,EAEJlP,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAE9B,QASC,OARAA,EAAIhR,EAEJiB,EAAK0T,KAAO/T,EACZK,EAAK2T,KAAOpH,EACZuE,EAAE5F,SAAWpK,EACbgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClBnI,EAAK4T,MAAQjD,EACN3Q,EAAKmU,cAAcrD,EAAGf,GAE/B,CACH,EAEC/P,EAAKoU,KAAO,SAAUtD,GACrB9Q,EAAKwV,MAAM1E,EAAG,MACd9Q,EAAKmF,IAAM,KACXmQ,EAAQ,IAEV,EAECtV,EAAK6V,eAAiB,SAAUzF,EAAGpB,EAAOlO,GACzCd,EAAKmF,IAAI6E,IAAIoG,EAAEnG,SAAS+E,EAAOA,EAAQlO,GAAI,GAC3Cd,EAAK6T,KAAO7T,EAAK4T,MAAQ9S,CAC3B,EAICd,EAAK8V,WAAa,WACjB,OAAOrD,GAAQ8B,GAAO,EAAI,CAC5B,CAEA,CAKA,MAaMwB,GAAM,GAENC,GAAO,CAAC,EAAG,EAAG,IAAM,KAE1B,SAASC,KACR,MAAMjW,EAAOC,KAmBb,SAASiW,EAAapF,GACrB,OAAKA,GAAMA,EAAEqF,QAGbrF,EAAE7E,SAAW6E,EAAE5E,UAAY,EAC3B4E,EAAE3E,IAAM,KACR2E,EAAEqF,OAAO1D,KAhCI,EAiCb3B,EAAEqF,OAAOC,OAAOZ,MAAM1E,EAAG,MAClBjS,GANCE,CAOR,CA1BDiB,EAAKyS,KAAO,EAGZzS,EAAKqW,OAAS,EAGdrW,EAAKsW,IAAM,CAAC,GACZtW,EAAK2S,KAAO,EAGZ3S,EAAKuW,OAAS,EAGdvW,EAAKwW,MAAQ,EAebxW,EAAKyW,WAAa,SAAU3F,GAK3B,OAJI9Q,EAAKoW,QACRpW,EAAKoW,OAAOhC,KAAKtD,GAClB9Q,EAAKoW,OAAS,KAEPvX,CACT,EAECmB,EAAK0W,YAAc,SAAU5F,EAAGvI,GAK/B,OAJAuI,EAAE3E,IAAM,KACRnM,EAAKoW,OAAS,KAGV7N,EAAI,GAAKA,EAAI,IAChBvI,EAAKyW,WAAW3F,GACT/R,IAERiB,EAAKwW,MAAQjO,EAEbuI,EAAEqF,OAAOC,OAAS,IAAIpB,GAAUlE,EAAG,GAAKvI,GAGxC2N,EAAapF,GACNjS,EACT,EAECmB,EAAK2W,QAAU,SAAU7F,EAAG1O,GAC3B,IAAI2N,EACApQ,EAEJ,IAAKmR,IAAMA,EAAEqF,SAAWrF,EAAE/C,QACzB,OAAOhP,EACR,MAAMoX,EAASrF,EAAEqF,OAIjB,IAHA/T,EA1vDe,GA0vDXA,EAAgBpD,EAAcH,EAClCkR,EAAI/Q,IAGH,OAAQmX,EAAO1D,MACd,KAlFW,EAoFV,GAAmB,IAAf3B,EAAE5F,SACL,OAAO6E,EAKR,GAJAA,EAAI3N,EAEJ0O,EAAE5F,WACF4F,EAAE7E,WA3FY,IA4F0C,IAAlDkK,EAAOE,OAASvF,EAAEiD,UAAUjD,EAAElC,mBAAwC,CAC3EuH,EAAO1D,KAAOsD,GACdjF,EAAE3E,IAAM,6BACRgK,EAAOI,OAAS,EAChB,KACA,CACD,GAA2B,GAAtBJ,EAAOE,QAAU,GAASF,EAAOK,MAAO,CAC5CL,EAAO1D,KAAOsD,GACdjF,EAAE3E,IAAM,mBACRgK,EAAOI,OAAS,EAChB,KACA,CACDJ,EAAO1D,KArGC,EAuGT,KAvGS,EAyGR,GAAmB,IAAf3B,EAAE5F,SACL,OAAO6E,EAOR,GANAA,EAAI3N,EAEJ0O,EAAE5F,WACF4F,EAAE7E,WACFtM,EAAuC,IAAlCmR,EAAEiD,UAAUjD,EAAElC,mBAEZuH,EAAOE,QAAU,GAAK1W,GAAK,IAAQ,EAAG,CAC5CwW,EAAO1D,KAAOsD,GACdjF,EAAE3E,IAAM,yBACRgK,EAAOI,OAAS,EAChB,KACA,CAED,GAA0B,IA7HX,GA6HV5W,GAAwB,CAC5BwW,EAAO1D,KAnHE,EAoHT,KACA,CACD0D,EAAO1D,KA3HE,EA6HV,KA7HU,EA+HT,GAAmB,IAAf3B,EAAE5F,SACL,OAAO6E,EACRA,EAAI3N,EAEJ0O,EAAE5F,WACF4F,EAAE7E,WACFkK,EAAOxD,MAA0C,IAAjC7B,EAAEiD,UAAUjD,EAAElC,mBAA4B,GAAM,WAChEuH,EAAO1D,KArIE,EAuIV,KAvIU,EAyIT,GAAmB,IAAf3B,EAAE5F,SACL,OAAO6E,EACRA,EAAI3N,EAEJ0O,EAAE5F,WACF4F,EAAE7E,WACFkK,EAAOxD,OAA2C,IAAjC7B,EAAEiD,UAAUjD,EAAElC,mBAA4B,GAAM,SACjEuH,EAAO1D,KA/IE,EAiJV,KAjJU,EAmJT,GAAmB,IAAf3B,EAAE5F,SACL,OAAO6E,EACRA,EAAI3N,EAEJ0O,EAAE5F,WACF4F,EAAE7E,WACFkK,EAAOxD,OAA2C,IAAjC7B,EAAEiD,UAAUjD,EAAElC,mBAA4B,EAAK,MAChEuH,EAAO1D,KAzJE,EA2JV,KA3JU,EA6JT,OAAmB,IAAf3B,EAAE5F,SACE6E,GACRA,EAAI3N,EAEJ0O,EAAE5F,WACF4F,EAAE7E,WACFkK,EAAOxD,MAA0C,IAAjC7B,EAAEiD,UAAUjD,EAAElC,iBAC9BuH,EAAO1D,KAnKE,EAhsDM,GAq2DhB,KArKU,EAyKT,OAHA0D,EAAO1D,KAAOsD,GACdjF,EAAE3E,IAAM,kBACRgK,EAAOI,OAAS,EACTxX,EACR,KAzKW,EA4KV,GADAgR,EAAIoG,EAAOC,OAAOnC,KAAKnD,EAAGf,GACtBA,GAAKb,EAAc,CACtBiH,EAAO1D,KAAOsD,GACdI,EAAOI,OAAS,EAChB,KACA,CAID,GAHIxG,GAAKlR,IACRkR,EAAI3N,GAED2N,GAAKjR,EACR,OAAOiR,EAERA,EAAI3N,EACJ+T,EAAOC,OAAOZ,MAAM1E,EAAGqF,EAAOG,KAC9BH,EAAO1D,KAxLC,GA0LT,KA1LS,GA4LR,OADA3B,EAAE5F,SAAW,EACNpM,EACR,KAAKiX,GACJ,OAAO7G,EACR,QACC,OAAOnQ,EAGZ,EAECiB,EAAK4W,qBAAuB,SAAU9F,EAAGtD,EAAYC,GACpD,IAAInK,EAAQ,EAAGjE,EAASoO,EACxB,IAAKqD,IAAMA,EAAEqF,QAzMD,GAyMWrF,EAAEqF,OAAO1D,KAC/B,OAAO1T,EACR,MAAMoX,EAASrF,EAAEqF,OAOjB,OANI9W,GAAW,GAAK8W,EAAOK,QAC1BnX,GAAU,GAAK8W,EAAOK,OAAS,EAC/BlT,EAAQmK,EAAapO,GAEtB8W,EAAOC,OAAOP,eAAerI,EAAYlK,EAAOjE,GAChD8W,EAAO1D,KAhNM,EAiNN5T,CACT,EAECmB,EAAK6W,YAAc,SAAU/F,GAC5B,IAAIhQ,EACAqH,EACApH,EACAgP,EAAGxH,EAGP,IAAKuI,IAAMA,EAAEqF,OACZ,OAAOpX,EACR,MAAMoX,EAASrF,EAAEqF,OAKjB,GAJIA,EAAO1D,MAAQsD,KAClBI,EAAO1D,KAAOsD,GACdI,EAAOI,OAAS,GAEQ,KAApBzV,EAAIgQ,EAAE5F,UACV,OAAOlM,EAKR,IAJAmJ,EAAI2I,EAAElC,cACN7N,EAAIoV,EAAOI,OAGE,IAANzV,GAAWC,EAAI,GACjB+P,EAAEiD,UAAU5L,IAAM6N,GAAKjV,GAC1BA,IAEAA,EAD6B,IAAnB+P,EAAEiD,UAAU5L,GAClB,EAEA,EAAIpH,EAEToH,IACArH,IAUD,OANAgQ,EAAE7E,UAAY9D,EAAI2I,EAAElC,cACpBkC,EAAElC,cAAgBzG,EAClB2I,EAAE5F,SAAWpK,EACbqV,EAAOI,OAASxV,EAGP,GAALA,EACImO,GAERa,EAAIe,EAAE7E,SACN1D,EAAIuI,EAAE5E,UACNgK,EAAapF,GACbA,EAAE7E,SAAW8D,EACbe,EAAE5E,UAAY3D,EACd4N,EAAO1D,KAnQM,EAoQN5T,EACT,EASCmB,EAAK8W,iBAAmB,SAAUhG,GACjC,OAAKA,GAAMA,EAAEqF,QAAWrF,EAAEqF,OAAOC,OAE1BtF,EAAEqF,OAAOC,OAAON,aADf/W,CAEV,CACA,CAIA,SAAS4P,KACT,CAEAA,GAAQG,UAAY,CACnB4H,YAAYxU,GACX,MAAMlC,EAAOC,KAIb,OAHAD,EAAKmW,OAAS,IAAIF,GACb/T,IACJA,EAp+Dc,IAq+DRlC,EAAKmW,OAAOO,YAAY1W,EAAMkC,EACrC,EAEDyU,QAAQvU,GACP,MAAMpC,EAAOC,KACb,OAAKD,EAAKmW,OAEHnW,EAAKmW,OAAOQ,QAAQ3W,EAAMoC,GADzBrD,CAER,EAED0X,aACC,MAAMzW,EAAOC,KACb,IAAKD,EAAKmW,OACT,OAAOpX,EACR,MAAMgQ,EAAM/O,EAAKmW,OAAOM,WAAWzW,GAEnC,OADAA,EAAKmW,OAAS,KACPpH,CACP,EAED8H,cACC,MAAM7W,EAAOC,KACb,OAAKD,EAAKmW,OAEHnW,EAAKmW,OAAOU,YAAY7W,GADvBjB,CAER,EACD6X,qBAAqBpJ,EAAYC,GAChC,MAAMzN,EAAOC,KACb,OAAKD,EAAKmW,OAEHnW,EAAKmW,OAAOS,qBAAqB5W,EAAMwN,EAAYC,GADlD1O,CAER,EACDgV,UAAU/E,GAET,OADa/O,KACD8N,QAAQiB,EACpB,EACD7D,SAAS6D,EAAOC,GAEf,OADahP,KACD8N,QAAQ9D,SAAS+E,EAAOA,EAAQC,EAC5C,GCthEF,MAAM8H,GAAc,WACdC,GAAc,MAQdC,GAAgC,SAEhCC,GAAqC,UAUrCC,GAA4B,EAoB5BC,QAAkBC,EAClBC,GAAiB,YACjBC,GAAgB,WCrCtB,MAAMC,GAELC,YAAYC,GACX,OAAO,cAAcC,gBACpBF,YAAYG,EAASC,GACpB,MAAMC,EAAQ,IAAIJ,EAAMG,GACxBE,MAAM,CACLC,UAAUC,EAAOC,GAChBA,EAAWC,QAAQL,EAAMM,OAAOH,GAChC,EACDvK,MAAMwK,GACL,MAAMD,EAAQH,EAAMpK,QAChBuK,GACHC,EAAWC,QAAQF,EAEpB,GAEF,EAEF,EChBF,IAAII,GAAa,EACjB,WACYC,WAAahB,IAAkBgB,UAAUC,sBACnDF,GAAaC,UAAUC,oBAEzB,CAAE,MAAOC,GAET,CACA,MAAMC,GAAwB,CAC7BC,UAAW,OACXL,cACAM,uBAAwB,IACxBC,eAAe,EACfC,sBAAsB,EACtBC,cAAe1B,GACf2B,+BAAgCC,mBAAqB1B,IAAkB0B,kBACvEC,iCAAkCC,qBAAuB5B,IAAkB4B,qBAGtEC,GAASC,OAAOC,OAAO,CAAE,EAAEZ,IAgBjC,SAASa,GAAUC,GAClB,MAAMC,QACLA,EAAOd,UACPA,EAASL,WACTA,EAAUM,uBACVA,EAAsBE,qBACtBA,EAAoBD,cACpBA,EAAajU,QACbA,EAAOsR,QACPA,EAAO+C,kBACPA,EAAiBE,oBACjBA,EAAmBJ,cACnBA,GACGS,EAeJ,GAdAE,GAAa,UAAWD,GACxBC,GAAa,YAAaf,GAC1Be,GAAa,aAAcpB,GAC3BoB,GAAa,yBAA0Bd,GACvCc,GAAa,uBAAwBZ,GACrCY,GAAa,gBAAiBb,GAC1BjU,IACHwU,GAAOH,kBAAoB,IAAIxB,GAAc7S,IAE1CsR,IACHkD,GAAOD,oBAAsB,IAAI1B,GAAcvB,IAEhDwD,GAAa,oBAAqBT,GAClCS,GAAa,sBAAuBP,GAChCJ,IAAkB1B,GAAiB,CACtC,MAAM/J,QAAEA,EAAOsJ,QAAEA,GAAYmC,EAM7B,IALIzL,GAAWsJ,KACTwC,GAAOL,gBACXK,GAAOL,cAAgB,KAGrBzL,EAAS,CACZ,IAAK9N,MAAMM,QAAQwN,GAClB,MAAM,IAAIqM,MAAM,0CAEjBP,GAAOL,cAAczL,QAAUA,CAC/B,CACD,GAAIsJ,EAAS,CACZ,IAAKpX,MAAMM,QAAQ8W,GAClB,MAAM,IAAI+C,MAAM,0CAEjBP,GAAOL,cAAcnC,QAAUA,CAC/B,CACD,CACF,CAEA,SAAS8C,GAAaE,EAAcC,GAC/BA,IAAkBxC,KACrB+B,GAAOQ,GAAgBC,EAEzB,CC9FA,MAAMzE,GAAQ,CACb0E,YAAe,CACd,eAAgB,KAChBC,QAAW,MACX,WAAY,OACZ,cAAe,UACf,eAAgB,UAChBC,OAAU,MACVC,IAAO,CAAC,MAAO,QACf,WAAY,KACZ,eAAgB,WAChBC,QAAW,MACXC,WAAc,CAAC,KAAM,QACrBC,aAAgB,MAChBC,IAAO,MACP,eAAgB,MAChB,yBAA0B,MAC1B,UAAW,QACXC,WAAc,KACdC,IAAO,MACP,eAAgB,MAChBC,YAAe,CAAC,KAAM,KAAM,MAC5BC,SAAY,MACZC,OAAU,CAAC,MAAO,OAClBC,IAAO,MACPC,IAAO,MACPC,IAAO,MACPC,IAAO,MACP,WAAY,MACZ,gBAAiB,CAAC,MAAO,OACzB,aAAc,MACdC,WAAc,CAAC,KAAM,KAAM,MAAO,OAAQ,OAAQ,OAAQ,QAC1DC,IAAO,MACP,UAAW,MACX,UAAW,MACXC,IAAO,MACPC,KAAQ,CAAC,MAAO,QAChB,YAAa,CAAC,QAAS,OACvBC,IAAO,CAAC,MAAO,MAAO,OACtB,WAAY,OACZC,IAAO,MACP,8BAA+B,MAC/B,iBAAkB,MAClB,2BAA4B,MAC5B,uBAAwB,MACxB,sBAAuB,MACvB,eAAgB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC3D,oBAAqB,MACrB,iBAAkB,MAClB,oBAAqB,CAAC,MAAO,MAAO,OACpC,+BAAgC,MAChC,kCAAmC,MACnC,iCAAkC,MAClC,kCAAmC,MACnC,2CAA4C,MAC5C,+BAAgC,MAChC,sCAAuC,MACvC,+CAAgD,MAChD,qCAAsC,MACtC,8CAA+C,MAC/C,8BAA+B,MAC/B,qCAAsC,MACtC,uCAAwC,MACxC,kCAAmC,MACnC,wDAAyD,OACzD,2DAA4D,OAC5D,gEAAiE,OACjE,6DAA8D,OAC9D,4DAA6D,OAC7D,8DAA+D,OAC/D,8DAA+D,OAC/D,WAAY,MACZ,wBAAyB,MACzB,yBAA0B,MAC1B,wBAAyB,MACzB,2BAA4B,MAC5B,wBAAyB,CAAC,MAAO,OACjC,0BAA2B,CAAC,MAAO,OACnC,iCAAkC,MAClC,mBAAoB,MACpB,4BAA6B,MAC7B,mBAAoB,MACpB,4BAA6B,MAC7B,sBAAuB,MACvB,+BAAgC,MAChC,mBAAoB,MACpB,qBAAsB,MACtB,4BAA6B,MAC7B,8BAA+B,MAC/B,sBAAuB,CAAC,MAAO,QAC/B,YAAa,CAAC,MAAO,MAAO,MAAO,OACnC,gBAAiB,QACjB,eAAgB,OAChB,qBAAsB,QACtB,kBAAmB,MACnB,qBAAsB,MACtB,QAAS,KACT,kBAAmB,KACnB,YAAa,MACb,oBAAqB,MACrB,UAAW,QACX,eAAgB,UAChB,QAAS,CAAC,MAAO,MAAO,MAAO,OAC/B,QAAS,MACT,QAAS,CAAC,MAAO,OACjB,WAAY,MACZ,cAAe,MACf,SAAU,OACV,QAAS,MACT,mBAAoB,CAAC,MAAO,QAC5B,aAAc,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvE,QAAS,MACT,SAAU,MACV,QAAS,MACT,gBAAiB,QACjB,SAAU,QACV,aAAc,KACd,aAAc,WACd,WAAY,MACZ,wBAAyB,MACzB,SAAU,CAAC,OAAQ,OACnB,QAAS,MACT,cAAe,CAAC,QAAS,MAAO,OAChC,qBAAsB,OACtB,eAAgB,OAChB,4BAA6B,QAC7B,eAAgB,OAChB,eAAgB,OAChB,QAAS,MACT,SAAU,OACV,oBAAqB,CAAC,MAAO,OAC7B,WAAY,MACZ,kBAAmB,MACnB,mBAAoB,OACpB,SAAU,MACV,iBAAkB,MAClB,SAAU,CAAC,MAAO,MAAO,MAAO,OAChC,eAAgB,CAAC,MAAO,OACxB,UAAW,CAAC,MAAO,OACnB,UAAW,QACX,QAAS,MACT,QAAS,MACT,QAAS,MACT,QAAS,MACT,UAAW,CAAC,MAAO,QAAS,QAAS,KAAM,KAAM,OAAQ,SACzD,WAAY,MACZ,WAAY,MACZ,kBAAmB,CAAC,MAAO,MAAO,MAAO,OACzC,QAAS,MACT,WAAY,CAAC,KAAM,OACnB,wBAAyB,CAAC,MAAO,OACjC,QAAS,MACT,WAAY,IACZ,mBAAoB,MACpB,sBAAuB,MACvB,gBAAiB,CAAC,MAAO,OACzB,SAAU,CAAC,MAAO,MAAO,OACzB,oBAAqB,MACrB,2BAA4B,MAC5B,SAAU,KACV,OAAQ,KACR,SAAU,OACV,oBAAqB,CAAC,MAAO,QAC7B,gBAAiB,MACjB,YAAa,MACb,YAAa,UACb,WAAY,SACZ,QAAS,MACT,QAAS,MACT,WAAY,KACZ,WAAY,KACZ,YAAa,CAAC,UAAW,QACzB,UAAW,CAAC,IAAK,IAAK,MAAO,MAAO,OACpC,UAAW,CAAC,IAAK,KAAM,QACvB,cAAe,MACf,aAAc,KACd,aAAc,KACd,UAAW,QACX,gBAAiB,MACjB,UAAW,KACX,iBAAkB,CAAC,MAAO,MAAO,OACjC,QAAS,MACT,SAAU,MACV,cAAe,MACfC,WAAc,KACd,cAAe,UACf,YAAa,QACb,kBAAmB,QACnB,iBAAkB,QAClB,cAAe,QACf,cAAe,QACf,aAAc,QACd,cAAe,MACf,WAAY,OACZ,WAAY,QACZ,WAAY,OACZ,WAAY,OACZC,IAAO,MACP,aAAc,MACd,UAAW,MACX,UAAW,MACXC,IAAO,MACPC,YAAe,MACf,YAAa,CAAC,MAAO,SACrBC,MAAS,QACTC,KAAQ,OACR,cAAe,SACf,WAAY,UACZ,WAAY,OACZC,KAAQ,MACR,cAAe,OACf,aAAc,SACdC,KAAQ,OACR,yBAA0B,QAC1B,eAAgB,WAChB,gBAAiB,QACjB,WAAY,OACZ,WAAY,OACZC,KAAQ,CAAC,MAAO,QAChBC,IAAO,OACP,oBAAqB,MACrB,YAAa,QACbC,QAAW,CAAC,SAAU,UAAW,SAAU,UAC3CC,KAAQ,OACR,sBAAuB,MACvB,gBAAiB,MACjBC,OAAU,MACV,aAAc,CAAC,MAAO,OACtB,kBAAmB,MACnBC,MAAS,KACT,iBAAkB,KAClB,WAAY,MACZ,eAAgB,UAChBC,QAAW,MACX,UAAW,MACX,UAAW,MACX,WAAY,UACZ,cAAe,MACf,0BAA2B,MAC3B,qBAAsB,KACtB,0BAA2B,MAC3B,mBAAoB,KACpB,oBAAqB,MACrB,gBAAiB,MACjB,WAAY,MACZ,UAAW,MACX,WAAY,OACZ,kBAAmB,MACnB,mBAAoB,MACpB,kBAAmB,MACnB,mBAAoB,MACpBC,IAAO,MACP,yBAA0B,SAC1B,8BAA+B,SAC/B,UAAW,MACX,eAAgB,KAChB,qBAAsB,MACtBC,KAAQ,OACR,WAAY,QACZ,UAAW,MACX,WAAY,OACZ,WAAY,OACZ,UAAW,CAAC,MAAO,aACnB,aAAc,MACd,mBAAoB,MACpB,wBAAyB,MACzB,wBAAyB,MACzB,sBAAuB,MACvB,iBAAkB,OAClB,uBAAwB,MACxB,wBAAyB,MACzB,wBAAyB,MACzB,eAAgB,MAChB,cAAe,CAAC,MAAO,SACvB,kDAAmD,MACnD,8BAA+B,OAC/B,gBAAiB,CAAC,MAAO,QACzB,oBAAqB,MACrB,iBAAkB,OAClB,kBAAmB,QACnB,4BAA6B,MAC7B,4BAA6B,MAC7B,mBAAoB,MACpB,2BAA4B,MAC5B,gBAAiB,MACjB,6CAA8C,MAC9C,0CAA2C,MAC3C,2BAA4B,MAC5B,0BAA2B,OAC3B,oBAAqB,OACrB,yBAA0B,MAC1B,4BAA6B,OAC7B,iBAAkB,MAClB,wBAAyB,MACzB,UAAW,MACX,sBAAuB,MACvB,mBAAoB,QACpB,2BAA4B,MAC5B,eAAgB,MAChB,kBAAmB,MACnB,oBAAqB,CAAC,MAAO,MAAO,MAAO,MAAO,OAClD,mCAAoC,SACpC,uCAAwC,SACxC,kBAAmB,MACnB,mBAAoB,UACpB,kBAAmB,MACnB,oBAAqB,OACrB,6BAA8B,OAC9B,4BAA6B,OAC7B,6BAA8B,OAC9B,6BAA8B,OAC9B,4BAA6B,MAC7B,gBAAiB,MACjB,eAAgB,MAChB,eAAgB,MAChB,iBAAkB,QAClB,WAAY,OACZ,sBAAuB,MACvB,gBAAiB,CAAC,MAAO,OAAQ,MAAO,QACxC,oBAAqB,CAAC,MAAO,QAC7B,uBAAwB,CAAC,MAAO,QAChC,eAAgB,CAAC,MAAO,QACxB,6BAA8B,YAC9B,UAAW,MACX,gBAAiB,MACjB,cAAe,MACf,mBAAoB,OACpB,kBAAmB,OACnB,cAAe,MACf,kBAAmB,MACnB,cAAe,MACf,mBAAoB,MACpB,cAAe,MACf,gBAAiB,MACjB,gBAAiB,MACjB,uBAAwB,MACxB,iBAAkB,MAClB,gBAAiB,MACjB,mBAAoB,CAAC,MAAO,OAC5B,kBAAmB,MACnB,oBAAqB,MACrB,UAAW,MACX,iBAAkB,QAClB,gBAAiB,CAAC,OAAQ,YAC1B,iBAAkB,MAClB,oBAAqB,MACrB,iBAAkB,CAAC,KAAM,QAAS,QAAS,QAC3C,kBAAmB,MACnB,kBAAmB,MACnB,oBAAqB,MACrB,oBAAqB,MACrB,qBAAsB,MACtB,qBAAsB,MACtB,sBAAuB,MACvB,uBAAwB,MACxB,oBAAqB,MACrB,0BAA2B,MAC3B,iCAAkC,MAClC,iBAAkB,MAClB,uBAAwB,MACxB,oBAAqB,MACrB,oBAAqB,MACrB,wBAAyB,CAAC,MAAO,OACjC,cAAe,MACf,cAAe,MACf,eAAgB,MAChB,UAAW,MACX,aAAc,CAAC,MAAO,OACtB,qBAAsB,MACtB,kBAAmB,MACnB,8BAA+B,MAC/B,sBAAuB,MACvB,0BAA2B,MAC3B,2BAA4B,MAC5B,mBAAoB,MACpB,cAAe,MACf,iCAAkC,MAClC,WAAY,OACZ,wBAAyB,MACzB,cAAe,OACf,cAAe,OACf,aAAc,MACd,cAAe,MACf,aAAc,MACd,eAAgB,QAChB,2BAA4B,YAC5B,kBAAmB,MACnB,iBAAkB,CAAC,MAAO,UAAW,YACrC,4BAA6B,MAC7B,2BAA4B,KAC5B,iBAAkB,CAAC,MAAO,OAC1B,eAAgB,MAChB,sBAAuB,MACvB,sBAAuB,MACvB,iBAAkB,MAClB,uBAAwB,CAAC,MAAO,OAChC,eAAgB,MAChB,eAAgB,MAChB,eAAgB,MAChB,4BAA6B,YAC7B,8BAA+B,MAC/B,aAAc,MACd,eAAgB,MAChB,UAAW,MACX,4BAA6B,MAC7B,WAAY,OACZ,yBAA0B,OAC1B,cAAe,CAAC,MAAO,OACvB,iBAAkB,SAClB,iBAAkB,OAClB,mBAAoB,MACpB,gBAAiB,MACjB,kBAAmB,MACnB,qBAAsB,CAAC,MAAO,OAC9B,kBAAmB,MACnB,gBAAiB,CAAC,MAAO,OACzB,iBAAkB,OAClB,mBAAoB,MACpB,YAAa,CAAC,MAAO,OACrB,WAAY,CAAC,MAAO,MAAO,MAAO,OAClC,uBAAwB,MACxB,kBAAmB,SACnB,yCAA0C,MAC1C,8CAA+C,MAC/C,kBAAmB,MACnB,qBAAsB,MACtB,sBAAuB,MACvB,kBAAmB,MACnB,sBAAuB,MACvB,sBAAuB,MACvB,oBAAqB,MACrB,uBAAwB,UACxB,UAAW,MACX,kBAAmB,MACnB,yBAA0B,QAC1B,WAAY,MACZ,WAAY,MACZ,qBAAsB,MACtB,qBAAsB,MACtB,UAAW,MACX,iBAAkB,MAClB,iBAAkB,MAClB,iBAAkB,MAClB,iBAAkB,MAClB,iBAAkB,MAClB,iBAAkB,MAClB,iBAAkB,MAClB,yBAA0B,MAC1B,yBAA0B,MAC1B,kBAAmB,MACnB,wBAAyB,MACzB,qCAAsC,OACtC,4CAA6C,OAC7C,qCAAsC,OACtC,wCAAyC,OACzC,oBAAqB,MACrB,kBAAmB,MACnB,aAAc,MACd,aAAc,MACd,qBAAsB,OACtB,0CAA2C,OAC3C,iDAAkD,OAClD,0CAA2C,OAC3C,8CAA+C,OAC/C,6CAA8C,OAC9C,iBAAkB,CAAC,MAAO,OAC1B,uCAAwC,OACxC,uCAAwC,OACxC,eAAgB,CAAC,MAAO,MAAO,MAAO,OACtC,aAAc,MACd,qBAAsB,MACtB,WAAY,OACZ,eAAgB,MAChB,kBAAmB,OACnB,YAAa,SACb,wBAAyB,MACzB,WAAY,CAAC,MAAO,QACpB,yBAA0B,MAC1B,sBAAuB,MACvB,mBAAoB,MACpB,wBAAyB,QACzB,mCAAoC,SACpC,yBAA0B,OAC1B,0BAA2B,OAC3B,mBAAoB,MACpB,mBAAoB,MACpB,mBAAoB,MACpB,wCAAyC,MACzC,0CAA2C,OAC3C,wCAAyC,MACzC,iBAAkB,KAClB,kBAAmB,MACnB,8BAA+B,MAC/B,yDAA0D,OAC1D,6BAA8B,MAC9B,cAAe,KACf,qBAAsB,MACtB,WAAY,CAAC,MAAO,MAAO,QAC3B,gBAAiB,MACjB,gBAAiB,MACjB,gBAAiB,MACjB,aAAc,OACd,iBAAkB,KAClB,kBAAmB,MACnB,oBAAqB,MACrB,yBAA0B,MAC1B,uBAAwB,MACxB,4BAA6B,MAC7B,gBAAiB,OACjB,wBAAyB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAC7D,kBAAmB,MACnB,yBAA0B,MAC1B,6BAA8B,WAC9B,qBAAsB,aACtB,mBAAoB,KACpB,uBAAwB,OACxB,yBAA0B,SAC1B,2BAA4B,KAC5B,cAAe,MACf,WAAY,OACZ,WAAY,OACZ,WAAY,OACZ,8BAA+B,MAC/B,kCAAmC,MACnC,iCAAkC,MAClC,6BAA8B,MAC9B,yBAA0B,CAAC,MAAO,QAClC,oBAAqB,UACrB,sBAAuB,CAAC,OAAQ,QAChC,mBAAoB,MACpB,mBAAoB,MACpB,wBAAyB,QACzB,0BAA2B,KAC3B,mBAAoB,CAAC,MAAO,QAC5B,UAAW,MACX,iBAAkB,MAClB,sBAAuB,MACvB,oBAAqB,MACrB,gCAAiC,MACjC,mBAAoB,CAAC,OAAQ,MAAO,OACpC,qBAAsB,MACtB,eAAgB,MAChB,mBAAoB,MACpB,cAAe,MACf,WAAY,CAAC,MAAO,QACpB,gBAAiB,MACjB,aAAc,MACd,YAAa,WACb,eAAgB,OAChB,UAAW,MACX,gBAAiB,MACjB,UAAW,MACX,eAAgB,MAChB,qBAAsB,MACtB,UAAW,MACX,aAAc,MACd,WAAY,MACZ,WAAY,OACZ,oBAAqB,MACrB,uBAAwB,MACxB,sBAAuB,MACvB,6BAA8B,MAC9B,wCAAyC,SACzC,wBAAyB,MACzB,yBAA0B,MAC1B,8BAA+B,MAC/B,UAAW,CAAC,MAAO,QACnB,qBAAsB,MACtB,eAAgB,OAChBC,OAAU,MACVC,OAAU,MACV,WAAY,OACZ,eAAgB,WAChB,mBAAoB,MACpB,mBAAoB,CAAC,MAAO,MAAO,MAAO,OAC1C,mBAAoB,MACpB,mBAAoB,MACpB,UAAW,CAAC,MAAO,SACnB,SAAU,KACV,UAAW,CAAC,MAAO,OACnB,mBAAoB,MACpB,SAAU,OACV,eAAgB,MAChB,mBAAoB,MACpB,eAAgB,MAChB,eAAgB,MAChB,oBAAqB,MACrB,QAAS,MACT,aAAc,MACd,qBAAsB,MACtB,mBAAoB,MACpB,aAAc,MACd,aAAc,MACd,aAAc,MACd,aAAc,CAAC,MAAO,OACtB,eAAgB,CAAC,MAAO,MAAO,MAAO,OACtC,cAAe,OACf,YAAa,MACb,mBAAoB,MACpB,UAAW,MACX,eAAgB,SAChB,yBAA0B,UAC1B,mBAAoB,CAAC,MAAO,OAC5B,QAAS,MACT,qBAAsB,CAAC,MAAO,QAC9B,mBAAoB,cACpB,gBAAiB,MACjB,YAAa,OACb,aAAc,MACd,eAAgB,MAChB,WAAY,MACZ,eAAgB,CAAC,MAAO,MAAO,MAAO,MAAO,OAC7C,gBAAiB,CAAC,MAAO,MAAO,OAChC,eAAgB,CAAC,MAAO,MAAO,MAAO,OACtC,YAAa,MACb,gBAAiB,MACjB,eAAgB,MAChB,eAAgB,MAChB,YAAa,MACb,QAAS,MACT,WAAY,CAAC,MAAO,OACpB,uBAAwB,CAAC,MAAO,OAChC,0BAA2B,MAC3B,oBAAqB,MACrB,QAAS,MACT,aAAc,OACd,WAAY,MACZ,eAAgB,KAChB,SAAU,MACV,QAAS,MACT,YAAa,MACb,SAAU,MACV,cAAe,MACf,OAAQ,KACR,aAAc,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACzD,WAAY,OACZ,gBAAiB,MACjB,WAAY,OACZ,UAAW,MACX,UAAW,MACX,YAAa,MACb,WAAY,OACZ,SAAU,CAAC,OAAQ,QAAS,OAAQ,OACpCC,KAAQ,OACR,UAAW,MACXC,MAAS,MACTC,SAAY,MACZ,2BAA4B,MAC5BC,UAAa,MACb,iBAAkB,MAClB,sBAAuB,MACvB,aAAc,IACd,eAAgB,MAChB,SAAU,KACV,YAAa,CAAC,MAAO,MAAO,MAAO,MAAO,OAC1C,eAAgB,CAAC,MAAO,OACxB,gBAAiB,OAElBC,MAAS,CACRC,IAAO,MACP,SAAU,MACV9C,QAAW,MACX+C,MAAS,CAAC,KAAM,OAChBC,KAAQ,OACRC,KAAQ,CAAC,MAAO,OAAQ,MAAO,OAC/BC,KAAQ,CAAC,OAAQ,QAAS,MAAO,MAAO,MAAO,OAAQ,MAAO,OAC9DC,QAAW,MACXrC,IAAO,CAAC,MAAO,MAAO,OACtB,UAAW,MACX,SAAU,CAAC,MAAO,OAAQ,QAC1B,QAAS,MACT,WAAY,MACZ,WAAY,MACZ,iBAAkB,MAClB,cAAe,KACf,QAAS,MACT,QAAS,MACTsC,MAAS,MACTrB,IAAO,OACPsB,IAAO,MACPC,KAAQ,MACR,iBAAkB,CAAC,MAAO,QAC1B,oBAAqB,MACrB,UAAW,MACX,UAAW,MACX,aAAc,QACd,mBAAoB,MACpB,6BAA8B,MAC9B,sBAAuB,YACvB,sBAAuB,YACvB,sBAAuB,YACvB,UAAW,MACXC,KAAQ,OACR,QAAS,MACT,QAAS,MACT,aAAc,MACd,wBAAyB,MACzBC,GAAM,KACNC,IAAO,CAAC,MAAO,QAEhBC,SAAY,CACX,YAAa,MACb,UAAW,CAAC,MAAO,SACnB,cAAe,MACf,kBAAmB,CAAC,OAAQ,SAAU,QACtC,QAAS,MACT,WAAY,MACZ,QAAS,MACT,SAAU,OACV,QAAS,MACT,YAAa,MACb,cAAe,MACf,SAAU,CAAC,OAAQ,OACnB,QAAS,MACT,QAAS,CAAC,MAAO,OACjB,uBAAwB,CAAC,MAAO,QAChC,iBAAkB,CAAC,MAAO,MAAO,SACjC,wBAAyB,CAAC,MAAO,QACjC,kBAAmB,MACnB,mBAAoB,CAAC,MAAO,MAAO,OACnC,iBAAkB,MAClB,kBAAmB,MACnB,YAAa,MACb,QAAS,MACT,YAAa,CAAC,OAAQ,OACtB,aAAc,CAAC,MAAO,MACtB,aAAc,MACd,gBAAiB,MACjB,qBAAsB,CAAC,MAAO,QAC9B,gBAAiB,MACjB,eAAgB,KAChB,gBAAiB,MACjB,eAAgB,CAAC,KAAM,OACvB,YAAa,MACb,UAAW,OACX,SAAU,OACV,cAAe,IACf,gBAAiB,MACjB,gBAAiB,CAAC,MAAO,SAAU,MAAO,OAC1C,cAAe,MACf,cAAe,MACf,oBAAqB,CAAC,MAAO,OAC7B,qBAAsB,CAAC,MAAO,OAC9B,QAAS,CAAC,MAAO,OACjB,WAAY,MACZ,cAAe,KACf,mBAAoB,MACpB,QAAS,MACT,SAAU,OACV,QAAS,OAEVC,MAAS,CACRC,IAAO,MACPC,IAAO,MACPC,KAAQ,CAAC,OAAQ,MAAO,OACxBC,IAAO,MACPC,IAAO,MACP,UAAW,CAAC,MAAO,QACnBC,KAAQ,CAAC,OAAQ,OACjB,WAAY,CAAC,OAAQ,OACrB,eAAgB,OAChB,cAAe,MACf,cAAe,MACf,eAAgB,MAChB,cAAe,MACf,qBAAsB,MACtB,sBAAuB,MACvB,oBAAqB,MACrB,cAAe,MACf,SAAU,MACV,OAAQ,MACR,QAAS,MACT,cAAe,MACf,gBAAiB,MACjB,cAAe,MACf,oBAAqB,MACrB,oBAAqB,MACrB,qBAAsB,MACtB,oBAAqB,MACrB,QAAS,MACT,YAAa,MACb,YAAa,MACb,gBAAiB,MACjBC,IAAO,MACPC,IAAO,MACPC,MAAS,KACTC,IAAO,MACP,WAAY,OACZC,IAAO,MACP,mBAAoB,CAAC,MAAO,OAAQ,MAAO,QAC3C,UAAW,MACX,UAAW,MACX,mBAAoB,MACpB,UAAW,MACX,UAAW,MACX,2BAA4B,MAC5B,2BAA4B,MAC5B,cAAe,MACf,eAAgB,MAChB,cAAe,MACf,WAAY,MACZC,KAAQ,OACR,QAAS,MACT,QAAS,MACT,aAAc,CAAC,KAAM,MAAO,MAAO,MAAO,OAC1C,SAAU,CAAC,MAAO,OAClB,QAAS,MACT,UAAW,MACXC,MAAS,QAEVC,QAAW,CACVC,OAAU,CAAC,MAAO,OAAQ,MAAO,QAAS,QAE3CC,MAAS,CACRC,KAAQ,CAAC,MAAO,QAChBC,KAAQ,CAAC,MAAO,OAAQ,QACxBC,KAAQ,CAAC,MAAO,QAChB,WAAY,CAAC,OAAQ,SACrB,UAAW,CAAC,MAAO,QACnB,aAAc,CAAC,OAAQ,SACvB,kBAAmB,MACnB,UAAW,MACX,UAAW,MACX,UAAW,MACX,UAAW,MACX,UAAW,OAEZC,KAAQ,CACP,iBAAkB,CAAC,WAAY,YAC/BC,SAAY,CAAC,MAAO,MAAO,OAC3BC,IAAO,MACPC,IAAO,MACPC,KAAQ,MACRC,KAAQ,CAAC,OAAQ,MAAO,QAAS,OACjCC,KAAQ,MACRC,OAAU,MACVC,MAAS,CAAC,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,KAAM,OACpEC,SAAY,MACZC,UAAa,CAAC,MAAO,OACrBC,QAAW,CAAC,KAAM,MAClB,uBAAwB,MACxB,8BAA+B,MAC/B,cAAe,MACf,oBAAqB,OACrB,WAAY,MACZ,QAAS,MACT,WAAY,CAAC,MAAO,MAAO,MAAO,MAClC,WAAY,CAAC,MAAO,MAAO,MAAO,MAClC,cAAe,MACf,SAAU,IACV,SAAU,CAAC,OAAQ,SACnB,YAAa,KACb,SAAU,OACV,qBAAsB,MACtB,QAAS,MACT,WAAY,CAAC,IAAK,OAClB,YAAa,MACb,SAAU,CAAC,KAAM,MACjB,WAAY,KACZ,UAAW,QACX,WAAY,MACZ,QAAS,CAAC,MAAO,MACjB,QAAS,CAAC,MAAO,MAAO,MAAO,OAC/B,cAAe,MACf,UAAW,MACXC,GAAM,KACN,gBAAiB,MACjBC,KAAQ,CAAC,OAAQ,OACjBC,MAAS,CAAC,IAAK,KAAM,OAAQ,MAAO,KAAM,MAC1CC,OAAU,MACV,WAAY,CAAC,MAAO,OAAQ,QAC5BC,MAAS,QACT,WAAY,OACZ,iBAAkB,QAClB,iBAAkB,QAClB,iBAAkB,QAClB,mBAAoB,MACpB,UAAW,MACX,mBAAoB,MACpB,eAAgB,KAChB,gBAAiB,OACjB,gBAAiB,OACjB,QAAS,CAAC,IAAK,OACf,MAAO,CAAC,IAAK,KAAM,MAAO,MAAO,IAAK,KAAM,OAC5C,YAAa,CAAC,IAAK,MAAO,MAAO,OACjC,SAAU,OACV,QAAS,MACT,QAAS,MACT,aAAc,KACdC,YAAe,OAEhBC,MAAS,CACRC,KAAQ,QACR,OAAQ,MACRlG,QAAW,MACXmG,GAAM,KACNC,GAAM,CAAC,MAAO,MACdC,IAAO,MACPC,GAAM,KACNpD,KAAQ,CAAC,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAC3DnB,IAAO,CAAC,MAAO,OAAQ,QACvBwE,UAAa,CAAC,KAAM,OACpBzF,IAAO,MACP,cAAe,CAAC,MAAO,OACvB,QAAS,MACT,WAAY,CAAC,MAAO,OACpB,QAAS,MACT,WAAY,CAAC,MAAO,MAAO,OAC3B,UAAW,KACX,WAAY,MACZ,WAAY,MACZ,WAAY,MACZ,YAAa,MACb,cAAe,QACf,aAAc,CAAC,MAAO,MAAO,OAAQ,OACrC,QAAS,MACT0F,KAAQ,OACRC,KAAQ,OACRC,KAAQ,OACR5C,KAAQ,OACR6C,IAAO,CAAC,MAAO,QACfC,IAAO,CAAC,MAAO,QACf,cAAe,CAAC,MAAO,QACvB,kBAAmB,CAAC,MAAO,QAC3B,cAAe,CAAC,MAAO,QACvB,cAAe,CAAC,MAAO,QACvB,iBAAkB,CAAC,MAAO,QAC1B,eAAgB,MAChB,UAAW,MACX,6BAA8B,MAC9B,eAAgB,CAAC,MAAO,QACxB,WAAY,MACZrD,KAAQ,OACR,QAAS,MACT,QAAS,MACT,WAAY,MACZ,QAAS,OAEV,eAAgB,CACf,aAAc,OAEf,UAAW,CACV,SAAU,CAAC,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAO,SAItC,MACjB,MAAMsD,EAAY,CAAA,EAClB,IAAK,MAAMC,KAAQzL,GAElB,GAAIA,GAAM0L,eAAeD,GACxB,IAAK,MAAME,KAAW3L,GAAMyL,GAE3B,GAAIzL,GAAMyL,GAAMC,eAAeC,GAAU,CACxC,MAAMxhB,EAAQ6V,GAAMyL,GAAME,GAC1B,GAAoB,iBAATxhB,EACVqhB,EAAUrhB,GAASshB,EAAO,IAAME,OAEhC,IAAK,IAAIC,EAAgB,EAAGA,EAAgBzhB,EAAMD,OAAQ0hB,IACzDJ,EAAUrhB,EAAMyhB,IAAkBH,EAAO,IAAME,CAGjD,CAKJ,EArBiB,GCt7BlB,MAAM3L,GAAQ,GACd,IAAK,IAAI5N,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC7B,IAAI+I,EAAI/I,EACR,IAAK,IAAIkF,EAAI,EAAGA,EAAI,EAAGA,IACd,EAAJ6D,EACHA,EAAKA,IAAM,EAAK,WAEhBA,KAAU,EAGZ6E,GAAM5N,GAAK+I,CACZ,CAEA,MAAM0Q,GAELvJ,YAAYwJ,GACXhhB,KAAKghB,IAAMA,IAAQ,CACnB,CAED7I,OAAO8I,GACN,IAAID,EAAiB,EAAXhhB,KAAKghB,IACf,IAAK,IAAIE,EAAS,EAAG9hB,EAAuB,EAAd6hB,EAAK7hB,OAAY8hB,EAAS9hB,EAAQ8hB,IAC/DF,EAAOA,IAAQ,EAAK9L,GAA6B,KAAtB8L,EAAMC,EAAKC,KAEvClhB,KAAKghB,IAAMA,CACX,CAEDpO,MACC,OAAQ5S,KAAKghB,GACb,ECzBF,MAAMG,WAAoBzJ,gBAEzBF,cACC,MAAM4J,EAAQ,IAAIL,GAClBjJ,MAAM,CACLC,UAAUC,GACToJ,EAAMjJ,OAAOH,EACb,EACDvK,MAAMwK,GACL,MAAM5Y,EAAQ,IAAI0N,WAAW,GACZ,IAAIsU,SAAShiB,EAAMiiB,QAC3BC,UAAU,EAAGH,EAAMxO,OAC5BqF,EAAWC,QAAQ7Y,EACnB,GAEF,ECKF,MAAMmiB,GAAW,CAOhB7hB,OAAO8hB,EAAIC,GACV,GAAkB,IAAdD,EAAGriB,QAA8B,IAAdsiB,EAAGtiB,OACzB,OAAOqiB,EAAG9hB,OAAO+hB,GAGlB,MAAMtM,EAAOqM,EAAGA,EAAGriB,OAAS,GAAIuiB,EAAQH,GAASI,WAAWxM,GAC5D,OAAc,KAAVuM,EACIF,EAAG9hB,OAAO+hB,GAEVF,GAASK,YAAYH,EAAIC,EAAc,EAAPvM,EAAUqM,EAAGK,MAAM,EAAGL,EAAGriB,OAAS,GAE1E,EAOD2iB,UAAUtiB,GACT,MAAM+Q,EAAI/Q,EAAEL,OACZ,GAAU,IAANoR,EACH,OAAO,EAER,MAAMR,EAAIvQ,EAAE+Q,EAAI,GAChB,OAAiB,IAATA,EAAI,GAAUgR,GAASI,WAAW5R,EAC1C,EAQDgS,MAAMviB,EAAGU,GACR,GAAe,GAAXV,EAAEL,OAAce,EACnB,OAAOV,EAGR,MAAM+Q,GADN/Q,EAAIA,EAAEqiB,MAAM,EAAGvgB,KAAK0gB,KAAK9hB,EAAM,MACnBf,OAKZ,OAJAe,GAAY,GACRqQ,EAAI,GAAKrQ,IACZV,EAAE+Q,EAAI,GAAKgR,GAASU,QAAQ/hB,EAAKV,EAAE+Q,EAAI,GAAK,YAAerQ,EAAM,EAAI,IAE/DV,CACP,EASDyiB,QAAO,CAAC/hB,EAAK6P,EAAGmS,IACH,KAARhiB,EACI6P,GAEAmS,EAAW,EAAJnS,EAAQA,GAAM,GAAK7P,GAAc,cAANA,EAQ3CyhB,WAAW5R,GACHzO,KAAK6gB,MAAMpS,EAAI,gBAAkB,GAUzC6R,YAAYpiB,EAAGkiB,EAAOU,EAAOC,GAK5B,SAJYlL,IAARkL,IACHA,EAAM,IAGAX,GAAS,GAAIA,GAAS,GAC5BW,EAAIC,KAAKF,GACTA,EAAQ,EAET,GAAc,IAAVV,EACH,OAAOW,EAAI3iB,OAAOF,GAGnB,IAAK,IAAI6H,EAAI,EAAGA,EAAI7H,EAAEL,OAAQkI,IAC7Bgb,EAAIC,KAAKF,EAAQ5iB,EAAE6H,KAAOqa,GAC1BU,EAAQ5iB,EAAE6H,IAAO,GAAKqa,EAEvB,MAAMa,EAAQ/iB,EAAEL,OAASK,EAAEA,EAAEL,OAAS,GAAK,EACrCqjB,EAASjB,GAASI,WAAWY,GAEnC,OADAF,EAAIC,KAAKf,GAASU,QAAQP,EAAQc,EAAS,GAAKd,EAAQc,EAAS,GAAMJ,EAAQC,EAAII,MAAO,IACnFJ,CACP,GAcIzK,GAAQ,CACb8K,MAAO,CAENC,SAASC,GACR,MACMC,EADKtB,GAASO,UAAUc,GACN,EAClBP,EAAM,IAAIvV,WAAW+V,GAC3B,IAAIC,EACJ,IAAK,IAAIzb,EAAI,EAAGA,EAAIwb,EAAYxb,IACf,IAAP,EAAJA,KACJyb,EAAMF,EAAIvb,EAAI,IAEfgb,EAAIhb,GAAKyb,IAAQ,GACjBA,IAAQ,EAET,OAAOT,CACP,EAEDU,OAAOL,GACN,MAAML,EAAM,GACZ,IAAIhb,EACAyb,EAAM,EACV,IAAKzb,EAAI,EAAGA,EAAIqb,EAAMvjB,OAAQkI,IAC7Byb,EAAMA,GAAO,EAAIJ,EAAMrb,GACP,IAAP,EAAJA,KACJgb,EAAIC,KAAKQ,GACTA,EAAM,GAMR,OAHQ,EAAJzb,GACHgb,EAAIC,KAAKf,GAASU,QAAQ,GAAS,EAAJ5a,GAAQyb,IAEjCT,CACP,IAIGW,GAAO,CAMbA,KAAY,MACXzL,YAAYyL,GACX,MAAMC,EAAOljB,KAKbkjB,EAAKC,UAAY,IAKjBD,EAAKE,MAAQ,CAAC,WAAY,WAAY,WAAY,UAAY,YAK9DF,EAAKG,KAAO,CAAC,WAAY,WAAY,WAAY,YAC7CJ,GACHC,EAAKI,GAAKL,EAAKK,GAAGxB,MAAM,GACxBoB,EAAKK,QAAUN,EAAKM,QAAQzB,MAAM,GAClCoB,EAAKM,QAAUP,EAAKO,SAEpBN,EAAK3N,OAEN,CAMDA,QACC,MAAM2N,EAAOljB,KAIb,OAHAkjB,EAAKI,GAAKJ,EAAKE,MAAMtB,MAAM,GAC3BoB,EAAKK,QAAU,GACfL,EAAKM,QAAU,EACRN,CACP,CAODO,OAAOxC,GACN,MAAMiC,EAAOljB,KACO,iBAATihB,IACVA,EAAOpJ,GAAM6L,WAAWV,OAAO/B,IAEhC,MAAMvhB,EAAIwjB,EAAKK,QAAU/B,GAAS7hB,OAAOujB,EAAKK,QAAStC,GACjD0C,EAAKT,EAAKM,QACVlS,EAAK4R,EAAKM,QAAUG,EAAKnC,GAASO,UAAUd,GAClD,GAAI3P,EAAK,iBACR,MAAM,IAAImI,MAAM,uCAEjB,MAAM/Q,EAAI,IAAIkb,YAAYlkB,GAC1B,IAAI8M,EAAI,EACR,IAAK,IAAIlF,EAAI4b,EAAKC,UAAYQ,GAAOT,EAAKC,UAAYQ,EAAOT,EAAKC,UAAY,GAAK7b,GAAKgK,EACvFhK,GAAK4b,EAAKC,UACVD,EAAKW,OAAOnb,EAAEsB,SAAS,GAAKwC,EAAG,IAAMA,EAAI,KACzCA,GAAK,EAGN,OADA9M,EAAEokB,OAAO,EAAG,GAAKtX,GACV0W,CACP,CAMDa,WACC,MAAMb,EAAOljB,KACb,IAAIN,EAAIwjB,EAAKK,QACb,MAAMvhB,EAAIkhB,EAAKI,GAGf5jB,EAAI8hB,GAAS7hB,OAAOD,EAAG,CAAC8hB,GAASU,QAAQ,EAAG,KAE5C,IAAK,IAAI5a,EAAI5H,EAAEN,OAAS,EAAO,GAAJkI,EAAQA,IAClC5H,EAAE6iB,KAAK,GAOR,IAHA7iB,EAAE6iB,KAAKhhB,KAAKC,MAAM0hB,EAAKM,QAAU,aACjC9jB,EAAE6iB,KAAoB,EAAfW,EAAKM,SAEL9jB,EAAEN,QACR8jB,EAAKW,OAAOnkB,EAAEokB,OAAO,EAAG,KAIzB,OADAZ,EAAK3N,QACEvT,CACP,CAMDgiB,GAAG3T,EAAG3Q,EAAGgJ,EAAGyH,GACX,OAAIE,GAAK,GACA3Q,EAAIgJ,GAAOhJ,EAAIyQ,EACbE,GAAK,GACR3Q,EAAIgJ,EAAIyH,EACLE,GAAK,GACP3Q,EAAIgJ,EAAMhJ,EAAIyQ,EAAMzH,EAAIyH,EACtBE,GAAK,GACR3Q,EAAIgJ,EAAIyH,OADT,CAGP,CAMD8T,GAAGpjB,EAAGmP,GACL,OAAQA,GAAKnP,EAAMmP,IAAM,GAAKnP,CAC9B,CAODgjB,OAAOK,GACN,MAAMhB,EAAOljB,KACPgC,EAAIkhB,EAAKI,GAMThb,EAAIhJ,MAAM,IAChB,IAAK,IAAIkN,EAAI,EAAGA,EAAI,GAAIA,IACvBlE,EAAEkE,GAAK0X,EAAM1X,GAGd,IAAI/M,EAAIuC,EAAE,GACNtC,EAAIsC,EAAE,GACN0G,EAAI1G,EAAE,GACNmO,EAAInO,EAAE,GACNoO,EAAIpO,EAAE,GAEV,IAAK,IAAIqO,EAAI,EAAGA,GAAK,GAAIA,IAAK,CACzBA,GAAK,KACR/H,EAAE+H,GAAK6S,EAAKe,GAAG,EAAG3b,EAAE+H,EAAI,GAAK/H,EAAE+H,EAAI,GAAK/H,EAAE+H,EAAI,IAAM/H,EAAE+H,EAAI,MAE3D,MAAM0S,EAAOG,EAAKe,GAAG,EAAGxkB,GAAKyjB,EAAKc,GAAG3T,EAAG3Q,EAAGgJ,EAAGyH,GAAKC,EAAI9H,EAAE+H,GACxD6S,EAAKG,KAAK9hB,KAAKC,MAAM6O,EAAI,KAAQ,EAClCD,EAAID,EACJA,EAAIzH,EACJA,EAAIwa,EAAKe,GAAG,GAAIvkB,GAChBA,EAAID,EACJA,EAAIsjB,CACJ,CAED/gB,EAAE,GAAMA,EAAE,GAAKvC,EAAK,EACpBuC,EAAE,GAAMA,EAAE,GAAKtC,EAAK,EACpBsC,EAAE,GAAMA,EAAE,GAAK0G,EAAK,EACpB1G,EAAE,GAAMA,EAAE,GAAKmO,EAAK,EACpBnO,EAAE,GAAMA,EAAE,GAAKoO,EAAK,CACpB,IAoBI+T,GAAS,CASfA,IAAa,MACZ3M,YAAY4M,GAaX,MAAMC,EAAMrkB,KACZqkB,EAAIC,QAAU,CAAC,CAAC,GAAI,GAAI,GAAI,GAAI,IAAK,CAAC,GAAI,GAAI,GAAI,GAAI,KAEjDD,EAAIC,QAAQ,GAAG,GAAG,IACtBD,EAAIE,cAGL,MAAMC,EAAOH,EAAIC,QAAQ,GAAG,GACtBG,EAAWJ,EAAIC,QAAQ,GACvBI,EAASN,EAAIhlB,OAEnB,IAAIkI,EAAGqd,EAAQC,EAAQC,EAAO,EAE9B,GAAe,IAAXH,GAA2B,IAAXA,GAA2B,IAAXA,EACnC,MAAM,IAAIjL,MAAM,wBAMjB,IAHA4K,EAAIhB,KAAO,CAACsB,EAASP,EAAItC,MAAM,GAAI8C,EAAS,IAGvCtd,EAAIod,EAAQpd,EAAI,EAAIod,EAAS,GAAIpd,IAAK,CAC1C,IAAIyb,EAAM4B,EAAOrd,EAAI,IAGjBA,EAAIod,GAAW,GAAiB,IAAXA,GAAgBpd,EAAIod,GAAW,KACvD3B,EAAMyB,EAAKzB,IAAQ,KAAO,GAAKyB,EAAKzB,GAAO,GAAK,MAAQ,GAAKyB,EAAKzB,GAAO,EAAI,MAAQ,EAAIyB,EAAW,IAANzB,GAG1Fzb,EAAIod,GAAW,IAClB3B,EAAMA,GAAO,EAAIA,IAAQ,GAAK8B,GAAQ,GACtCA,EAAOA,GAAQ,EAAkB,KAAbA,GAAQ,KAI9BF,EAAOrd,GAAKqd,EAAOrd,EAAIod,GAAU3B,CACjC,CAGD,IAAK,IAAIvW,EAAI,EAAGlF,EAAGkF,IAAKlF,IAAK,CAC5B,MAAMyb,EAAM4B,EAAW,EAAJnY,EAAQlF,EAAIA,EAAI,GAElCsd,EAAOpY,GADJlF,GAAK,GAAKkF,EAAI,EACLuW,EAEA0B,EAAS,GAAGD,EAAKzB,IAAQ,KACpC0B,EAAS,GAAGD,EAAKzB,GAAO,GAAK,MAC7B0B,EAAS,GAAGD,EAAKzB,GAAO,EAAI,MAC5B0B,EAAS,GAAGD,EAAW,IAANzB,GAEnB,CACD,CAaD+B,QAAQ7D,GACP,OAAOjhB,KAAK+kB,OAAO9D,EAAM,EACzB,CAOD+D,QAAQ/D,GACP,OAAOjhB,KAAK+kB,OAAO9D,EAAM,EACzB,CAODsD,cACC,MAAMU,EAAWjlB,KAAKskB,QAAQ,GACxBG,EAAWzkB,KAAKskB,QAAQ,GACxBE,EAAOS,EAAS,GAChBC,EAAUT,EAAS,GACnBtU,EAAI,GACJgV,EAAK,GACX,IAAIC,EAAMC,EAAIC,EAAIC,EAGlB,IAAK,IAAIje,EAAI,EAAGA,EAAI,IAAKA,IACxB6d,GAAIhV,EAAE7I,GAAKA,GAAK,EAAe,KAAVA,GAAK,IAAYA,GAAKA,EAG5C,IAAK,IAAI0I,EAAIoV,EAAO,GAAIZ,EAAKxU,GAAIA,GAAKqV,GAAM,EAAGD,EAAOD,EAAGC,IAAS,EAAG,CAEpE,IAAI9kB,EAAI8kB,EAAOA,GAAQ,EAAIA,GAAQ,EAAIA,GAAQ,EAAIA,GAAQ,EAC3D9kB,EAAIA,GAAK,EAAQ,IAAJA,EAAU,GACvBkkB,EAAKxU,GAAK1P,EACV4kB,EAAQ5kB,GAAK0P,EAGbuV,EAAKpV,EAAEmV,EAAKnV,EAAEkV,EAAKlV,EAAEH,KACrB,IAAIwV,EAAY,SAALD,EAAsB,MAALD,EAAoB,IAALD,EAAiB,SAAJrV,EACpDyV,EAAc,IAAPtV,EAAE7P,GAAiB,SAAJA,EAE1B,IAAK,IAAIgH,EAAI,EAAGA,EAAI,EAAGA,IACtB2d,EAAS3d,GAAG0I,GAAKyV,EAAOA,GAAQ,GAAKA,IAAS,EAC9ChB,EAASnd,GAAGhH,GAAKklB,EAAOA,GAAQ,GAAKA,IAAS,CAE/C,CAGD,IAAK,IAAIle,EAAI,EAAGA,EAAI,EAAGA,IACtB2d,EAAS3d,GAAK2d,EAAS3d,GAAGwa,MAAM,GAChC2C,EAASnd,GAAKmd,EAASnd,GAAGwa,MAAM,EAEjC,CASDiD,OAAOW,EAAOC,GACb,GAAqB,IAAjBD,EAAMtmB,OACT,MAAM,IAAIqa,MAAM,0BAGjB,MAAM2K,EAAMpkB,KAAKqjB,KAAKsC,GAEhBC,EAAexB,EAAIhlB,OAAS,EAAI,EAChCkjB,EAAM,CAAC,EAAG,EAAG,EAAG,GAChBpN,EAAQlV,KAAKskB,QAAQqB,GAGrBE,EAAK3Q,EAAM,GACX4Q,EAAK5Q,EAAM,GACX6Q,EAAK7Q,EAAM,GACX8Q,EAAK9Q,EAAM,GACXsP,EAAOtP,EAAM,GAGnB,IAKIwM,EAAIuE,EAAItd,EALRlJ,EAAIimB,EAAM,GAAKtB,EAAI,GACnB1kB,EAAIgmB,EAAMC,EAAM,EAAI,GAAKvB,EAAI,GAC7B1b,EAAIgd,EAAM,GAAKtB,EAAI,GACnBjU,EAAIuV,EAAMC,EAAM,EAAI,GAAKvB,EAAI,GAC7B8B,EAAS,EAIb,IAAK,IAAI5e,EAAI,EAAGA,EAAIse,EAActe,IACjCoa,EAAKmE,EAAGpmB,IAAM,IAAMqmB,EAAGpmB,GAAK,GAAK,KAAOqmB,EAAGrd,GAAK,EAAI,KAAOsd,EAAO,IAAJ7V,GAAWiU,EAAI8B,GAC7ED,EAAKJ,EAAGnmB,IAAM,IAAMomB,EAAGpd,GAAK,GAAK,KAAOqd,EAAG5V,GAAK,EAAI,KAAO6V,EAAO,IAAJvmB,GAAW2kB,EAAI8B,EAAS,GACtFvd,EAAKkd,EAAGnd,IAAM,IAAMod,EAAG3V,GAAK,GAAK,KAAO4V,EAAGtmB,GAAK,EAAI,KAAOumB,EAAO,IAAJtmB,GAAW0kB,EAAI8B,EAAS,GACtF/V,EAAI0V,EAAG1V,IAAM,IAAM2V,EAAGrmB,GAAK,GAAK,KAAOsmB,EAAGrmB,GAAK,EAAI,KAAOsmB,EAAO,IAAJtd,GAAW0b,EAAI8B,EAAS,GACrFA,GAAU,EACVzmB,EAAIiiB,EAAIhiB,EAAIumB,EAAIvd,EAAIC,EAIrB,IAAK,IAAIrB,EAAI,EAAGA,EAAI,EAAGA,IACtBgb,EAAIqD,EAAM,GAAKre,EAAIA,GAClBkd,EAAK/kB,IAAM,KAAO,GAClB+kB,EAAK9kB,GAAK,GAAK,MAAQ,GACvB8kB,EAAK9b,GAAK,EAAI,MAAQ,EACtB8b,EAAS,IAAJrU,GACLiU,EAAI8B,KACLxE,EAAKjiB,EAAGA,EAAIC,EAAGA,EAAIgJ,EAAGA,EAAIyH,EAAGA,EAAIuR,EAGlC,OAAOY,CACP,IAOI6D,GAAS,CAMdC,gBAAgBC,GACf,MAAMnC,EAAQ,IAAIN,YAAYyC,EAAW/E,QACnCxR,EAAKwW,IACV,IAAIC,EAAM,UACV,MAAM9V,EAAO,WACb,OAAO,WACN8V,EAAO,OAAgB,MAANA,IAAiBA,GAAO,IAAS9V,EAGlD,SADmB8V,GAAO,KAD1BD,EAAO,MAAgB,MAANA,IAAiBA,GAAO,IAAS7V,GACTA,GAAQ,WAAe,KAC/ClP,KAAK4kB,SAAW,GAAK,GAAK,EAC/C,CAAI,EAEF,IAAK,IAAWK,EAAPlf,EAAI,EAAWA,EAAI+e,EAAWjnB,OAAQkI,GAAK,EAAG,CACtD,MAAMmf,EAAK3W,EAA8B,YAA3B0W,GAAUjlB,KAAK4kB,WAC7BK,EAAgB,UAAPC,IACTvC,EAAM5c,EAAI,GAAa,WAAPmf,IAAsB,CACtC,CACD,OAAOJ,CACP,GAmBI7T,GAAO,CAMbA,WAAkB,MACjBgF,YAAYkP,EAAKC,GAChB3mB,KAAK4mB,KAAOF,EACZ1mB,KAAK6mB,QAAUF,EACf3mB,KAAK8mB,IAAMH,CACX,CAEDpR,QACCvV,KAAK8mB,IAAM9mB,KAAK6mB,OAChB,CAKDpD,OAAOxC,GACN,OAAOjhB,KAAK+mB,UAAU/mB,KAAK4mB,KAAM3F,EAAMjhB,KAAK8mB,IAC5C,CAEDE,QAAQC,GACP,GAA8B,MAAxBA,GAAQ,GAAM,KAAgB,CACnC,IAAIC,EAAMD,GAAQ,GAAM,IACpBhB,EAAMgB,GAAQ,EAAK,IACnBE,EAAY,IAAPF,EAEE,MAAPC,GACHA,EAAK,EACM,MAAPjB,GACHA,EAAK,EACM,MAAPkB,EACHA,EAAK,IAEHA,KAGDlB,KAGDiB,EAGHD,EAAO,EACPA,GAASC,GAAM,GACfD,GAAShB,GAAM,EACfgB,GAAQE,CACX,MACGF,GAAS,GAAQ,GAElB,OAAOA,CACP,CAEDG,WAAWC,GACsC,KAA3CA,EAAQ,GAAKrnB,KAAKgnB,QAAQK,EAAQ,OAEtCA,EAAQ,GAAKrnB,KAAKgnB,QAAQK,EAAQ,IAEnC,CAEDN,UAAUL,EAAKzF,EAAM0F,GACpB,IAAInW,EACJ,KAAMA,EAAIyQ,EAAK7hB,QACd,MAAO,GAER,MAAMoS,EAAKgQ,GAASO,UAAUd,GAC9B,IAAK,IAAI3Z,EAAI,EAAGA,EAAIkJ,EAAGlJ,GAAK,EAAG,CAC9BtH,KAAKonB,WAAWT,GAChB,MAAMvW,EAAIsW,EAAI5B,QAAQ6B,GACtB1F,EAAK3Z,IAAM8I,EAAE,GACb6Q,EAAK3Z,EAAI,IAAM8I,EAAE,GACjB6Q,EAAK3Z,EAAI,IAAM8I,EAAE,GACjB6Q,EAAK3Z,EAAI,IAAM8I,EAAE,EACjB,CACD,OAAOoR,GAASQ,MAAMf,EAAMzP,EAC5B,IAGI8V,GAAO,CACZC,UAAUC,GACF,IAAIF,GAAKG,SAAS5P,GAAM8K,MAAMK,OAAOwE,IAE7CE,OAAOhB,EAAKiB,EAAMhgB,EAAOvI,GAExB,GADAuI,EAAQA,GAAS,IACbvI,EAAS,GAAKuI,EAAQ,EACzB,MAAM,IAAI8R,MAAM,4BAEjB,MAAMqJ,EAA8B,GAAf1jB,GAAU,IAAW,EAC1C,IAAI2Q,EAAG6X,EAAItgB,EAAGkF,EAAGF,EACjB,MAAMub,EAAc,IAAIC,YAAYhF,GAC9BR,EAAM,IAAIjB,SAASwG,GACzB,IAAIE,EAAY,EAChB,MAAMroB,EAAI8hB,GAEV,IADAmG,EAAO9P,GAAM8K,MAAMK,OAAO2E,GACrBrb,EAAI,EAAGyb,GAAajF,GAAc,GAAIxW,IAAK,CAE/C,IADAyD,EAAI6X,EAAKlB,EAAI5B,QAAQplB,EAAEC,OAAOgoB,EAAM,CAACrb,KAChChF,EAAI,EAAGA,EAAIK,EAAOL,IAEtB,IADAsgB,EAAKlB,EAAI5B,QAAQ8C,GACZpb,EAAI,EAAGA,EAAIob,EAAGxoB,OAAQoN,IAC1BuD,EAAEvD,IAAMob,EAAGpb,GAGb,IAAKlF,EAAI,EAAGygB,GAAajF,GAAc,IAAMxb,EAAIyI,EAAE3Q,OAAQkI,IAC1Dgb,EAAI0F,SAASD,EAAWhY,EAAEzI,IAC1BygB,GAAa,CAEd,CACD,OAAOF,EAAY/F,MAAM,EAAG1iB,EAAS,EACrC,EAeFkoB,SAAgB,MAEf9P,YAAY4M,GACX,MAAM6D,EAAOjoB,KACPkoB,EAAOD,EAAKE,MAAQlF,GAAKC,KACzBkF,EAAQ,CAAC,GAAI,IACnBH,EAAKI,UAAY,CAAC,IAAIH,EAAQ,IAAIA,GAClC,MAAMI,EAAKL,EAAKI,UAAU,GAAGlF,UAAY,GAErCiB,EAAIhlB,OAASkpB,IAChBlE,GAAM,IAAI8D,GAAOzE,OAAOW,GAAKL,YAG9B,IAAK,IAAIzc,EAAI,EAAGA,EAAIghB,EAAIhhB,IACvB8gB,EAAM,GAAG9gB,GAAc,UAAT8c,EAAI9c,GAClB8gB,EAAM,GAAG9gB,GAAc,WAAT8c,EAAI9c,GAGnB2gB,EAAKI,UAAU,GAAG5E,OAAO2E,EAAM,IAC/BH,EAAKI,UAAU,GAAG5E,OAAO2E,EAAM,IAC/BH,EAAKM,YAAc,IAAIL,EAAKD,EAAKI,UAAU,GAC3C,CACD9S,QACC,MAAM0S,EAAOjoB,KACbioB,EAAKM,YAAc,IAAIN,EAAKE,MAAMF,EAAKI,UAAU,IACjDJ,EAAKO,UAAW,CAChB,CAED/E,OAAOxC,GACOjhB,KACRwoB,UAAW,EADHxoB,KAERuoB,YAAY9E,OAAOxC,EACxB,CAEDwH,SACC,MAAMR,EAAOjoB,KACPsI,EAAI2f,EAAKM,YAAYxE,WACrB3S,EAAS,IAAK6W,EAAU,MAAEA,EAAKI,UAAU,IAAI5E,OAAOnb,GAAGyb,WAI7D,OAFAkE,EAAK1S,QAEEnE,CACP,CAED0T,QAAQ7D,GACP,GAAKjhB,KAAKwoB,SAIT,MAAM,IAAI/O,MAAM,2CAFhB,OADAzZ,KAAKyjB,OAAOxC,GACLjhB,KAAKyoB,OAAOxH,EAIpB,IC/wBIyH,GAA+C,oBAAVC,QAA0D,mBAA1BA,OAAOvC,gBAE5EwC,GAAuB,mBACvBC,GAAwB,oBACxBC,GAA2B,6BASjC,SAAS1C,GAAgBnnB,GACxB,OAAIypB,GACIC,OAAOvC,gBAAgBnnB,GAEvBknB,GAAOC,gBAAgBnnB,EAEhC,CCRA,MAAM8pB,GAAe,GACfC,GAAa,MACbC,GAAmB,CAAEC,KAAM,UAG3BC,GAAqBhQ,OAAOC,OAAO,CAAE6J,KAFpB,CAAEiG,KAAM,SAEoCD,IAC7DG,GAAyBjQ,OAAOC,OAAO,CAAEiQ,WAAY,IAAMpG,KAAM,CAAEiG,KAFnD,UAE4ED,IAC5FK,GAAqB,CAAC,cACtBC,GAAc,CAAC,EAAG,GAAI,IACtBC,GAAa,CAAC,GAAI,GAAI,IACtBC,GAAmB,GACnBC,GAAwB,CAAC,EAAG,EAAG,EAAG,GAClCrS,GAAiB,YACjBC,GAAgB,WAEhBqS,UAA8BhB,QAAUtR,GACxCuS,GAASD,IAAwBhB,OAAOiB,OACxCC,GAAuBF,WAA+BC,IAAUvS,GAChEyS,GAAajS,GAAM8K,MACnBoH,GAAM5F,GAAOE,IACb2F,GAAaxX,GAAKyX,WAClBC,GAAW5C,GAAKG,SAEtB,IAAI0C,GAAuBR,IAAwBE,WAA+BD,GAAOrC,WAAajQ,GAClG8S,GAAwBT,IAAwBE,WAA+BD,GAAOS,YAAc/S,GAExG,MAAMgT,WAA4B5S,gBAEjCF,aAAYgQ,SAAEA,EAAQ+C,OAAEA,EAAMC,mBAAEA,EAAkBC,kBAAEA,IACnD3S,MAAM,CACL/I,QACCoK,OAAOC,OAAOpZ,KAAM,CACnB0qB,MAAO,IAAIC,SAAQC,GAAW5qB,KAAK6qB,aAAeD,IAClDpD,WACA+C,SACAO,SAAUN,EAAqB,EAC/BpiB,QAAS,IAAI2E,YAEd,EACDge,gBAAgB/S,EAAOC,GACtB,MAAM+S,EAAYhrB,MACZwnB,SACLA,EAAQsD,SACRA,EAAQD,aACRA,EAAYH,MACZA,GACGM,EACAxD,SAsIRuD,eAAoC/F,EAAS8F,EAAUtD,EAAUyD,GAChE,MAAMC,QAAgCC,GAAWnG,EAAS8F,EAAUtD,EAAUxd,GAASihB,EAAU,EAAG1B,GAAYuB,KAC1GM,EAAuBphB,GAASihB,EAAU1B,GAAYuB,IAC5D,GAAII,EAAwB,IAAME,EAAqB,IAAMF,EAAwB,IAAME,EAAqB,GAC/G,MAAM,IAAI3R,MAAMmP,GAElB,CA3IWyC,CAAqBL,EAAWF,EAAUtD,EAAUxd,GAASgO,EAAO,EAAGuR,GAAYuB,GAAY,IACrG9S,EAAQhO,GAASgO,EAAOuR,GAAYuB,GAAY,GAC5CL,EACHxS,EAAWqT,MAAM,IAAI7R,MAAMqP,KAE3B+B,WAGKH,EAEP,MAAMa,EAAS,IAAIxe,WAAWiL,EAAM5Y,OAASqqB,IAAqBzR,EAAM5Y,OAASqqB,IAAoBV,IACrG9Q,EAAWC,QAAQC,GAAO6S,EAAWhT,EAAOuT,EAAQ,EAAG9B,IAAkB,GACzE,EACDsB,YAAY9S,GACX,MAAMsS,OACLA,EAAMiB,IACNA,EAAGvD,KACHA,EAAI7f,QACJA,EAAOsiB,MACPA,GACG1qB,WACE0qB,EACN,MAAMe,EAAiBzhB,GAAS5B,EAAS,EAAGA,EAAQhJ,OAASqqB,IACvDiC,EAAoB1hB,GAAS5B,EAASA,EAAQhJ,OAASqqB,IAC7D,IAAIkC,EAAsB,IAAI5e,WAC9B,GAAI0e,EAAersB,OAAQ,CAC1B,MAAMwsB,EAAiB5I,GAAO8G,GAAY2B,GAC1CxD,EAAKxE,OAAOmI,GACZ,MAAMC,EAAiBL,EAAI/H,OAAOmI,GAClCD,EAAsB/I,GAASkH,GAAY+B,EAC3C,CACD,GAAItB,EAAQ,CACX,MAAMuB,EAAY9hB,GAAS4Y,GAASkH,GAAY7B,EAAKQ,UAAW,EAAGgB,IACnE,IAAK,IAAIsC,EAAiB,EAAGA,EAAiBtC,GAAkBsC,IAC/D,GAAID,EAAUC,IAAmBL,EAAkBK,GAClD,MAAM,IAAItS,MAAMoP,GAGlB,CACD5Q,EAAWC,QAAQyT,EACnB,GAEF,EAGF,MAAMK,WAA4BtU,gBAEjCF,aAAYgQ,SAAEA,EAAQgD,mBAAEA,IAEvB,IAAIyB,EACJnU,MAAM,CACL/I,QACCoK,OAAOC,OAAOpZ,KAAM,CACnB0qB,MAAO,IAAIC,SAAQC,GAAW5qB,KAAK6qB,aAAeD,IAClDpD,WACAsD,SAAUN,EAAqB,EAC/BpiB,QAAS,IAAI2E,YAEd,EACDge,gBAAgB/S,EAAOC,GACtB,MAAM+S,EAAYhrB,MACZwnB,SACLA,EAAQsD,SACRA,EAAQD,aACRA,EAAYH,MACZA,GACGM,EACJ,IAAIC,EAAW,IAAIle,WACfya,GACHyD,QAwELF,eAAoCjG,EAASgG,EAAUtD,GACtD,MAAMG,EAAOvB,GAAgB,IAAIrZ,WAAWwc,GAAYuB,KAClDM,QAA6BD,GAAWrG,EAASgG,EAAUtD,EAAUG,GAC3E,OAAOhoB,GAAOgoB,EAAMyD,EACrB,CA5EsBc,CAAqBlB,EAAWF,EAAUtD,GAC3DqD,WAEMH,EAEP,MAAMa,EAAS,IAAIxe,WAAWke,EAAS7rB,OAAS4Y,EAAM5Y,OAAU4Y,EAAM5Y,OAAS2pB,IAC/EwC,EAAOxhB,IAAIkhB,EAAU,GACrBhT,EAAWC,QAAQC,GAAO6S,EAAWhT,EAAOuT,EAAQN,EAAS7rB,OAAQ,GACrE,EACD2rB,YAAY9S,GACX,MAAMuT,IACLA,EAAGvD,KACHA,EAAI7f,QACJA,EAAOsiB,MACPA,GACG1qB,WACE0qB,EACN,IAAIyB,EAAsB,IAAIpf,WAC9B,GAAI3E,EAAQhJ,OAAQ,CACnB,MAAMwsB,EAAiBJ,EAAI/H,OAAOT,GAAO8G,GAAY1hB,IACrD6f,EAAKxE,OAAOmI,GACZO,EAAsBvJ,GAASkH,GAAY8B,EAC3C,CACDK,EAAOH,UAAYlJ,GAASkH,GAAY7B,EAAKQ,UAAU3G,MAAM,EAAG2H,IAChExR,EAAWC,QAAQvY,GAAOwsB,EAAqBF,EAAOH,WACtD,IAEFG,EAASjsB,IACT,EASF,SAASmY,GAAO6S,EAAWtF,EAAO6F,EAAQa,EAAcC,EAAYC,GACnE,MAAMd,IACLA,EAAGvD,KACHA,EAAI7f,QACJA,GACG4iB,EACEuB,EAAc7G,EAAMtmB,OAASitB,EAKnC,IAAInL,EACJ,IALI9Y,EAAQhJ,SACXsmB,EAAQ/lB,GAAOyI,EAASsd,GACxB6F,EAyFF,SAAgBiB,EAAYptB,GAC3B,GAAIA,GAAUA,EAASotB,EAAWptB,OAAQ,CACzC,MAAMH,EAAQutB,GACdA,EAAa,IAAIzf,WAAW3N,IACjB2K,IAAI9K,EAAO,EACtB,CACD,OAAOutB,CACR,CAhGWC,CAAOlB,EAAQgB,EAAeA,EAAcxD,KAGjD7H,EAAS,EAAGA,GAAUqL,EAAcxD,GAAc7H,GAAU6H,GAAc,CAC9E,MAAM2D,EAAa1J,GAAO8G,GAAY9f,GAAS0b,EAAOxE,EAAQA,EAAS6H,KACnEuD,GACHrE,EAAKxE,OAAOiJ,GAEb,MAAMC,EAAcnB,EAAI/H,OAAOiJ,GAC1BJ,GACJrE,EAAKxE,OAAOkJ,GAEbpB,EAAOxhB,IAAI6Y,GAASkH,GAAY6C,GAAczL,EAASkL,EACvD,CAED,OADApB,EAAU5iB,QAAU4B,GAAS0b,EAAOxE,GAC7BqK,CACR,CAgBAR,eAAeI,GAAWH,EAAWF,EAAUtD,EAAUG,GACxDqD,EAAUxD,SAAW,KACrB,MAAMoF,EChNP,SAAoBvtB,GACnB,GAA0B,oBAAfwtB,YAA4B,CACtCxtB,EAAQytB,SAASC,mBAAmB1tB,IACpC,MAAM+R,EAAS,IAAIrE,WAAW1N,EAAMD,QACpC,IAAK,IAAIkI,EAAI,EAAGA,EAAI8J,EAAOhS,OAAQkI,IAClC8J,EAAO9J,GAAKjI,EAAM2tB,WAAW1lB,GAE9B,OAAO8J,CACT,CACE,OAAO,IAAIyb,aAAcI,OAAO5tB,EAElC,CDqMyB6tB,CAAW1F,GAC7B2F,QAkBPpC,eAAyBqC,EAAQ5F,EAAU6F,EAAWC,EAAaC,GAClE,IAAIpD,GAQH,OAAO7C,GAAKC,UAAUC,GAPtB,IACC,aAAaoC,GAAOrC,UAAU6F,EAAQ5F,EAAU6F,EAAWC,EAAaC,EACxE,CAAC,MAAOhV,GAER,OADA4R,IAAuB,EAChB7C,GAAKC,UAAUC,EACtB,CAIH,CA7BuBD,CAAUyB,GAAY4D,EAAiBzD,IAAoB,EAAOG,IAClFkE,QA8BPzC,eAA0BsC,EAAWF,EAAS/tB,GAC7C,IAAIgrB,GAQH,OAAO9C,GAAKI,OAAOyF,EAASE,EAAU1F,KAAMyB,GAAuBC,WAAYjqB,GAP/E,IACC,aAAawqB,GAAOS,WAAWgD,EAAWF,EAAS/tB,EACnD,CAAC,MAAOmZ,GAER,OADA6R,IAAwB,EACjB9C,GAAKI,OAAOyF,EAASE,EAAU1F,KAAMyB,GAAuBC,WAAYjqB,EAC/E,CAIH,CAzC2BirB,CAAWlR,OAAOC,OAAO,CAAEuO,QAAQyB,IAAyB+D,EAAS,GAA6B,EAAvB3D,GAAWsB,GAAiB,IAC3H2C,EAAe,IAAI1gB,WAAWygB,GAC9BpJ,EAAMpB,GAAO8G,GAAY9f,GAASyjB,EAAc,EAAGjE,GAAWsB,KAC9D4C,EAAiB1K,GAAO8G,GAAY9f,GAASyjB,EAAcjE,GAAWsB,GAAkC,EAAvBtB,GAAWsB,KAC5FM,EAAuBphB,GAASyjB,EAAqC,EAAvBjE,GAAWsB,IAU/D,OATA3R,OAAOC,OAAO4R,EAAW,CACxB2C,KAAM,CACLvJ,MACAsJ,iBACAtC,wBAEDI,IAAK,IAAIxB,GAAW,IAAID,GAAI3F,GAAM9kB,MAAMsuB,KAAKlE,KAC7CzB,KAAM,IAAIiC,GAASwD,KAEbtC,CACR,CA4BA,SAASzrB,GAAOkuB,EAAWC,GAC1B,IAAI7uB,EAAQ4uB,EAMZ,OALIA,EAAUzuB,OAAS0uB,EAAW1uB,SACjCH,EAAQ,IAAI8N,WAAW8gB,EAAUzuB,OAAS0uB,EAAW1uB,QACrDH,EAAM8K,IAAI8jB,EAAW,GACrB5uB,EAAM8K,IAAI+jB,EAAYD,EAAUzuB,SAE1BH,CACR,CAWA,SAAS+K,GAAS/K,EAAO8uB,EAAOla,GAC/B,OAAO5U,EAAM+K,SAAS+jB,EAAOla,EAC9B,CAEA,SAAS+O,GAASkH,EAAY9R,GAC7B,OAAO8R,EAAWlH,SAAS5K,EAC5B,CACA,SAASgL,GAAO8G,EAAY9R,GAC3B,OAAO8R,EAAW9G,OAAOhL,EAC1B,CErRA,MAAMgW,GAAgB,GAEtB,MAAMC,WAAkCvW,gBAEvCF,aAAYgQ,SAAEA,EAAQ4D,qBAAEA,EAAoBX,kBAAEA,IAC7C3S,MAAM,CACL/I,QACCoK,OAAOC,OAAOpZ,KAAM,CACnBwnB,WACA4D,yBAEDD,GAAWnrB,KAAMwnB,EACjB,EACDzP,UAAUC,EAAOC,GAChB,MAAMiW,EAAYluB,KAClB,GAAIkuB,EAAU1G,SAAU,CACvB,MAAM2G,EAAkBnJ,GAAQkJ,EAAWlW,EAAMhO,SAAS,EAAGgkB,KAE7D,GADAE,EAAU1G,SAAW,KACjB2G,EAAgBH,KAAsBE,EAAU9C,qBACnD,MAAM,IAAI3R,MAAMmP,IAEjB5Q,EAAQA,EAAMhO,SAASgkB,GACvB,CACGvD,EACHxS,EAAWqT,MAAM,IAAI7R,MAAMqP,KAE3B7Q,EAAWC,QAAQ8M,GAAQkJ,EAAWlW,GAEvC,GAEF,EAGF,MAAMoW,WAAkC1W,gBAEvCF,aAAYgQ,SAAEA,EAAQ4D,qBAAEA,IACvBtT,MAAM,CACL/I,QACCoK,OAAOC,OAAOpZ,KAAM,CACnBwnB,WACA4D,yBAEDD,GAAWnrB,KAAMwnB,EACjB,EACDzP,UAAUC,EAAOC,GAChB,MAAMiW,EAAYluB,KAClB,IAAIurB,EACArK,EACJ,GAAIgN,EAAU1G,SAAU,CACvB0G,EAAU1G,SAAW,KACrB,MAAM1d,EAASsc,GAAgB,IAAIrZ,WAAWihB,KAC9ClkB,EAAOkkB,IAAqBE,EAAU9C,qBACtCG,EAAS,IAAIxe,WAAWiL,EAAM5Y,OAAS0K,EAAO1K,QAC9CmsB,EAAOxhB,IAAI+a,GAAQoJ,EAAWpkB,GAAS,GACvCoX,EAAS8M,EACd,MACKzC,EAAS,IAAIxe,WAAWiL,EAAM5Y,QAC9B8hB,EAAS,EAEVqK,EAAOxhB,IAAI+a,GAAQoJ,EAAWlW,GAAQkJ,GACtCjJ,EAAWC,QAAQqT,EACnB,GAEF,EASF,SAASvG,GAAQqJ,EAAQ3I,GACxB,MAAM6F,EAAS,IAAIxe,WAAW2Y,EAAMtmB,QACpC,IAAK,IAAIiE,EAAQ,EAAGA,EAAQqiB,EAAMtmB,OAAQiE,IACzCkoB,EAAOloB,GAASirB,GAAQD,GAAU3I,EAAMriB,GACxCkrB,GAAWF,EAAQ9C,EAAOloB,IAE3B,OAAOkoB,CACR,CAEA,SAASzG,GAAQuJ,EAAQ3I,GACxB,MAAM6F,EAAS,IAAIxe,WAAW2Y,EAAMtmB,QACpC,IAAK,IAAIiE,EAAQ,EAAGA,EAAQqiB,EAAMtmB,OAAQiE,IACzCkoB,EAAOloB,GAASirB,GAAQD,GAAU3I,EAAMriB,GACxCkrB,GAAWF,EAAQ3I,EAAMriB,IAE1B,OAAOkoB,CACR,CAEA,SAASJ,GAAWkD,EAAQ7G,GAC3B,MAAMmG,EAAO,CAAC,UAAY,UAAY,WACtCxU,OAAOC,OAAOiV,EAAQ,CACrBV,OACAa,QAAS,IAAIzN,GAAM4M,EAAK,IACxBc,QAAS,IAAI1N,GAAM4M,EAAK,MAEzB,IAAK,IAAItqB,EAAQ,EAAGA,EAAQmkB,EAASpoB,OAAQiE,IAC5CkrB,GAAWF,EAAQ7G,EAASwF,WAAW3pB,GAEzC,CAEA,SAASkrB,GAAWF,EAAQK,GAC3B,IAAKC,EAAMC,EAAMC,GAAQR,EAAOV,KAChCU,EAAOG,QAAQrW,OAAO,CAACuW,IACvBC,GAAQN,EAAOG,QAAQ5b,MACvBgc,EAAOE,GAASvtB,KAAKwtB,KAAKD,GAASF,EAAOI,GAAQL,IAAQ,WAAa,GACvEN,EAAOI,QAAQtW,OAAO,CAACyW,IAAS,KAChCC,GAAQR,EAAOI,QAAQ7b,MACvByb,EAAOV,KAAO,CAACgB,EAAMC,EAAMC,EAC5B,CAEA,SAASP,GAAQD,GAChB,MAAMY,EAAwB,EAAjBZ,EAAOV,KAAK,GACzB,OAAOqB,GAAQztB,KAAKwtB,KAAKE,EAAc,EAAPA,KAAe,EAChD,CAEA,SAASD,GAAQE,GAChB,OAAgB,IAATA,CACR,CAEA,SAASJ,GAASI,GACjB,OAAgB,WAATA,CACR,CCnHA,MAAMC,GAAqB,cAE3B,MAAMC,WAAsB1X,gBAE3BF,YAAYI,GAASa,UAAEA,EAASM,kBAAEA,EAAiBD,wBAAEA,IACpDhB,MAAM,CAAE,GACR,MAAMuX,WAAEA,EAAUC,UAAEA,EAAS1W,qBAAEA,EAAoBsV,UAAEA,EAAS3D,OAAEA,EAAMlkB,MAAEA,GAAUuR,EAC5EqU,EAASjsB,KACf,IAAIuvB,EAAaC,EACbC,EAAWC,GAAkB5X,MAAM2X,UACjCH,IAAapB,IAAc3D,KAC/BkF,EAAUF,GAAeE,EAASE,MACnCJ,EAAcK,GAAYL,EAAa,IAAIpO,KAExCkO,IACHI,EAAWI,GAA8BJ,EAAU7W,EAAsB,CAAEvS,QAAOoS,aAAaK,EAAyBC,IAErHuW,IACCpB,EACHuB,EAAWG,GAAYH,EAAU,IAAIrB,GAA0BxW,KAE/D4X,EAAmB,IAAIxD,GAAoBpU,GAC3C6X,EAAWG,GAAYH,EAAUD,KAGnCM,GAAY7D,EAAQwD,GAAU1E,UAC7B,IAAIe,EACAwD,IAAcpB,IACjBpC,EAAY0D,EAAiB1D,WAExBwD,IAAapB,IAAc3D,IAChCuB,QAAkByD,EAAYQ,YAAYnc,OAC1CkY,EAAY,IAAIzK,SAASyK,EAAUzsB,MAAMiiB,QAAQ0O,UAAU,IAE5D/D,EAAOH,UAAYA,CAAS,GAE7B,EAGF,MAAMmE,WAAsBvY,gBAE3BF,YAAYI,GAASa,UAAEA,EAASQ,oBAAEA,EAAmBD,0BAAEA,IACtDlB,MAAM,CAAE,GACR,MAAMoW,UAAEA,EAASoB,UAAEA,EAAS/E,OAAEA,EAAMuB,UAAEA,EAASuD,WAAEA,EAAUzW,qBAAEA,GAAyBhB,EACtF,IAAI2X,EAAaW,EACbT,EAAWC,GAAkB5X,MAAM2X,UACnCH,IACCpB,EACHuB,EAAWG,GAAYH,EAAU,IAAIxB,GAA0BrW,KAE/DsY,EAAmB,IAAI5F,GAAoB1S,GAC3C6X,EAAWG,GAAYH,EAAUS,KAG/Bb,IACHI,EAAWI,GAA8BJ,EAAU7W,EAAsB,CAAEH,aAAaO,EAA2BC,IAE9GqW,IAAapB,IAAc3D,KAC/BkF,EAAUF,GAAeE,EAASE,MACnCJ,EAAcK,GAAYL,EAAa,IAAIpO,KAE5C2O,GAAY9vB,KAAMyvB,GAAU1E,UAC3B,KAAMuE,GAAapB,IAAc3D,EAAQ,CACxC,MAAM4F,QAAwBZ,EAAYQ,YAAYnc,OAChDwc,EAAoB,IAAI/O,SAAS8O,EAAgB9wB,MAAMiiB,QAC7D,GAAIwK,GAAasE,EAAkBJ,UAAU,GAAG,GAC/C,MAAM,IAAIvW,MAAMoP,GAEjB,IAEF,EAWF,SAAS6G,GAAkBD,GAC1B,OAAOG,GAAYH,EAAU,IAAI/X,gBAAgB,CAChDK,UAAUC,EAAOC,GACZD,GAASA,EAAM5Y,QAClB6Y,EAAWC,QAAQF,EAEpB,IAEH,CAEA,SAAS8X,GAAY7D,EAAQwD,EAAUhiB,GACtCgiB,EAAWG,GAAYH,EAAU,IAAI/X,gBAAgB,CAAEjK,WACvD0L,OAAOkX,eAAepE,EAAQ,WAAY,CACzCrZ,IAAG,IACK6c,GAGV,CAEA,SAASI,GAA8BJ,EAAU7W,EAAsBhB,EAAS0Y,EAAmBC,GAClG,IAECd,EAAWG,GAAYH,EAAU,IADP7W,GAAwB0X,EAAoBA,EAAoBC,GACnCpB,GAAoBvX,GAC3E,CAAC,MAAO0T,GACR,IAAI1S,EAGH,MAAM0S,EAFNmE,EAAWG,GAAYH,EAAU,IAAIc,EAAYpB,GAAoBvX,GAItE,CACD,OAAO6X,CACR,CAEA,SAASG,GAAYH,EAAUe,GAC9B,OAAOf,EAASG,YAAYY,EAC7B,CCpHA,MAAMC,GAAqB,UACrBC,GAAgB,QAChBC,GAAe,OACfC,GAAe,OACfC,GAAmB,MACnBC,GAAgB,QAEhBC,GAAgB,UAiBtB,MAAMR,WAAoB7Y,gBAEzBF,YAAYI,EAASsB,GACpBpB,MAAM,CAAE,GACR,MAAMD,EAAQ7X,MACRgxB,UAAEA,GAAcpZ,EACtB,IAAIqZ,EACAD,EAAUE,WAzBM,WA0BnBD,EAAS7B,GACC4B,EAAUE,WAAWH,MAC/BE,EAAShB,IAEV,IAAIjhB,EAAO,EACX,MAAMid,EAAS,IAAIgF,EAAOrZ,EAASsB,GAC7BuW,EAAW3X,MAAM2X,SACjBe,EAAkB,IAAI9Y,gBAAgB,CAC3CK,UAAUC,EAAOC,GACZD,GAASA,EAAM5Y,SAClB4P,GAAQgJ,EAAM5Y,OACd6Y,EAAWC,QAAQF,GAEpB,EACDvK,QACC,MAAMqe,UAAEA,GAAcG,EACtB9S,OAAOC,OAAOvB,EAAO,CACpBiU,YACA9c,QAED,IAEFmK,OAAOkX,eAAexY,EAAO,WAAY,CACxCjF,IAAG,IACK6c,EAASG,YAAY3D,GAAQ2D,YAAYY,IAGlD,EC5DF,MAAMW,UAA+BC,QAAU/Z,GAM/C,MAAMga,GAEL7Z,YAAY8Z,GAAY7B,SAAEA,EAAQ8B,SAAEA,IAAY3Z,QAAEA,EAAOsB,OAAEA,EAAMsY,cAAEA,EAAa7Y,cAAEA,EAAa8Y,gBAAEA,EAAeC,QAAEA,GAAWC,GAC5H,MAAMC,OAAEA,GAAWJ,EAoBnB,OAnBArY,OAAOC,OAAOkY,EAAY,CACzBO,MAAM,EACNpC,SAAUA,EAASG,YAAY,IAAIkC,GAAsBrC,EAAU+B,EAAetY,GAAS,CAAE0Y,WAC7FL,WACA3Z,QAASuB,OAAOC,OAAO,CAAA,EAAIxB,GAC3B8Z,UACAD,kBACAM,YACC,MAAMC,OAAEA,EAAMH,KAAEA,GAASP,EACrBU,IAAWH,IACdG,EAAOD,YACPT,EAAWW,UAAY,KAExB,EACDN,iBACCL,EAAWO,MAAO,EAClBF,EAAeL,EACf,KAEM3Y,GAAiBwY,GAAwBe,GAA2BC,IAAuBb,EAAYpY,EAC/G,EAGF,MAAM4Y,WAA8Bpa,gBAEnCF,YAAY4a,GAAgBC,QAAEA,EAAOC,WAAEA,EAAUtjB,KAAEA,EAAIujB,MAAEA,IAAS9Z,UAAEA,IACnE,IAAI+Z,EAAc,EAClB1a,MAAM,CACL/I,QACKsjB,GACHI,GAAYJ,EAASrjB,EAEtB,EACD+b,gBAAgB/S,EAAOC,GACtBua,GAAexa,EAAM5Y,OACjBkzB,SACGG,GAAYH,EAAYE,EAAaxjB,GAE5CiJ,EAAWC,QAAQF,EACnB,EACDvK,QACC2kB,EAAepjB,KAAOwjB,EAClBD,GACHE,GAAYF,EAAOC,EAEpB,GACC,CAAEE,cAAe,EAAG1jB,KAAM,IAAMyJ,GACnC,EAGFsS,eAAe0H,GAAYE,KAAYC,GACtC,UACOD,KAAWC,EACjB,CAAC,MAAOra,GAER,CACF,CAEA,SAAS4Z,GAAsBb,EAAYpY,GAC1C,MAAO,CACN2Z,IAAK,IAgBP9H,gBAAyBnT,QAAEA,EAAO6X,SAAEA,EAAQ8B,SAAEA,EAAQI,eAAEA,GAAkBzY,GACzE,MAAM4Z,EAAc,IAAIvC,GAAY3Y,EAASsB,GAC7C,UACOuW,EAASG,YAAYkD,GAAaC,OAAOxB,EAAU,CAAEyB,cAAc,EAAMC,cAAc,IAC7F,MAAMnH,UACLA,EAAS9c,KACTA,GACG8jB,EACJ,MAAO,CACNhH,YACA9c,OAEH,CAAW,QACT2iB,GACA,CACF,CA/BauB,CAAU5B,EAAYpY,GAEnC,CAEA,SAASgZ,GAAyBZ,GAAY/X,QAAEA,EAAOd,UAAEA,IASxD,OARK6Y,EAAWW,WACf9Y,OAAOC,OAAOkY,EAAY,CACzBU,OAAQmB,GAAa7B,EAAWI,QAAQ,GAAInY,EAAS+X,GACrDW,UAAW,CACVY,IAAK,IAwBT9H,eAA4BuG,EAAYpY,GACvC,IAAIka,EAAeC,EACnB,MAAMjiB,EAAS,IAAIuZ,SAAQ,CAACC,EAAS0I,KACpCF,EAAgBxI,EAChByI,EAAeC,CAAM,IAEtBna,OAAOC,OAAOkY,EAAY,CACzBiC,OAAQ,KACRC,OAAQ,KACRJ,gBACAC,eACAjiB,WAED,MAAMqe,SAAEA,EAAQ7X,QAAEA,EAAO8Z,QAAEA,GAAYJ,GACjCC,SAAEA,EAAQkC,OAAEA,GAyBnB,SAA2BC,GAC1B,MAAMF,EAASE,EAAeC,YAC9B,IAAIC,EACJ,MAAMH,EAAS,IAAI9I,SAAQC,GAAWgJ,EAAsBhJ,IACtD2G,EAAW,IAAIsC,eAAe,CACnC9I,YAAY/S,SACLwb,EAAO9I,YACP8I,EAAO7f,MAAMqE,EACnB,EACD8b,QACCN,EAAOO,cACPH,GACA,EACDI,MAAMC,GACET,EAAOQ,MAAMC,KAGtB,MAAO,CAAE1C,WAAUkC,SACpB,CA3C8BS,CAAkB5C,EAAWC,UACpD4C,EAAqBC,GAAY,CACtCzT,KAAM+P,GACNgB,QAASA,EAAQ5P,MAAM,GACvBlK,UACAsB,SACAuW,WACA8B,YACED,GACE6C,GACJhb,OAAOC,OAAOkY,EAAY,CACzBiC,OAAQ9D,EAASM,YACjByD,OAAQjC,EAASoC,cAGnB,MAAMU,QAAoBjjB,EAC1B,UACOmgB,EAASuC,OACf,CAAC,MAAOvb,GAER,CAED,aADMkb,EACCY,CACR,CA7DeC,CAAahD,EAAY,CAAE7Y,iBAIlC6Y,EAAWW,SACnB,CA8EA,IAAIsC,IAA0B,EAC1BC,IAA2B,EAE/B,SAASrB,GAAasB,EAAKlb,EAAS+X,GACnC,MAAMoD,EAAgB,CAAE/T,KAAM,UAC9B,IAAIgU,EAAW3C,SAEJyC,GAAOnd,KACjBmd,EAAMA,KAEP,IACCE,EAAY,IAAIC,IAAIH,EAAKlb,EACzB,CAAC,MAAOhB,GACRoc,EAAYF,CACZ,CACD,GAAIF,GACH,IACCvC,EAAS,IAAIZ,OAAOuD,EACpB,CAAC,MAAOpc,GACRgc,IAA0B,EAC1BvC,EAAS,IAAIZ,OAAOuD,EAAWD,EAC/B,MAED1C,EAAS,IAAIZ,OAAOuD,EAAWD,GAGhC,OADA1C,EAAO6C,iBAAiBpE,IAAoBqE,GA+C7C/J,gBAAyB9J,KAAEA,GAAQqQ,GAClC,MAAM3Q,KAAEA,EAAIthB,MAAEA,EAAK01B,UAAEA,EAAS3jB,OAAEA,EAAMka,MAAEA,GAAUrK,GAC5CsS,OAAEA,EAAMC,OAAEA,EAAMJ,cAAEA,EAAaC,aAAEA,EAAY1B,eAAEA,GAAmBL,EACxE,IACC,GAAIhG,EAAO,CACV,MAAMhN,QAAEA,EAAO0W,MAAEA,EAAK90B,KAAEA,EAAIgpB,KAAEA,GAASoC,EACjC2J,EAAgB,IAAIxb,MAAM6E,GAChCnF,OAAOC,OAAO6b,EAAe,CAAED,QAAO90B,OAAMgpB,SAC5C4K,EAAMmB,EACT,KAAS,CACN,GAAItU,GAAQgQ,GAAc,CACzB,MAAMtxB,MAAEA,EAAK61B,KAAEA,SAAe3B,EAAO3f,OACrCwgB,GAAY,CAAEzT,KAAMiQ,GAAcvxB,QAAO61B,OAAMH,aAAazD,EAC5D,CACG3Q,GAAQiQ,WACL4C,EAAO9I,YACP8I,EAAO7f,MAAM,IAAI5G,WAAW1N,IAClC+0B,GAAY,CAAEzT,KAAMkQ,GAAkBkE,aAAazD,IAEhD3Q,GAAQmQ,IACXgD,EAAM,KAAM1iB,EAEb,CACD,CAAC,MAAOka,GACRwI,EAAMxI,EACN,CAED,SAASwI,EAAMxI,EAAOla,GACjBka,EACH+H,EAAa/H,GAEb8H,EAAchiB,GAEXoiB,GACHA,EAAOO,cAERpC,GACA,CACF,CArFsDwD,CAAUL,EAAOxD,KAC/DU,CACR,CAEA,SAASoC,GAAY9V,GAAS0T,OAAEA,EAAMwB,OAAEA,EAAM7B,eAAEA,EAAcF,gBAAEA,IAC/D,IACC,IAAIpyB,MAAEA,EAAKowB,SAAEA,EAAQ8B,SAAEA,GAAajT,EACpC,MAAM8W,EAAgB,GACtB,GAAI/1B,EAAO,CACV,MAAMiiB,OAAEA,EAAMliB,OAAEA,GAAWC,EACvBD,GAAUkiB,EAAOwB,aACpBzjB,EAAQ,IAAI0N,WAAW1N,IAExBif,EAAQjf,MAAQA,EAAMiiB,OACtB8T,EAAc7S,KAAKjE,EAAQjf,MAC3B,CAWD,GAVIoyB,GAAmB+C,IAClB/E,GACH2F,EAAc7S,KAAKkN,GAEhB8B,GACH6D,EAAc7S,KAAKgP,IAGpBjT,EAAQmR,SAAWnR,EAAQiT,SAAW,KAEnC6D,EAAch2B,OACjB,IAEC,OADA4yB,EAAOqD,YAAY/W,EAAS8W,IACrB,CACP,CAAC,MAAO7c,GACRic,IAA2B,EAC3BlW,EAAQmR,SAAWnR,EAAQiT,SAAW,KACtCS,EAAOqD,YAAY/W,EACnB,MAED0T,EAAOqD,YAAY/W,EAEpB,CAAC,MAAOgN,GAKR,MAJIkI,GACHA,EAAOO,cAERpC,IACMrG,CACN,CACF,CC7OA,IAAIgK,GAAO,GACX,MAAMC,GAAkB,GAYxB,IAAIC,GAAc,EA4ClB,SAASC,GAAsBnE,GAC9B,MAAMoE,iBAAEA,GAAqBpE,EACzBoE,IACHC,aAAaD,GACbpE,EAAWoE,iBAAmB,KAEhC,CChEA,MAWME,GAAqB,MAErBC,GAAyB,WAE/B,MAAM5E,GAELzZ,cACCxX,KAAKgP,KAAO,CACZ,CAED+E,OACC/T,KAAK81B,aAAc,CACnB,EAGF,MAAMC,WAAe9E,GAEhBxB,eACH,MAAM8D,EAASvzB,MACTyY,UAAEA,EAAYmd,IAAuBrC,EACrC9D,EAAW,IAAIuG,eAAe,CACnCjnB,QACC/O,KAAKwyB,YAAc,CACnB,EACDzH,WAAW9S,GACV,MAAMiJ,OAAEA,EAAS,EAAClS,KAAEA,EAAIinB,gBAAEA,GAAoBxG,GACxC+C,YAAEA,GAAgBxyB,KACxBiY,EAAWC,cAAcge,GAAe3C,EAAQrS,EAASsR,EAAajxB,KAAK40B,IAAI1d,EAAWzJ,EAAOwjB,GAAcyD,IAC3GzD,EAAc/Z,EAAYzJ,EAC7BiJ,EAAW6b,QAEX9zB,KAAKwyB,aAAe/Z,CAErB,IAEF,OAAOgX,CACP,EAGF,MAAM2G,WAAenF,GAEpBzZ,cACCM,QACA,MAAM0b,EAASxzB,KACTuxB,EAAW,IAAIsC,eAAe,CACnClgB,MAAMqE,GACEwb,EAAO6C,gBAAgBre,KAGhCmB,OAAOkX,eAAemD,EAAQqC,GAAwB,CACrDjjB,IAAG,IACK2e,GAGT,CAED8E,kBAEC,EAqEF,MAAMC,WAAmBP,GAExBve,YAAY+e,GACXze,QACAqB,OAAOC,OAAOpZ,KAAM,CACnBu2B,OACAvnB,KAAMunB,EAAKvnB,MAEZ,CAED+b,qBAAqB7J,EAAQ9hB,GAC5B,MAAMm0B,EAASvzB,KACTw2B,EAAYtV,EAAS9hB,EACrBm3B,EAAOrV,GAAUsV,EAAYjD,EAAOvkB,KAAOukB,EAAOgD,KAAKzU,MAAMZ,EAAQsV,GAAajD,EAAOgD,KAC/F,OAAO,IAAIxpB,iBAAiBwpB,EAAK1O,cACjC,EAGF,MAAM4O,WAAmBxF,GAExBzZ,YAAYkf,GACX5e,QACA,MACM0Y,EAAkB,IAAI9Y,gBACtBif,EAAU,GACZD,GACHC,EAAQpU,KAAK,CA7JiB,eA6JUmU,IAEzCvd,OAAOkX,eANQrwB,KAMe61B,GAAwB,CACrDjjB,IAAG,IACK4d,EAAgBe,WARVvxB,KAWRu2B,KAAO,IAAIK,SAASpG,EAAgBf,SAAU,CAAEkH,YAAWJ,MAClE,CAEDM,UACC,OAAO72B,KAAKu2B,IACZ,EAUF,MAAMO,WAAmBL,GAExBjf,YAAYuf,GACXjf,MAAMif,GACN5d,OAAOC,OAAOpZ,KAAM,CACnB+2B,WACAC,MAAOD,GAAsC,SAA1BA,EAASE,eAE7B,CAEDlM,gBACC,MAAMgM,SACLA,EAAQC,KACRA,GACGh3B,KACEu2B,QAAaze,MAAM+e,UACzB,GAAIN,EAAK3X,MAAQoY,EAChB,OAAOT,EAAK3X,OACN,CACN,MAAM2U,EAAS,IAAI2D,WACnB,OAAO,IAAIvM,SAAQ,CAACC,EAAS0I,KAC5Bna,OAAOC,OAAOma,EAAQ,CACrB4D,OAAQ,EAAG9I,YAAazD,EAAQyD,EAAOjd,QACvCgmB,QAAS,IAAM9D,EAAOC,EAAOjI,SAE9BiI,EAAO8D,WAAWd,EAAMQ,EAAS,GAElC,CACD,EAyPF,MAAMO,WAAyBlB,GAE9BriB,KAAKwjB,EAAW,GACfpe,OAAOC,OAAOpZ,KAAM,CACnBkhB,OAAQ,EACRjiB,MAAO,IAAI8N,WAAWwqB,KAEvBzf,MAAM/D,MACN,CAEDsiB,gBAAgBp3B,GACf,MAAMu0B,EAASxzB,KACf,GAAIwzB,EAAOtS,OAASjiB,EAAMG,OAASo0B,EAAOv0B,MAAMG,OAAQ,CACvD,MAAMo4B,EAAgBhE,EAAOv0B,MAC7Bu0B,EAAOv0B,MAAQ,IAAI8N,WAAWyqB,EAAcp4B,OAASH,EAAMG,QAC3Do0B,EAAOv0B,MAAM8K,IAAIytB,EACjB,CACDhE,EAAOv0B,MAAM8K,IAAI9K,EAAOu0B,EAAOtS,QAC/BsS,EAAOtS,QAAUjiB,EAAMG,MACvB,CAEDy3B,UACC,OAAO72B,KAAKf,KACZ,EAGF,MAAMw4B,WAAwB1B,GAE7Bve,YAAYkgB,GACX5f,QACA9X,KAAK03B,QAAUA,CACf,CAED3M,aACC,MAAMwI,EAASvzB,MACT03B,QAAEA,GAAYnE,EACpBA,EAAOoE,eAAiB,QAClBhN,QAAQiN,IAAIF,EAAQv4B,KAAI4rB,gBACvB8M,EAAW9jB,OACjBwf,EAAOvkB,MAAQ6oB,EAAW7oB,IAAI,KAE/B8I,MAAM/D,MACN,CAEDgX,qBAAqB7J,EAAQ9hB,EAAQ04B,EAAa,GACjD,MAAMvE,EAASvzB,MACT03B,QAAEA,GAAY13B,KACpB,IAAIoR,EACA2mB,EAAoBD,GACE,GAAtBC,IACHA,EAAoBL,EAAQt4B,OAAS,GAEtC,IAAI44B,EAAsB9W,EAC1B,KAAO8W,GAAuBN,EAAQK,GAAmB/oB,MACxDgpB,GAAuBN,EAAQK,GAAmB/oB,KAClD+oB,IAED,MAAME,EAAgBP,EAAQK,GACxBG,EAAoBD,EAAcjpB,KACxC,GAAIgpB,EAAsB54B,GAAU84B,EACnC9mB,QAAe8kB,GAAe+B,EAAeD,EAAqB54B,OAC5D,CACN,MAAM+4B,EAAcD,EAAoBF,EACxC5mB,EAAS,IAAIrE,WAAW3N,GACxBgS,EAAOrH,UAAUmsB,GAAe+B,EAAeD,EAAqBG,IACpE/mB,EAAOrH,UAAUwpB,EAAO2C,eAAehV,EAASiX,EAAa/4B,EAAS+4B,EAAaL,GAAaK,EAChG,CAED,OADA5E,EAAOoE,eAAiBp2B,KAAKG,IAAIq2B,EAAmBxE,EAAOoE,gBACpDvmB,CACP,EAGF,MAAMgnB,WAAwBnH,GAE7BzZ,YAAY6gB,EAAiBC,EAAU,YACtCxgB,QACA,MAAMygB,EAAYv4B,KAQlB,IAAIw4B,EAAkBC,EAAcC,EAPpCvf,OAAOC,OAAOmf,EAAW,CACxBT,WAAY,EACZa,WAAY,EACZ3pB,KAAM,EACNspB,UACAM,cAAeN,IAGhB,MAAM/G,EAAW,IAAIsC,eAAe,CACnC9I,YAAY/S,GACX,MAAM4gB,cAAEA,GAAkBL,EAC1B,GAAKG,EAgBM1gB,EAAM5Y,QAAUw5B,SACpBC,EAAW7gB,EAAM8J,MAAM,EAAG8W,UAC1BE,IACNP,EAAUI,YAAcH,EAAiBxpB,KACzCupB,EAAUT,aACVY,EAAa,WACP14B,KAAK2T,MAAMqE,EAAM8J,MAAM8W,WAEvBC,EAAW7gB,OAxBD,CAChB,MAAM3Y,MAAEA,EAAK61B,KAAEA,SAAemD,EAAgBU,OAC9C,GAAI7D,IAAS71B,EACZ,MAAM,IAAIoa,MA1iBwB,sCA4iBlC+e,EAAmBn5B,EACnBm5B,EAAiBxpB,KAAO,EACpBwpB,EAAiBF,UACpBC,EAAUD,QAAUE,EAAiBF,SAEtCC,EAAUK,cAAgBL,EAAUD,cAC9BU,GAAWR,GACjBC,EAAep5B,EAAMkyB,SACrBmH,EAAaD,EAAa9E,kBAErB3zB,KAAK2T,MAAMqE,EACtB,CAUI,EACD+S,oBACO2N,EAAWhO,YACXoO,GACN,IAQF/N,eAAe8N,EAAW7gB,GACzB,MAAMmgB,EAAcngB,EAAM5Y,OACtB+4B,UACGO,EAAWhO,YACXgO,EAAW/kB,MAAMqE,GACvBwgB,EAAiBxpB,MAAQmpB,EACzBI,EAAUvpB,MAAQmpB,EAClBI,EAAUK,eAAiBT,EAE5B,CAEDpN,eAAe+N,IACdL,EAAazpB,KAAOwpB,EAAiBxpB,WAC/B0pB,EAAW5E,OACjB,CApBD3a,OAAOkX,eAAekI,EAAW1C,GAAwB,CACxDjjB,IAAG,IACK2e,GAmBT,EASFxG,eAAeiO,GAAW/M,EAAQsL,GAC7BtL,EAAOlY,OAASkY,EAAO6J,mBACpB7J,EAAOlY,KAAKwjB,EAEpB,CAEA,SAAS0B,GAAW1F,GASnB,OARIj0B,MAAMM,QAAQ2zB,KACjBA,EAAS,IAAIkE,GAAgBlE,IAE1BA,aAAkByC,iBACrBzC,EAAS,CACR9D,SAAU8D,IAGLA,CACR,CA2BA,SAAS2C,GAAe3C,EAAQrS,EAAQlS,EAAM8oB,GAC7C,OAAOvE,EAAO2C,eAAehV,EAAQlS,EAAM8oB,EAC5C,CC3pBA,MAAMoB,GAAQ,sQAAsQC,MAAM,IACpRC,GAA8B,KAAhBF,GAAM95B,OCK1B,SAASi6B,GAAWh6B,EAAO03B,GAC1B,OAAIA,GAA6C,SAAjCA,EAASuC,OAAOrC,cDAjC,SAAqBsC,GACpB,GAAIH,GAAa,CAChB,IAAIhoB,EAAS,GACb,IAAK,IAAIooB,EAAiB,EAAGA,EAAiBD,EAAYn6B,OAAQo6B,IACjEpoB,GAAU8nB,GAAMK,EAAYC,IAE7B,OAAOpoB,CACT,CACE,OAAO,IAAIqoB,aAAcC,OAAOH,EAElC,CCTSI,CAAYt6B,GAEZ,IAAIo6B,YAAY1C,GAAU2C,OAAOr6B,EAE1C,CCdA,MAAMu6B,GAAyB,WACzBC,GAA6B,cAC7BC,GAAwB,UACxBC,GAA4B,aAC5BC,GAAmC,mBACnCC,GAAiC,iBACjCC,GAAuB,SACvBC,GAAkC,kBAClCC,GAAuC,cACvCC,GAA2C,iBAC3CC,GAAiC,iBACjCC,GAAqC,oBACrCC,GAA8B,eAC9BC,GAAkC,kBAMlCC,GAAiB,CACtBd,GAAwBC,GAA4BI,GAAgCD,GACpFI,GAAsCC,GAA0CP,GAAuBC,GACvGO,GAAgCE,GAA6BN,GAAsBC,GACnFA,GAT6C,wBACA,wBACN,kBACZ,QAQ3B,YAAa,UAAW,YAAa,YAAa,eAAgB,cAAe,oBAAqB,UAAW,gBACjH,aAAc,gBAAiB,kBAAmB,wBAAyB,2BAA4B,gBAAiB,iBACxH,+BAED,MAAMQ,GAELnjB,YAAYyJ,GACXyZ,GAAeE,SAAQ1R,GAAQlpB,KAAKkpB,GAAQjI,EAAKiI,IACjD,ECsCF,MAAM2R,GAAiB,gCAMjBC,GAAiC,8BAGjCC,GAA8B,mCAC9BC,GAAqB,iBACrBC,GAAe,QACfC,GAAgB,QAChBC,GAAmB,CACxB,CAACnB,GAAkCljB,IACnC,CAACmjB,GAAgCnjB,IACjC,CAACojB,GAAsBpjB,IACvB,CAACqjB,GAAiCpjB,KAE7BqkB,GAAmB,CACxBrkB,CAACA,IAAc,CACdskB,SAAUrL,GACVrN,MAAO,GAER7L,CAACA,IAAc,CACdukB,SAAUC,GACV3Y,MAAO,IAIT,MAAM4Y,GAEL/jB,YAAY+b,EAAQ3b,EAAU,IAC7BuB,OAAOC,OAAOpZ,KAAM,CACnBuzB,OAAQ0F,GAAW1F,GACnB3b,UACAsB,OjBtEKA,IiBwEN,CAED6R,0BAA2BnT,EAAU,IACpC,MAAM4jB,EAAYx7B,KAClB,IAAIuzB,OAAEA,GAAWiI,EACjB,MAAMtiB,OAAEA,GAAWsiB,EAMnB,SALMxC,GAAWzF,GACbA,EAAOvkB,OAASmI,IAAoBoc,EAAO2C,iBAC9C3C,EAAS,IAAI+C,SAAiB,IAAIM,SAASrD,EAAO9D,UAAU8G,cACtDyC,GAAWzF,IAEdA,EAAOvkB,KnB3GqB,GmB4G/B,MAAM,IAAIyK,MAAMohB,IAEjBtH,EAAO9a,UjBnFT,SAAsBS,GACrB,OAAO3X,KAAKG,IAAIwX,EAAOT,UAjCG,GAkC3B,CiBiFqBgjB,CAAaviB,GAChC,MAAMwiB,QAoeR3Q,eAA6BwI,EAAQzH,EAAW6P,EAAaC,EAAcC,GAC1E,MAAMC,EAAiB,IAAI/uB,WAAW,IAsDvC,SAAmBgvB,EAAM7a,EAAQ7hB,GAChC08B,EAAKxa,UAAUL,EAAQ7hB,GAAO,EAC/B,CAtDCkiB,CADsBya,GAAYF,GACT,EAAGhQ,GAC5B,MAAMmQ,EAAeL,EAAeC,EACpC,aAAcK,EAAKN,UAAwBM,EAAK36B,KAAK40B,IAAI8F,EAAcN,IAEvE5Q,eAAemR,EAAK98B,GACnB,MAAM8hB,EAASya,EAAcv8B,EACvBujB,QAAcuT,GAAe3C,EAAQrS,EAAQ9hB,GACnD,IAAK,IAAI+8B,EAAYxZ,EAAMvjB,OAASw8B,EAAcO,GAAa,EAAGA,IACjE,GAAIxZ,EAAMwZ,IAAcL,EAAe,IAAMnZ,EAAMwZ,EAAY,IAAML,EAAe,IACnFnZ,EAAMwZ,EAAY,IAAML,EAAe,IAAMnZ,EAAMwZ,EAAY,IAAML,EAAe,GACpF,MAAO,CACN5a,OAAQA,EAASib,EACjB7a,OAAQqB,EAAMb,MAAMqa,EAAWA,EAAYP,GAActa,OAI5D,CACF,CAxfmC8a,CAAc7I,EnBlHZ,UmBkHkDA,EAAOvkB,KnB/G5D,GmB+G6F+H,SAC7H,IAAK2kB,EAAoB,CAGxB,MnBzH8B,WmByH1B1L,GADkBgM,SADO9F,GAAe3C,EAAQ,EAAG,KAGhD,IAAI9Z,MAAMuhB,IAEV,IAAIvhB,MA3Dc,qCA6DzB,CACD,MAAM4iB,EAAqBL,GAAYN,GACvC,IAAIY,EAAsBtM,GAAUqM,EAAoB,IACpDE,EAAsBvM,GAAUqM,EAAoB,IACxD,MAAMG,EAAgBd,EAAmBxa,OACnCub,EAAgBC,GAAUL,EAAoB,IAC9CM,EAAqBH,EnB9HK,GmB8HuCC,EACvE,IAAI9E,EAAiB+E,GAAUL,EAAoB,GACnD,MAAMO,EAAyBrJ,EAAOoE,gBAAkB,EACxD,IAAIG,EAAa4E,GAAUL,EAAoB,GAC3CQ,EAAcH,GAAUL,EAAoB,GAC5CS,EAAsB,EACtBnB,EAAc,EAClB,GAAIY,GAAuBzlB,IAAewlB,GAAuBxlB,IAAe+lB,GAAe9lB,IAAe+gB,GAAc/gB,GAAa,CACxI,MACMgmB,EAA4Bf,SADO9F,GAAe3C,EAAQmI,EAAmBxa,OnBrItC,QmBuI7C,GnBzIgD,WmByI5C8O,GAAU+M,EAA2B,GACxC,MAAM,IAAItjB,MA7EoB,4CA+E/B8iB,EAAsBjB,GAAayB,EAA2B,GAC9D,IAAIC,QAA4B9G,GAAe3C,EAAQgJ,EnB1IlB,ImB0IyE,GAC1GF,EAAqBL,GAAYgB,GACrC,MAAMC,EAA8BvB,EAAmBxa,OnB7IV,GACR,GmB6IrC,GAAI8O,GAAUqM,EAAoB,IAAMplB,IAAsCslB,GAAuBU,EAA6B,CACjI,MAAMC,EAA8BX,EACpCA,EAAsBU,EACtBH,EAAsBP,EAAsBW,EAC5CF,QAA4B9G,GAAe3C,EAAQgJ,EnBjJf,ImBiJsE,GAC1GF,EAAqBL,GAAYgB,EACjC,CACD,GAAIhN,GAAUqM,EAAoB,IAAMplB,GACvC,MAAM,IAAIwC,MA1F4B,oDA4FnCke,GAAkB5gB,KACrB4gB,EAAiB3H,GAAUqM,EAAoB,KAE5CvE,GAAc/gB,KACjB+gB,EAAa9H,GAAUqM,EAAoB,KAExCQ,GAAe9lB,KAClB8lB,EAAcvB,GAAae,EAAoB,KAE5CC,GAAuBxlB,KAC1BwlB,EAAsBhB,GAAae,EAAoB,KAExDE,GAAuBD,CACvB,CACD,GAAIM,GAA0BjF,EAC7B,MAAM,IAAIle,MAAMuhB,IAEjB,GAAIuB,EAAsB,GAAKA,GAAuBhJ,EAAOvkB,KAC5D,MAAM,IAAIyK,MAAMohB,IAEjB,IAAI3Z,EAAS,EACTic,QAAuBjH,GAAe3C,EAAQgJ,EAAqBD,EAAqBxE,GACxFsF,EAAgBpB,GAAYmB,GAChC,GAAIb,EAAqB,CACxB,MAAMW,EAA8BvB,EAAmBxa,OAASob,EAChE,GAAItM,GAAUoN,EAAelc,IAAWlK,IAAiCulB,GAAuBU,EAA6B,CAC5H,MAAMC,EAA8BX,EACpCA,EAAsBU,EACtBH,EAAsBP,EAAsBW,EAC5CC,QAAuBjH,GAAe3C,EAAQgJ,EAAqBD,EAAqBxE,GACxFsF,EAAgBpB,GAAYmB,EAC5B,CACD,CACD,GAAIZ,EAAsB,GAAKA,GAAuBhJ,EAAOvkB,KAC5D,MAAM,IAAIyK,MAAMohB,IAEjB,MAAMwC,EAAmBC,GAAe9B,EAAW5jB,EAAS,oBACtD2lB,EAAkBD,GAAe9B,EAAW5jB,EAAS,mBAC3D,IAAK,IAAI4lB,EAAY,EAAGA,EAAYX,EAAaW,IAAa,CAC7D,MAAMC,EAAY,IAAIC,GAASnK,EAAQra,EAAQsiB,EAAU5jB,SACzD,GAAIoY,GAAUoN,EAAelc,IAAWlK,GACvC,MAAM,IAAIyC,MApI0B,sCAsIrCkkB,GAAiBF,EAAWL,EAAelc,EAAS,GACpD,MAAM0c,EAAuBC,QAAQJ,EAAUK,QAAQF,sBACjDG,EAAiB7c,EAAS,GAC1B8c,EAAmBD,EAAiBN,EAAUQ,eAC9CzB,EAAgBwB,EAAmBP,EAAUS,iBAC7CC,EAAgBzB,GAAUU,EAAelc,EAAS,GAClDkd,EAAyC,IAAN,EAAhBD,GACnBE,EAAclB,EAAenzB,SAAS+zB,EAAgBC,GACtDvB,EAAgBC,GAAUU,EAAelc,EAAS,IAClDod,EAAY9B,EAAgBC,EAC5B8B,EAAapB,EAAenzB,SAASwyB,EAAe8B,GACpDE,EAAeZ,EACfa,EAAcb,EACdc,EAAYN,GnBhMY,QmBgMSO,GAASvB,EAAelc,EAAS,KAClE0d,EAAkB5O,GAAUoN,EAAelc,EAAS,IAAM4b,EAChE3jB,OAAOC,OAAOqkB,EAAW,CACxBU,gBACAC,kBACAS,eAAgB,EAChBC,iBAAkB,EAClBrC,gBACAiC,YACAxd,OAAQ0d,EACR3I,gBAAiByG,GAAUU,EAAelc,EAAS,IACnD6d,sBAAuBrC,GAAUU,EAAelc,EAAS,IACzD8d,sBAAuBhP,GAAUoN,EAAelc,EAAS,IACzDmd,cACAG,eACAC,cACAQ,cAAe9B,EAAenzB,SAASg0B,EAAkBxB,KAE1D,MAAO0C,EAAUC,SAAiBxU,QAAQiN,IAAI,CAC7CyB,GAAWgF,EAAaG,EAAevD,GAAeoC,GAAoBnC,IAC1E7B,GAAWkF,EAAYE,EAAcxD,GAAesC,GAAmBrC,MAExE/hB,OAAOC,OAAOqkB,EAAW,CACxBc,aACAW,WACAC,UACAT,UAAWA,GAAaQ,EAASE,SnBpNT,OmBsNzBzD,EAAcp6B,KAAKG,IAAIk9B,EAAiBjD,SAClC0D,GAAiB5B,EAAWA,EAAWL,EAAelc,EAAS,GACrE,MAAMoe,EAAQ,IAAI3E,GAAM8C,GACxB6B,EAAMzI,QAAU,CAACrD,EAAQ5b,IAAY6lB,EAAU5G,QAAQrD,EAAQ8L,EAAO1nB,GACtEsJ,EAASod,EACT,MAAMhM,WAAEA,GAAe1a,EACvB,GAAI0a,EACH,UACOA,EAAWkL,EAAY,EAAGX,EAAa,IAAIlC,GAAM8C,GACvD,CAAC,MAAOllB,GAER,OAEI+mB,CACN,CACD,MAAMC,EAAuBjC,GAAe9B,EAAW5jB,EAAS,wBAC1D4nB,EAAsBlC,GAAe9B,EAAW5jB,EAAS,uBAQ/D,OAPI2nB,IACH/D,EAAUiE,cAAgB9D,EAAc,QAAUzF,GAAe3C,EAAQ,EAAGoI,GAAe,IAAI5uB,YAEhGyuB,EAAU2D,QAAU1C,QAAsBvG,GAAe3C,EAAQiJ,EnBjQjC,GmBiQ4EC,GAAiB,IAAI1vB,WAC7HyyB,IACHhE,EAAUkE,aAAe/C,EAAqBpJ,EAAOvkB,WAAaknB,GAAe3C,EAAQoJ,EAAoBpJ,EAAOvkB,KAAO2tB,GAAsB,IAAI5vB,aAE/I,CACP,CAEDge,iBAAiBnT,EAAU,IAC1B,MAAM+nB,EAAU,GAChB,UAAW,MAAML,KAASt/B,KAAK4/B,oBAAoBhoB,GAClD+nB,EAAQpd,KAAK+c,GAEd,OAAOK,CACP,CAED5U,cACC,EAoBF,MAAM2S,GAELlmB,YAAY+b,EAAQra,EAAQtB,GAC3BuB,OAAOC,OAAOpZ,KAAM,CACnBuzB,SACAra,SACAtB,WAED,CAEDmT,cAAcyI,EAAQiK,EAAW7lB,EAAU,CAAA,GAC1C,MAAMioB,EAAW7/B,MACXuzB,OACLA,EAAMrS,OACNA,EAAM+U,gBACNA,EAAe6J,cACfA,EAAaC,kBACbA,EAAiB7mB,OACjBA,EAAM4kB,QACNA,EAAOhS,UACPA,EAASkU,eACTA,EAAclB,iBACdA,EAAgBD,eAChBA,GACGgB,EACEI,EAAiBJ,EAASI,eAAiB,GAE3CC,EAAWlE,SADO9F,GAAe3C,EAAQrS,EAAQ,GAAI+U,IAE3D,IAAIzO,EAAW8V,GAAeuC,EAAUjoB,EAAS,YAEjD,GADA4P,EAAWA,GAAYA,EAASpoB,QAAUooB,EACtCsY,GnB5UyB,ImB6UxBA,EAAcK,0BACjB,MAAM,IAAI1mB,MAAMshB,IAGlB,GnBlV+B,GmBkV3BgF,GnBnV6B,GmBmVoBA,EACpD,MAAM,IAAItmB,MAAMshB,IAEjB,GnBlVkC,UmBkV9B/K,GAAUkQ,EAAU,GACvB,MAAM,IAAIzmB,MA7Q2B,+BA+QtCkkB,GAAiBsC,EAAgBC,EAAU,GAC3CD,EAAehB,cAAgBgB,EAAe/B,uBACvChI,GAAe3C,EAAQrS,EAAS,GAAK+e,EAAehC,eAAgBgC,EAAe/B,iBAAkBjI,GAC3G,IAAIlpB,iBACCsyB,GAAiBQ,EAAUI,EAAgBC,EAAU,GAC3D/mB,OAAOC,OAAOqkB,EAAW,CACxB2C,eAAgBH,EAAeG,eAC/BC,aAAcJ,EAAeI,eAE9B,MAAM/Q,EAAYuQ,EAASvQ,WAAa2Q,EAAe3Q,UACjDpB,EAAYoB,IAAcwQ,EAChC,GAAIxQ,EAAW,CACd,IAAKpB,GAAa4R,EAAchV,WAAa3T,GAC5C,MAAM,IAAIsC,MAzRqB,mCA0RzB,IAAK+N,EACX,MAAM,IAAI/N,MA5RQ,gCA8RnB,CACD,MAAM6mB,EAAapf,EAAS,GAAK+e,EAAehC,eAAiBgC,EAAe/B,iBAC1EzO,EAAW8D,EAAO9D,SACxBA,EAASwG,gBAAkBA,EAC3BxG,EAASvO,OAASof,EAClB,IAAItxB,EAAOygB,EAASzgB,KAAO6vB,EAC3B,MAAMjN,EAAS0L,GAAeuC,EAAUjoB,EAAS,UAC3C6S,EAAoB6S,GAAeuC,EAAUjoB,EAAS,qBACxD6S,IACH+I,EAAS,IAAIK,gBAEdL,EJ2QF,SAAoBA,GACfA,EAAOjC,WAAapa,WAA0Bqc,EAAOuF,MAAQzhB,KAChEkc,EAAS,IAAI4E,GAAgB5E,IAE1BA,aAAkBK,iBACrBL,EAAS,CACRjC,SAAUiC,IAGZ,MAAMjC,SAAEA,GAAaiC,EAarB,OAZIjC,EAASviB,OAASmI,KACrBoa,EAASviB,KAAO,GAEIwkB,aAAkB4E,IAEtCjf,OAAOC,OAAOoa,EAAQ,CACrBsE,WAAY,EACZa,WAAY,EACZC,cAAe2H,IACfjI,QAASiI,MAGJ/M,CACR,CIlSWgN,CAAWhN,SACdwF,GAAWxF,EAAQsL,GACzB,MAAMvN,SAAEA,GAAaiC,GACfnB,QAAEA,EAAOC,WAAEA,EAAUC,MAAEA,GAAU3a,EACjC8c,EAAgB,CACrB9c,QAAS,CACRoZ,UAAWD,GACXvJ,WACA0G,YACA1D,mBAAoBsV,GAAiBA,EAAchV,SACnDP,OAAQ+S,GAAeuC,EAAUjoB,EAAS,kBAC1CwT,qBAAsB8C,IAAc4P,EAAQ2C,eAAmBT,IAAmB,EAAK,IAAUlU,IAAc,GAAM,KACrHA,YACAuD,WAAiC,GAArB0Q,EACZzQ,YACA3W,cAAe2kB,GAAeuC,EAAUjoB,EAAS,iBACjDgB,qBAAsB0kB,GAAeuC,EAAUjoB,EAAS,wBACxD6Z,gBAAiB6L,GAAeuC,EAAUjoB,EAAS,mBACnD6S,qBAEDvR,SACAsY,cAAe,CAAEI,SAAQ5iB,OAAMqjB,UAASC,aAAYC,UAErD,IAAImO,EAAa,EACjB,MACIA,oBLrXN3V,eAAyBkB,EAAQyI,GAChC,MAAM9c,QAAEA,EAAOsB,OAAEA,GAAWwb,GACtBjD,gBAAEA,EAAe9Y,cAAEA,EAAaC,qBAAEA,EAAoBoY,UAAEA,EAAS3B,WAAEA,EAAU9E,OAAEA,EAAM+E,UAAEA,GAAc1X,GACrGiB,cAAEA,EAAaT,WAAEA,EAAUM,uBAAEA,GAA2BQ,EAC9Dwb,EAAcjD,gBAAkBA,GAAmBA,IAAoBta,GACvE,MAAMwpB,IAActR,GAAe9E,GAAW+E,GAAcoF,EAAcjD,iBAI1E,IAAIO,EAHJ0C,EAAc/b,eAAiBgoB,IAAehoB,GAAkBA,IAAkBxB,IAAmB+B,EAAOP,eAC5G+b,EAAchD,QAAUgD,EAAc/b,eAAiBE,EAAgBA,EAAcmY,GAAa,GAClGpZ,EAAQgB,qBAAuBA,GAAyBA,IAAyBzB,IAAmB+B,EAAON,qBAE3G,MAAM0Y,EAAagE,GAAKsL,MAAKtP,IAAeA,EAAWO,OACvD,GAAIP,EACHmE,GAAsBnE,GACtBU,EAAS,IAAIX,GAAYC,EAAYrF,EAAQyI,EAAe/C,QACtD,GAAI2D,GAAKl2B,OAASgZ,EAAY,CACpC,MAAMkZ,EAAa,CAAEkE,gBACrBA,KACAF,GAAK/S,KAAK+O,GACVU,EAAS,IAAIX,GAAYC,EAAYrF,EAAQyI,EAAe/C,EAC9D,MACEK,QAAe,IAAIrH,SAAQC,GAAW2K,GAAgBhT,KAAK,CAAEqI,UAASqB,SAAQyI,oBAE/E,OAAO1C,EAAOa,MAEd,SAASlB,EAAeL,GACvB,GAAIiE,GAAgBn2B,OAAQ,CAC3B,OAAOwrB,QAAEA,EAAOqB,OAAEA,EAAMyI,cAAEA,IAAmBa,GAAgBzR,OAAO,EAAG,GACvE8G,EAAQ,IAAIyG,GAAYC,EAAYrF,EAAQyI,EAAe/C,GAC9D,MAAaL,EAAWU,QACrByD,GAAsBnE,GAClBuP,OAAOC,SAASpoB,IAA2BA,GAA0B,IACxE4Y,EAAWoE,iBAAmBqL,YAAW,KACxCzL,GAAOA,GAAK0L,QAAO/f,GAAQA,GAAQqQ,IACnCA,EAAWS,WAAW,GACpBrZ,KAGJ4c,GAAOA,GAAK0L,QAAO/f,GAAQA,GAAQqQ,GAEpC,CACF,CK6U4B4B,CAAU,CAAEzD,WAAU8B,YAAYmD,GAC3D,CAAC,MAAOpJ,GACR,IAAKb,GAAqBa,EAAMhN,SAAWwK,GAC1C,MAAMwC,CAEV,CAAY,QACT,MAAM0H,EAAesK,GAAeuC,EAAUjoB,EAAS,gBACvD2Z,EAASviB,MAAQ0xB,EACZ1N,GAAiBzB,EAAS0P,cACxB1P,EAASuC,OAEhB,CACD,OAAOrJ,OAAoBrT,EAAYoc,EAAOqD,QAAUrD,EAAOqD,UAAYtF,CAC3E,EAGF,SAASoM,GAAiBe,EAAWwB,EAAUhf,GAC9C,MAAMggB,EAAaxC,EAAUwC,WAAaxE,GAAUwD,EAAUhf,EAAS,GACjEoO,EnBxYmB,MmBwYN4R,GACblB,EAAiBhQ,GAAUkQ,EAAUhf,EAAS,GACpD/H,OAAOC,OAAOslB,EAAW,CACxBpP,YACA6R,QAASzE,GAAUwD,EAAUhf,GAC7B4c,QAAS,CACRz3B,OnB7YmB,EmB6YX66B,IAA+B,EACvCT,enB7Y6B,MmB6YZS,GACjBtD,qBnB7YgC,YmB6YTsD,IAExBlB,iBACAoB,YAAaC,GAAQrB,GACrB/B,eAAgBvB,GAAUwD,EAAUhf,EAAS,IAC7Cgd,iBAAkBxB,GAAUwD,EAAUhf,EAAS,KAEjD,CAEA6J,eAAesU,GAAiB5B,EAAWiB,EAAWwB,EAAUhf,GAC/D,MAAM+d,cAAEA,GAAkBP,EACpB4C,EAAa5C,EAAU4C,WAAa,IAAIC,IACxCC,EAAoBxF,GAAY,IAAIjvB,WAAWkyB,IACrD,IAAIwC,EAAmB,EACvB,IACC,KAAOA,EAAmBxC,EAAc7/B,QAAQ,CAC/C,MAAMuhB,EAAO+b,GAAU8E,EAAmBC,GACpCzyB,EAAO0tB,GAAU8E,EAAmBC,EAAmB,GAC7DH,EAAWv3B,IAAI4W,EAAM,CACpBA,OACAM,KAAMge,EAAcnd,MAAM2f,EAAmB,EAAGA,EAAmB,EAAIzyB,KAExEyyB,GAAoB,EAAIzyB,CACxB,CACD,CAAC,MAAOuJ,GAER,CACD,MAAMwnB,EAAoBrD,GAAUwD,EAAUhf,EAAS,GACvD/H,OAAOC,OAAOslB,EAAW,CACxB5S,UAAWkE,GAAUkQ,EAAUhf,EAAS,IACxC4d,iBAAkB9O,GAAUkQ,EAAUhf,EAAS,IAC/C2d,eAAgB7O,GAAUkQ,EAAUhf,EAAS,MAE9C,MAAMwgB,EAAkBJ,EAAW1uB,InBzbN,GmB0bzB8uB,KAiCL,SAA6BA,EAAiBhD,GAC7CA,EAAUiD,OAAQ,EAClB,MAAMC,EAAiB5F,GAAY0F,EAAgBzgB,MAC7C4gB,EAAoB1G,GAAiB6F,QAAO,EAAEtnB,EAAchY,KAASg9B,EAAUhlB,IAAiBhY,IACtG,IAAK,IAAIogC,EAAuB,EAAG5gB,EAAS,EAAG4gB,EAAuBD,EAAkBziC,OAAQ0iC,IAAwB,CACvH,MAAOpoB,EAAchY,GAAOmgC,EAAkBC,GAC9C,GAAIpD,EAAUhlB,IAAiBhY,EAAK,CACnC,MAAMqgC,EAAa3G,GAAiB15B,GACpCg9B,EAAUhlB,GAAgBgoB,EAAgBhoB,GAAgBqoB,EAAW1G,SAASuG,EAAgB1gB,GAC9FA,GAAU6gB,EAAWpf,KACxB,MAAS,GAAI+e,EAAgBhoB,GAC1B,MAAM,IAAID,MAAMqhB,GAEjB,CACF,CA9CEkH,CAAoBN,EAAiBhD,GACrCA,EAAUgD,gBAAkBA,GAE7B,MAAMO,EAAwBX,EAAW1uB,InBzbL,OmB0bhCqvB,UACGC,GAAsBD,EAAuBrI,GAAwBC,GAA4B6E,EAAWjB,GAClHiB,EAAUuD,sBAAwBA,GAEnC,MAAME,EAA2Bb,EAAW1uB,InB7bL,OmB8bnCuvB,UACGD,GAAsBC,EAA0BrI,GAAuBC,GAA2B2E,EAAWjB,GACnHiB,EAAUyD,yBAA2BA,GAEtC,MAAMrC,EAAgBwB,EAAW1uB,InBvcN,OmBwcvBktB,IAoDL,SAA2BA,EAAepB,EAAWqB,GACpD,MAAM6B,EAAiB5F,GAAY8D,EAAc7e,MAC3C6J,EAAW6T,GAASiD,EAAgB,GAC1CzoB,OAAOC,OAAO0mB,EAAe,CAC5BsC,cAAezD,GAASiD,EAAgB,GACxCS,SAAU1D,GAASiD,EAAgB,GACnC9W,WACAqV,0BAA2BJ,EAC3BA,kBAAmBrD,GAAUkF,EAAgB,KAE9ClD,EAAUqB,kBAAoBD,EAAcC,iBAC7C,CA9DEuC,CAAkBxC,EAAepB,EAAWqB,GAC5CrB,EAAUoB,cAAgBA,GAE1BpB,EAAUqB,kBAAoBA,EAE/B,MAAMwC,EAAiBjB,EAAW1uB,InB7cN,ImB8cxB2vB,KA0DL,SAA4BA,EAAgB7D,GAC3C,MAAMkD,EAAiB5F,GAAYuG,EAAethB,MAClD,IACIuhB,EADAf,EAAmB,EAEvB,IACC,KAAOA,EAAmBc,EAAethB,KAAK7hB,SAAWojC,GAAU,CAClE,MAAMC,EAAW/F,GAAUkF,EAAgBH,GACrCiB,EAAgBhG,GAAUkF,EAAgBH,EAAmB,GAC/DgB,GAAYvrB,KACfsrB,EAAWD,EAAethB,KAAKa,MAAM2f,EAAmB,EAAGA,EAAmB,EAAIiB,IAEnFjB,GAAoB,EAAIiB,CACxB,CACD,CAAC,MAAOnqB,GAER,CACD,IACC,GAAIiqB,GAA+B,IAAnBA,EAASpjC,OAAc,CACtC,MAAMujC,EAAW3G,GAAYwG,GACvBxC,EAAiB2C,EAASrH,aAAa,GAAG,GAC1CsH,EAAoBD,EAASrH,aAAa,GAAG,GAC7CuH,EAAkBF,EAASrH,aAAa,IAAI,GAClDniB,OAAOC,OAAOmpB,EAAgB,CAC7BvC,iBACA4C,oBACAC,oBAED,MAAMzB,EAAc0B,GAAY9C,GAC1BI,EAAiB0C,GAAYF,GAE7BG,EAAiB,CAAE3B,cAAahB,iBAAgBC,aADjCyC,GAAYD,IAEjC1pB,OAAOC,OAAOmpB,EAAgBQ,GAC9B5pB,OAAOC,OAAOslB,EAAWqE,EACzB,CACD,CAAC,MAAOxqB,GAER,CACF,CA9FEyqB,CAAmBT,EAAgB7D,GACnCA,EAAU6D,eAAiBA,GAE5B,MAAMU,EAA8B3B,EAAW1uB,InBhdL,OmBidtCqwB,KA4FL,SAAyCA,EAA6BvE,GACrE,MAAMkD,EAAiB5F,GAAYiH,EAA4BhiB,MACzDiiB,EAAQvE,GAASiD,EAAgB,GACjCuB,EAAiB,GACjBC,EAAoB,GACL,IAAR,EAARF,KACJC,EAAe5gB,KAAK6X,IACpBgJ,EAAkB7gB,KAAK8X,KAEH,IAAR,EAAR6I,KACJC,EAAe5gB,KAAK+X,IACpB8I,EAAkB7gB,KAAKgY,KAEH,IAAR,EAAR2I,KACJC,EAAe5gB,KAAKiY,IACpB4I,EAAkB7gB,KAAKkY,KAExB,IAAIvZ,EAAS,EACbiiB,EAAevI,SAAQ,CAAClhB,EAAc2pB,KACrC,GAAIJ,EAA4BhiB,KAAK7hB,QAAU8hB,EAAS,EAAG,CAC1D,MAAMoiB,EAAOtT,GAAU4R,EAAgB1gB,GACvCwd,EAAUhlB,GAAgBupB,EAA4BvpB,GAAgB,IAAI6pB,KAAY,IAAPD,GAC/E,MAAME,EAAkBJ,EAAkBC,GAC1CJ,EAA4BO,GAAmBF,CAC/C,CACDpiB,GAAU,CAAC,GAEb,CAtHEuiB,CAAgCR,EAA6BvE,GAC7DA,EAAUuE,4BAA8BA,EAE1C,CAkBAlY,eAAemX,GAAsBwB,EAAmBhqB,EAAc8pB,EAAiB9E,EAAWjB,GACjG,MAAMmE,EAAiB5F,GAAY0H,EAAkBziB,MAC/CG,EAAQ,IAAIL,GAClBK,EAAMjJ,OAAOslB,EAAU+F,IACvB,MAAMpT,EAAoB4L,GAAY,IAAIjvB,WAAW,IACrDqjB,EAAkB7O,UAAU,EAAGH,EAAMxO,OAAO,GAC5CuG,OAAOC,OAAOsqB,EAAmB,CAChCvC,QAASxC,GAASiD,EAAgB,GAClC9V,UAAWkE,GAAU4R,EAAgB,GACrCloB,CAACA,SAAqB2f,GAAWqK,EAAkBziB,KAAKjX,SAAS,IACjE25B,OAAQlG,EAAUK,QAAQF,sBAAwB8F,EAAkB5X,WAAakE,GAAUI,EAAmB,KAE3GsT,EAAkBC,QACrBjF,EAAUhlB,GAAgBgqB,EAAkBhqB,GAC5CglB,EAAUhlB,EAAe,SAAU,EAErC,CAyGA,SAAS4jB,GAAe9B,EAAW5jB,EAASsR,GAC3C,OAAOtR,EAAQsR,KAAU/R,GAAkBqkB,EAAU5jB,QAAQsR,GAAQtR,EAAQsR,EAC9E,CAEA,SAASmY,GAAQuC,GAChB,MAAMC,GAAkB,WAAVD,IAAyB,GAAIN,EAAiB,MAAVM,EAClD,IACC,OAAO,IAAIL,KAAK,OAAgB,MAAPM,IAAkB,KAAa,IAAPA,IAAkB,GAAK,EAAU,GAAPA,GAAuB,MAAPP,IAAkB,IAAY,KAAPA,IAAkB,EAAqB,GAAV,GAAPA,GAAoB,EAC5J,CAAC,MAAO/qB,GAER,CACF,CAEA,SAASuqB,GAAYc,GACpB,OAAO,IAAIL,KAAM1C,OAAQ+C,EAAUE,OAAO,KAAUA,OAAO,cAC5D,CAEA,SAASnF,GAAS5C,EAAM7a,GACvB,OAAO6a,EAAK4C,SAASzd,EACtB,CAEA,SAASwb,GAAUX,EAAM7a,GACxB,OAAO6a,EAAKW,UAAUxb,GAAQ,EAC/B,CAEA,SAAS8O,GAAU+L,EAAM7a,GACxB,OAAO6a,EAAK/L,UAAU9O,GAAQ,EAC/B,CAEA,SAASoa,GAAaS,EAAM7a,GAC3B,OAAO2f,OAAO9E,EAAKT,aAAapa,GAAQ,GACzC,CAMA,SAAS8a,GAAY/8B,GACpB,OAAO,IAAIoiB,SAASpiB,EAAMqiB,OAC3B,CCvpBA,IAAI/H,GACJ,IACCA,eAAsBkb,GACvB,CAAE,MAAOlc,GAET,CACAc,GAAU,CAAEE,aCxCZ,SAAWnJ,GAAG,MAAMC,EAAE,IAAIukB,IAAImP,gBAAgB,IAAIC,KAAK,CAAC,in3CAAin3C,CAACrjB,KAAK,qBAAqBvQ,EAAE,CAACyI,cAAc,CAACnC,QAAQ,CAACrG,GAAGjD,QAAQ,CAACiD,KAAK,CDyChv3C4zB,CAAmB5qB,IELnBA,GAAU,CAAE3U,QxB65DZ,SAAoBkT,GACnB,MACM/G,EAAI,IAAInC,EACRw1B,GAoE2BpF,EApEQlnB,GAAWA,EAAQa,UAAYb,EAAQa,UAAY,OAqEjE,GAAKlX,KAAKC,MAAMs9B,EAAmB,OAAS,GADxE,IAAkCA,EAnEjC,MAAMrxB,EAAQ/O,EACRiL,EAAM,IAAIoD,WAAWm3B,GAC3B,IAAI79B,EAAQuR,EAAUA,EAAQvR,MAAQ5H,OAClB,IAAT4H,IACVA,EAAQ5H,GACToS,EAAEpE,YAAYpG,GACdwK,EAAEhD,SAAWlE,EATA3J,KAWRmY,OAAS,SAAU8I,EAAMqR,GAC7B,IAAInlB,EAAKlO,EAAOklC,EAAY,EAAGC,EAAc,EAAGC,EAAa,EAC7D,MAAMC,EAAU,GAChB,GAAKrjB,EAAK7hB,OAAV,CAEAyR,EAAElC,cAAgB,EAClBkC,EAAE/C,QAAUmT,EACZpQ,EAAE5F,SAAWgW,EAAK7hB,OAClB,EAAG,CAIF,GAHAyR,EAAEjC,eAAiB,EACnBiC,EAAE9C,UAAYm2B,EACd/2B,EAAM0D,EAAEzD,QAAQK,GACZN,GAAOvO,EACV,MAAM,IAAI6a,MAAM,cAAgB5I,EAAE3E,KAC/B2E,EAAEjC,iBACDiC,EAAEjC,gBAAkBs1B,EACvBI,EAAQ/hB,KAAK,IAAIxV,WAAWpD,IAE5B26B,EAAQ/hB,KAAK5Y,EAAImY,MAAM,EAAGjR,EAAEjC,kBAC9By1B,GAAcxzB,EAAEjC,eACZ0jB,GAAczhB,EAAElC,cAAgB,GAAKkC,EAAElC,eAAiBw1B,IAC3D7R,EAAWzhB,EAAElC,eACbw1B,EAAYtzB,EAAElC,cAElB,OAAWkC,EAAE5F,SAAW,GAAqB,IAAhB4F,EAAE9C,WAU7B,OATIu2B,EAAQllC,OAAS,GACpBH,EAAQ,IAAI8N,WAAWs3B,GACvBC,EAAQ1J,SAAQ,SAAU5iB,GACzB/Y,EAAM8K,IAAIiO,EAAOosB,GACjBA,GAAepsB,EAAM5Y,MACzB,KAEGH,EAAQqlC,EAAQ,IAAM,IAAIv3B,WAEpB9N,CA9BC,CA+BV,EA9Cce,KA+CRyN,MAAQ,WACZ,IAAIN,EAAKlO,EAAOmlC,EAAc,EAAGC,EAAa,EAC9C,MAAMC,EAAU,GAChB,EAAG,CAIF,GAHAzzB,EAAEjC,eAAiB,EACnBiC,EAAE9C,UAAYm2B,EACd/2B,EAAM0D,EAAEzD,QAAQzO,GACZwO,GAAOtO,GAAgBsO,GAAOvO,EACjC,MAAM,IAAI6a,MAAM,cAAgB5I,EAAE3E,KAC/Bg4B,EAAUrzB,EAAE9C,UAAY,GAC3Bu2B,EAAQ/hB,KAAK5Y,EAAImY,MAAM,EAAGjR,EAAEjC,iBAC7By1B,GAAcxzB,EAAEjC,cACnB,OAAWiC,EAAE5F,SAAW,GAAqB,IAAhB4F,EAAE9C,WAO7B,OANA8C,EAAE5D,aACFhO,EAAQ,IAAI8N,WAAWs3B,GACvBC,EAAQ1J,SAAQ,SAAU5iB,GACzB/Y,EAAM8K,IAAIiO,EAAOosB,GACjBA,GAAepsB,EAAM5Y,MACxB,IACSH,CACT,CACA,EwBl+DqB+W,QvBmhErB,SAAoB4B,GACnB,MACM/G,EAAI,IAAInC,GACRw1B,EAAUtsB,GAAWA,EAAQa,UAAYlX,KAAKC,MAA0B,EAApBoW,EAAQa,WAAiB,OAE7E9O,EAAM,IAAIoD,WAAWm3B,GAC3B,IAAIK,GAAc,EAElB1zB,EAAE4F,cACF5F,EAAEhD,SAAWlE,EARA3J,KAURmY,OAAS,SAAU8I,EAAMqR,GAC7B,MAAMgS,EAAU,GAChB,IAAIn3B,EAAKlO,EAAOklC,EAAY,EAAGC,EAAc,EAAGC,EAAa,EAC7D,GAAoB,IAAhBpjB,EAAK7hB,OAAT,CAEAyR,EAAElC,cAAgB,EAClBkC,EAAE/C,QAAUmT,EACZpQ,EAAE5F,SAAWgW,EAAK7hB,OAClB,EAAG,CAQF,GAPAyR,EAAEjC,eAAiB,EACnBiC,EAAE9C,UAAYm2B,EACM,IAAfrzB,EAAE5F,UAAqBs5B,IAC3B1zB,EAAElC,cAAgB,EAClB41B,GAAc,GAEfp3B,EAAM0D,EAAE6F,QA1hEQ,GA2hEZ6tB,GAAgBp3B,IAAQpO,GAC3B,GAAmB,IAAf8R,EAAE5F,SACL,MAAM,IAAIwO,MAAM,6BACX,GAAItM,IAAQvO,GAAQuO,IAAQtO,EAClC,MAAM,IAAI4a,MAAM,cAAgB5I,EAAE3E,KACnC,IAAKq4B,GAAep3B,IAAQtO,IAAkBgS,EAAE5F,WAAagW,EAAK7hB,OACjE,MAAM,IAAIqa,MAAM,wBACb5I,EAAEjC,iBACDiC,EAAEjC,iBAAmBs1B,EACxBI,EAAQ/hB,KAAK,IAAIxV,WAAWpD,IAE5B26B,EAAQ/hB,KAAK5Y,EAAImY,MAAM,EAAGjR,EAAEjC,kBAC9By1B,GAAcxzB,EAAEjC,eACZ0jB,GAAczhB,EAAElC,cAAgB,GAAKkC,EAAElC,eAAiBw1B,IAC3D7R,EAAWzhB,EAAElC,eACbw1B,EAAYtzB,EAAElC,cAElB,OAAWkC,EAAE5F,SAAW,GAAqB,IAAhB4F,EAAE9C,WAU7B,OATIu2B,EAAQllC,OAAS,GACpBH,EAAQ,IAAI8N,WAAWs3B,GACvBC,EAAQ1J,SAAQ,SAAU5iB,GACzB/Y,EAAM8K,IAAIiO,EAAOosB,GACjBA,GAAepsB,EAAM5Y,MACzB,KAEGH,EAAQqlC,EAAQ,IAAM,IAAIv3B,WAEpB9N,CAvCC,CAwCV,EAtDce,KAuDRyN,MAAQ,WACZoD,EAAE2F,YACJ,CACA,IwBxmEA,IAAYguB,IAAZ,SAAYA,GACRA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,QAAA,GAAA,SACH,CAJD,CAAYA,KAAAA,GAIX,CAAA,IAUD,IAAIC,GAAaD,GAAWE,OAEZ,SAAAC,MAAY1jB,GACpBwjB,IAAc,GACdG,QAAQC,OAAO5jB,EAEvB,CAEgB,SAAA6jB,MAAc7jB,GACtBwjB,IAAc,GACdG,QAAQC,OAAO5jB,EAEvB,CAUM,SAAU8jB,GAAc1+B,GAC1Bo+B,GAAap+B,CACjB,CASM,SAAU2+B,GAAiBzO,GAC7B,OAAO,IAAI5L,SAAQ,CAACC,EAAS0I,KACzB,IAAIC,EAAS,IAAI2D,WACjB3D,EAAO4D,OAAS,KACZvM,EAAQ2I,EAAOniB,OAAuB,EAE1CmiB,EAAO6D,QAAU,KACb9D,EAAOC,EAAOjI,MAAM,EAGxBiI,EAAO0R,kBAAkB1O,EAAK,GAEtC,CAQOxL,eAAema,GAClBC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,GAAY,IAAIjC,MAAOkC,UACvBC,GAAO,EAEXP,EAAWC,EAAQC,EAAM,GACzB,IAAIM,EAAkB,WAClB,IAAIC,EACAC,EAAaL,EAAYF,EAE7B,GACIM,GAAM,IAAIrC,MAAOkC,UACjBN,EAAWC,EAAQC,GAAOO,EAAMJ,GAAaF,SAtB9C,IAAI3a,SAAQ,CAACC,EAASkb,KACzBC,OAAOC,sBAAsBpb,EAAQ,WAuB3B8a,GAAQE,EAAMC,EAC3B,EATqB,SAWhBlb,QAAQsb,KAAK,CAACN,EAAiBJ,IACrCG,GAAO,QACDC,QACAJ,EAENJ,EAAWC,EAAQC,EAAM,EAC7B,CAGM,MAAOa,WAAqBzsB,MAG9BjC,YAAY2uB,GACRruB,MAAM,cAAcquB,iBACpBnmC,KAAKkpB,KAAO,eACZlpB,KAAKmmC,QAAUA,CAClB,EA6DEpb,eAAeqb,GAClB9G,EACA9L,EACA5b,GAEA,IACI,aAAa0nB,EAAMzI,QAASrD,EAAQ5b,EACvC,CAAC,MAAOxH,GACL,MACIA,aAAai2B,eACF,UAAXj2B,EAAEuQ,MACW,OAAbvQ,EAAEie,OAEKje,EAAEie,OAAe/C,MAElBlb,CAEb,CACL,CAGO2a,eAAeub,GAClBhH,EACA1nB,GAEA,IAAI4b,EAAS,IAAI8D,GAEjB,aADM8O,GAAW9G,EAAO9L,EAAQ5b,IACzB,IAAI6hB,aAAcC,aAAalG,EAAOqD,UACjD,CC1MA,MAAM0P,GAAa,WAEbC,GAAgB,EAChBC,GAAgB,EACTC,GAAmB,GAC1BC,GAAoB,GAKpB,MAAOC,WAAmBntB,MAC5BjC,YAAY8G,GACRxG,MAAMwG,GACNte,KAAKkpB,KAAO,YACf,EAQL,IAAY2d,GCVPC,IDUL,SAAYD,GACRA,EAAAA,EAAA,IAAA,OAAA,MACAA,EAAAA,EAAA,KAAA,OAAA,OACAA,EAAAA,EAAA,KAAA,OAAA,OACAA,EAAAA,EAAA,MAAA,OAAA,OACH,CALD,CAAYA,KAAAA,GAKX,CAAA,IAiBD,MAAME,GAIFvvB,YAAYmJ,EAAe,IACvB3gB,KAAK2gB,KAAOA,EACZ3gB,KAAKu2B,KAAO,IAAIyN,KAAK,GAAI,CAAErjB,KAAM3gB,KAAK2gB,MACzC,CAEDxI,OAAOoe,GACHv2B,KAAKu2B,KAAO,IAAIyN,KAAK,CAAChkC,KAAKu2B,KAAMA,GAAO,CAAE5V,KAAM3gB,KAAK2gB,MACxD,CAEDqmB,UACI,OAAOhnC,KAAKu2B,IACf,EASC,SAAU0Q,GAAgB3lB,GAC5B,IAAIya,EAAO,IAAI1a,SAASC,GAGxB,GADYya,EAAK/L,UAAU,GAAG,KAChBuW,GACV,OAAO,KAIX,IAAIW,EAAQnL,EAAKW,UAAU,GAAG,GAC1ByK,EAAQpL,EAAKW,UAAU,GAAG,GAC9B,GAAIwK,IAAUV,IAAiBW,EAAQV,GACnC,MAAM,IAAIG,GACN,oCAAoCM,KAASC,KAIrD,IAAIC,EAAcrL,EAAKW,UAAU,GAAG,GAChC2K,EAAetL,EAAKW,UAAU,IAAI,GACtC,GACI0K,IAAgBV,IAChBW,IAAiBV,GAEjB,MAAM,IAAIC,GACN,4BAA4BQ,wBAAkCC,KAItE,IAAIlkB,EAAY4Y,EAAK/L,UAAU,IAAI,GACnC,GAAI7M,EAAY,GAAM,EAClB,MAAM,IAAIyjB,GAAW,cAAczjB,4BAGvC,MAAO,CACHA,UAAWA,EACXhN,OAAQ4lB,EAAK/L,UAAU,IAAI,GAC3BsX,OAAQvL,EAAK/L,UAAU,IAAI,GAC3B5O,MAAO2a,EAAK/L,UAAU,IAAI,GAElC,CAEA,SAASuX,GAAiBjmB,GACtB,IAAIya,EAAO,IAAI1a,SAASC,GAIxB,MAAO,CACHX,KAAMob,EAAKW,UAAU,GAAG,GAExBvmB,OAAQ4lB,EAAK/L,UAAU,GAAG,GAC1BwX,UAAWzL,EAAK/L,UAAU,GAAG,GAAQ2W,GACrC1lB,KAAM,KAEd,CAEA,SAASwmB,GAAoBH,GACzB,OAAOA,EACFnoC,KAAK6Y,GAAUA,EAAM7B,SACrB3W,QAAO,CAACkoC,EAAOh/B,IAAMg/B,EAAQh/B,GAAG,EACzC,CAcAqiB,eAAe4c,GAAY79B,EAAsBw9B,GAC7C,IAAIM,EAAc,IAAIb,GAElBzlB,EAAS,IAAIwG,YAAY4e,IACzBxG,EAAW,IAAI7e,SAASC,GACxBumB,EAAY,IAAI96B,WAAWuU,GAE/B4e,EAAS3e,UAAU,EAAGglB,IAAY,GAElCrG,EAAS4H,UAAU,EAAGtB,IAAe,GACrCtG,EAAS4H,UAAU,EAAGrB,IAAe,GACrCvG,EAAS4H,UAAU,EAAGpB,IAAkB,GACxCxG,EAAS4H,UAAU,GAAInB,IAAmB,GAG1CzG,EAAS3e,UAAU,GAAIzX,EAAOqZ,WAAW,GACzC+c,EAAS3e,UAAU,GAAIzX,EAAOqM,QAAQ,GACtC+pB,EAAS3e,UAAU,GAAI+lB,EAAOloC,QAAQ,GAKtC8gC,EAAS3e,UAAU,GAAI,GAAG,GAE1BqmB,EAAYzvB,OAAO,IAAI6rB,KAAK,CAAC1iB,KAC7B,IAAK,IAAItJ,KAASsvB,EAAQ,CACtBhmB,EAAS,IAAIwG,YAAY6e,GAAoB3uB,EAAMiJ,KAAMjS,MACzDkxB,EAAW,IAAI7e,SAASC,GACxBumB,EAAY,IAAI96B,WAAWuU,GAE3B4e,EAAS4H,UAAU,EAAG9vB,EAAM2I,MAAM,GAClCuf,EAAS4H,UAAU,EAAG,GAAG,GACzB5H,EAAS3e,UAAU,EAAGvJ,EAAM7B,QAAQ,GACpC+pB,EAAS3e,UACL,EACAolB,GAAoB3uB,EAAMiJ,KAAMjS,MAChC,GAGJ,IAAI+4B,EAAiB,IAAIh7B,iBAAiBi7B,GAAwBhwB,EAAMiJ,OACxE4mB,EAAU99B,IAAIg+B,EAAgBpB,IAC9BiB,EAAYzvB,OAAO,IAAI6rB,KAAK,CAAC1iB,IAChC,CAED,OAAOsmB,EAAYZ,SACvB,EC9KA,SAAKF,GACDA,EAAAA,EAAA,kBAAA,GAAA,oBACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,0BAAA,GAAA,4BACAA,EAAAA,EAAA,iBAAA,GAAA,mBACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,iBAAA,GAAA,kBACH,CATD,CAAKA,KAAAA,GASJ,CAAA,IA8ID,MAAMmB,GAGFzwB,YACa0wB,EACAC,GADAnoC,KAAUkoC,WAAVA,EACAloC,KAAQmoC,SAARA,EAET,IAAIC,EAAa,EACjB,IAAK,IAAIC,KAAOF,EACZ,GAAIE,EAAI1nB,OAASmmB,GAAYwB,MAAO,CAChC,IAAIC,EAAWF,EAEfD,GADYF,EAAWt1B,IAAI21B,EAASC,UAChB1J,gBACvB,CAEL9+B,KAAKyoC,gBAAkBL,CAC1B,CAEDM,mBAAmBR,GACf,IAAIS,EAAcT,EAAWt1B,IAAI,cAC7Bg2B,QAAqBC,GAA2BF,GACpDG,GAAgB,gBAAkBF,GAClC,IAAIG,EAAwBH,EAAazP,MAAM,MAE3CgP,EAAsB,GAC1B,IAAK,IAAIa,KAAQD,EAAa,CAC1B,GAAoB,IAAhBC,EAAK5pC,QAAgB4pC,EAAK9X,WAAW,KACrC,SAGJ,IAEImX,EACAY,EAHAC,EAASF,EAAK7P,MAAM,KACpBjQ,EAAOggB,EAAO,GAGlB,OAAQhgB,GACJ,IAAK,qBACDmf,EAAM,CACF1nB,KAAMmmB,GAAYqC,kBAClBX,SAAUU,EAAO,IAErBD,EAAY,EACZ,MACJ,IAAK,YACDZ,EAAM,CACF1nB,KAAMmmB,GAAYsC,SAClBC,QAASH,EAAO,GAChBI,cAAeJ,EAAO,IAE1BD,EAAY,EACZ,MACJ,IAAK,QACDZ,EAAM,CACF1nB,KAAMmmB,GAAYyC,MAClBC,UAAWN,EAAO,IAEtBD,EAAY,EACZ,MACJ,IAAK,QACD,IAAIV,EAAW,CACX5nB,KAAMmmB,GAAYwB,MAClBkB,UAAWN,EAAO,GAClBV,SAAUU,EAAO,IAGrB,GADAb,EAAME,EACFW,EAAO9pC,OAAS,EAAG,CACnB,GAAkB,eAAd8pC,EAAO,GAGP,MAAM,IAAIzvB,MAAM,oBAAsBuvB,GAFtCT,EAASkB,KAAOC,GAAcC,MAIlCV,EAAY,CACf,MACGV,EAASkB,KAAOC,GAAcE,QAC9BX,EAAY,EAEhB,MACJ,IAAK,+BACDZ,EAAM,CACF1nB,KAAMmmB,GAAY+C,2BAEtBZ,EAAY,EACZ,MACJ,IAAK,oBACDZ,EAAM,CACF1nB,KAAMmmB,GAAYgD,kBAEtBb,EAAY,EACZ,MACJ,IAAK,UACDZ,EAAM,CACF1nB,KAAMmmB,GAAYiD,OAClBC,QAAShB,EAAKiB,UAAU/gB,EAAK9pB,OAAS,IAE1C6pC,EAAYC,EAAO9pC,OACnB,MACJ,IAAK,qBACDipC,EAAM,CACF1nB,KAAMmmB,GAAYoD,kBAEtBjB,EAAY,EACZ,MACJ,QACI,MAAM,IAAIxvB,MAAM,mBAAqBuvB,GAE7C,GAAIE,EAAO9pC,SAAW6pC,EAClB,MAAM,IAAIxvB,MAAM,mBAAmBuvB,KAEvCb,EAAS5lB,KAAK8lB,EACjB,CAED,OAAO,IAAIJ,GAAYC,EAAYC,EACtC,ECrQL,SAASgC,GAAW9mC,EAAe2L,GAC/B,OAAO3L,EAAQ,EACX9B,KAAKG,IAAI2B,EAAQ2L,EAAM,GACvBzN,KAAK40B,IAAI9yB,EAAO2L,EACxB,CAEA,MAAMo7B,WAA4BrU,GAI9Bve,YAAY+e,EAAY8T,GACpBvyB,MAAMye,GAENv2B,KAAKu2B,KAAOA,EACZv2B,KAAKkhB,OAASmpB,EAAcnpB,OAASmpB,EAAcC,WACnDtqC,KAAKgP,KAAOq7B,EAAcxL,cAC7B,CAED9T,qBAAqB1nB,EAAejE,GAChC,MAAM2P,EAAQo7B,GAAW9mC,EAAOrD,KAAKgP,MAAQhP,KAAKkhB,OAC5CrN,EAAMs2B,GAAW9mC,EAAQjE,EAAQY,KAAKgP,MAAQhP,KAAKkhB,OACnDqV,EAAOv2B,KAAKu2B,KAAKzU,MAAM/S,EAAO8E,GACpC,OAAO,IAAI9G,iBAAiBwpB,EAAK1O,cACpC,EAOC,MAAO0iB,WAAwBxU,GAcjCve,YACI+e,EACA+I,EACAkL,EACA5yB,GAEAE,QAEA9X,KAAKu2B,KAAOA,EACZv2B,KAAKs/B,MAAQA,EACbt/B,KAAKwqC,WAAaA,EAClBxqC,KAAK4X,QAAUA,CAClB,CAEDmT,aACI,MAAMsf,QH6EPtf,eACHwL,EACA+I,GAEA,MAAMpe,EAASoe,EAAMpe,OACfupB,QACIlU,EAAKzU,MAAMZ,EAAQA,EArJK,IAqJmC2G,cAC/DqY,EAAW,IAAI7e,SAASopB,GAQ9B,MAAO,CACHvpB,SACA6e,kBATsBG,EAASxD,UAAU,GAAG,GAU5CmC,eATmBqB,EAASlQ,UAAU,IAAI,GAU1C8O,iBATqBoB,EAASlQ,UAAU,IAAI,GAU5Csa,WAnK8B,GA0JXpK,EAASxD,UAAU,IAAI,GACrBwD,EAASxD,UAAU,IAAI,GAUpD,CGnGoCgO,CAAiB1qC,KAAKu2B,KAAMv2B,KAAKs/B,OAE7D,GAAwC,IAApC+K,EAActK,kBAAyB,CACvC,MAAM4K,QAAwBvE,GAC1BpmC,KAAKs/B,MACL,IAAI7I,GAAWz2B,KAAKwqC,YACpBxqC,KAAK4X,SAET5X,KAAKuzB,OAAS,IAAI+C,GAAWqU,EAChC,MACG3qC,KAAKuzB,OAAS,IAAI6W,GAAoBpqC,KAAKu2B,KAAM8T,GAGrDrqC,KAAKgP,KAAOhP,KAAKuzB,OAAOvkB,IAC3B,CAED+b,qBAAqB1nB,EAAejE,GAChC,OAAOY,KAAKuzB,OAAQ2C,eAAe7yB,EAAOjE,EAC7C,EAQC,MAAOwrC,WAAsBxU,GAM/B5e,YACIiB,EACSoyB,EACAC,GAEThzB,QAHS9X,KAAQ6qC,SAARA,EACA7qC,KAAY8qC,aAAZA,EAPL9qC,KAAkB+qC,mBAAG,EAErB/qC,KAAYgrC,aAAG,EAQnBhrC,KAAKirC,aAAe,IAAIl+B,WAAW0L,EACtC,CAEDsS,WAAW/b,GACP,GAAIhP,KAAK8qC,eAAiB97B,EACtB,MAAM,IAAIyK,MAAM,SAASzK,uBAA0BhP,KAAK8qC,eAE/D,CAEO/f,qBAAqBphB,SACnB3J,KAAK6qC,SAASlhC,GACpB3J,KAAKgrC,cAAgBrhC,EAAImZ,UAC5B,CAEDiI,sBAAsB9rB,GAClB,IAAIisC,EAAW,EACf,MAAMC,EAAWlsC,EAAMG,OACjBgsC,EAAWprC,KAAKirC,aAAa7rC,OAEnC,KAAO8rC,EAAWC,GAAU,CACxB,MAAME,EAAWF,EAAWD,EAC5B,GAAIlrC,KAAK+qC,mBAAqB,GAAKM,EAAWD,EAAU,CACpD,MAAME,EAAWF,EAAWprC,KAAK+qC,mBACjC,GAAIO,GAAYD,EAAU,CACtBrrC,KAAKirC,aAAalhC,IACd9K,EAAM6iB,MAAMopB,EAAUA,EAAWI,GACjCtrC,KAAK+qC,oBAETG,GAAYI,EACZtrC,KAAK+qC,mBAAqB,QACpB/qC,KAAKurC,eAAevrC,KAAKirC,cAC/B,QACH,CACGjrC,KAAKirC,aAAalhC,IACd9K,EAAM6iB,MAAMopB,EAAUA,EAAWG,GACjCrrC,KAAK+qC,oBAETG,GAAYG,EACZrrC,KAAK+qC,oBAAsBM,EAC3B,KAEP,OACKrrC,KAAKurC,eAAetsC,EAAM6iB,MAAMopB,EAAUA,EAAWE,IAC3DF,GAAYE,CACf,CAED,GAAIprC,KAAKgrC,aAAehrC,KAAK+qC,mBAAqB/qC,KAAK8qC,aACnD,MAAM,IAAIrxB,MACN,uCAAuCzZ,KAAKgrC,oCACpBhrC,KAAK+qC,oCAAoC/qC,KAAK8qC,gBAK9C,IAA5B9qC,KAAK+qC,oBACL/qC,KAAKgrC,aAAehrC,KAAK+qC,qBAAuB/qC,KAAK8qC,eAErDnG,GACI,qCAAqC3kC,KAAK+qC,2CAA2C/qC,KAAK8qC,4BAExF9qC,KAAKurC,eAAevrC,KAAKirC,aAAanpB,MAAM,EAAG9hB,KAAK+qC,qBAC1D/qC,KAAK+qC,mBAAqB,EAEjC,CAEDhgB,gBACI,OAAO/qB,KAAKgrC,YACf,ECxJL,MAAMQ,GAAuB,CACzB,OACA,KACA,OACA,YACA,QACA,WACA,gBACA,gBACA,SACA,cACA,sBAIEC,GAAgB,CAClB,MACA,WACA,UACA,cACA,aACA,SACA,cACA,UAOSC,GAAkB,CAC3BC,KAAM,UACNC,OAAQ,YACRC,MAAO,UACPC,KAAM,SACNC,OAAQ,cAGNC,GAAyB,IAI/BjhB,eAAekhB,GACXC,EACA5M,EACA6F,EACAqE,GAEA,MAAMjT,QAAmB4V,GACrB7M,EACA,IAAI7I,GAAW,4BACf,CACIpE,QAAQqV,GACJoB,GAAgB,aAAaU,MAAc9B,YAC3CvC,EAAW,SAAUqE,EAAW,EAEnC,EACDlX,WAAW8Z,EAAkB1E,GACzBvC,EAAW,SAAUqE,EAAW4C,EAAW1E,EAE9C,IAIToB,GAAgB,YAAYU,KAC5BrE,EAAW,QAASqE,EAAW,SACzB0C,EAAOG,UAAU7C,EAAWjT,GAAO6V,IACrCjH,EAAW,QAASqE,EAAW4C,EAAS,GAEhD,CAEArhB,eAAeuhB,GACXJ,EACAvM,EACAwF,EACAoH,GAEA,IAAK,IAAIC,KAAaD,EAAY,CAC9B,IAAIE,EAAU,IAAIC,OAAO,GAAGF,oBACxBlN,EAAQK,EAAQiB,MAAMtB,GAAUA,EAAMJ,SAAS7zB,MAAMohC,KACzD,QAAcr1B,IAAVkoB,EACA,GAAiB,cAAbkN,EAA2B,CAC3B,IAAIG,QAAqBT,EAAOU,YAAY,gBAC5C,GAAoB,KAAhBD,QACMV,GAAeC,EAAQ5M,EAAO6F,EAAaqH,EAAY,YACvDN,EAAOW,WAAW,oBACrB,IAAoB,KAAhBF,EAIP,MAAM,IAAIG,GACN,OACA,2CALEb,GAAeC,EAAQ5M,EAAO6F,EAAaqH,EAAY,YACvDN,EAAOW,WAAW,eAM3B,CACJ,YAESZ,GAAeC,EAAQ5M,EAAO6F,EAAYqH,EAG3D,CACL,CAEOzhB,eAAegiB,GAAkBb,EAAwBc,GAE5D,IAAK,IAAIhE,KAAQgE,EAAYC,QAAQ,KAAM,IAAI9T,MAAM,MAAO,CACxD,IAAI9tB,EAAQ29B,EAAK39B,MAAM,0BACvB,IAAKA,EACD,SAGJ,IAAI6hC,EAAW7hC,EAAM,GAEJ,UAAb6hC,IACAA,EAAW,WAGf,IAAIC,EAAc9hC,EAAM,GACpB+hC,EAAqCD,EAAYhU,MAAM,KAG3D,GAAiB,qBAAb+T,EAAiC,CAIjC,IAAIG,QAAgBnB,EAAOU,YAAY,YAAYO,KACnD,GAAgB,QAAZE,GAAiC,OAAZA,EACrB,MAAM,IAAIP,GACN,OACA,eAAeI,KAAYC,oCAKnC,IACK3B,GAAqB8B,SAASH,KAC9B1B,GAAc6B,SAASH,GAExB,MAAM,IAAIL,GACN,OACA,eAAeI,KAAYC,mCAGtC,KAAM,CACH,IAAII,QAAkBrB,EAAOU,YAAYM,GAEzC,IAAIE,EAAaE,SAASC,GAInB,CACH,IAAIrhC,EAAM,eAAeghC,KAAYC,qBAA+BI,IAEpE,MADAzE,GAAgB58B,GACV,IAAI4gC,GAAc,OAAQ5gC,EACnC,CAPG48B,GACI,eAAeoE,KAAYC,WAOtC,CACJ,CACL,CAEOpiB,eAAeyiB,GAClBtB,EACA7d,EACAof,GAEA,UACUvB,EAAOH,OAAO1d,GAAQ,EAC/B,CAAC,MAAOje,GAER,OAEK87B,EAAOwB,eAAeD,EAChC,CAEO1iB,eAAe4iB,GAClBzB,EACA3V,EACAuV,EACA2B,EACAtI,EAAsC,EAClCyI,EACAC,EACAC,KAHkC,IAMtC3I,EAAW,OAAQ,UAAW,GAC9B,IAAI5R,EAAS,IAAIgI,GAAU,IAAIjF,GAAWC,IACtCoJ,QAAgBpM,EAAOwa,aAE3B,QAAyD32B,IAArDuoB,EAAQiB,MAAMxwB,GAAqB,eAAfA,EAAE8uB,WAEtB,kBFrKDnU,eACHmhB,EACA8B,EACAlC,EACA2B,EACAtI,EAAsC,EAClCyI,EACAC,EACAC,KAHkC,IAMtC,IAAI5F,EAAa,IAAI3G,IACrB,IAAK,IAAInxB,KAAK49B,EACV9F,EAAWn+B,IAAIqG,EAAE8uB,SAAU9uB,GAG/B,IAAI69B,QAAoBhG,GAAYiG,MAAMhG,GAEtCiG,EAAe,EACnB,IAAK,IAAIC,KAAQH,EAAY9F,SAAU,CACnC,IAAIkG,EAAgBF,EAAeF,EAAYxF,gBAC/C,OAAQ2F,EAAKztB,MACT,KAAKmmB,GAAYqC,kBAAmB,CAChC,IAAId,EAAM+F,EACN3Q,EAAYyK,EAAWt1B,IAAIy1B,EAAIG,gBAC7BuE,GACFb,QACMrD,GAA2BpL,IAErC,KACH,CACD,KAAKqJ,GAAYsC,SAAU,CACvB,IAAIf,EAAM+F,EACN/uC,QAAc6sC,EAAOU,YAAYvE,EAAIgB,SAEzC,GAAIhqC,IAAUgpC,EAAIiB,cACd,MAAM,IAAI7vB,MACN,uBAAuB4uB,EAAIgB,8BAA8BhB,EAAIiB,sBAAsBjqC,KAG3FypC,GACI,gBAAgBT,EAAIgB,cAAchB,EAAIiB,iBAE1C,KACH,CACD,KAAKxC,GAAYyC,MAAO,CACpB,IAAIlB,EAAM+F,EACVjJ,EAAW,OAAQkD,EAAImB,UAAW6E,GAE9BvC,GAA0B,mBAAlBzD,EAAImB,gBACN0C,EAAOW,WAAW,SAASxE,EAAImB,aAErCV,GACI,4BAA4BT,EAAImB,yCAGxC,KACH,CACD,KAAK1C,GAAYwB,MAAO,CACpB,IAAID,EAAM+F,EACN3Q,EAAYyK,EAAWt1B,IAAIy1B,EAAIG,UAE/B8F,EAAoBlC,IACpBjH,EACI,QACAkD,EAAIG,SACJ6F,EACIjC,GACK3O,EAAUqB,iBACPmP,EAAYxF,iBAC3B,QAGCyD,EAAOqC,cACTlG,EAAImB,UACJnB,EAAIoB,KACJhM,EACA6Q,GAGJH,GAAgB1Q,EAAUqB,iBAC1B,KACH,CACD,KAAKgI,GAAY+C,0BAA2B,CACxC,IAAIjlC,QAAesnC,EAAOU,YAAY,0BACvB,OAAXhoC,GAA8B,SAAXA,SACbsnC,EAAOW,WAAW,0BAE5B,KACH,CACD,KAAK/F,GAAYgD,iBACb3E,EAAW,SAAU,SAAUkJ,SACzBb,GAAUtB,EAAQ,aAAcuB,GACtC,MAEJ,KAAK3G,GAAYiD,OAAQ,CACrB,IAAI1B,EAAM+F,QACJlC,EAAOW,WAAWxE,EAAI2B,SAC5B,KACH,CACD,KAAKlD,GAAYoD,iBAAkB,CAC/B,IAAIsE,QAAgBtC,EAAOU,YAAY,sBACjCV,EAAOW,WAAW,cAAgB4B,GAAaD,IACrD,KACH,CACD,QACI,MAAM,IAAI/0B,MAAM,oBAAsB20B,EAAKztB,MAGtD,CACDmoB,GAAgB,2CACpB,CEqDc4F,CAAyBxC,EAAQvM,EAASmM,EAAM2B,EAAatI,GAKpB,cAAxC+G,EAAOU,YAAY,uBACpBV,EAAOH,OAAO,cAAc,EAAM0B,SAItCnB,GAAeJ,EAAQvM,EAASwF,EAAY,CAAC,qBAC7CwJ,GACFxJ,EACA,SACA,SACA6G,GACAwB,GAAUtB,EAAQ,aAAcuB,UAG9BnB,GAAeJ,EAAQvM,EAASwF,EAAY,CAAC,qBAC7CwJ,GACFxJ,EACA,SACA,SACA6G,GACAwB,GAAUtB,EAAQ,aAAcuB,UAI9BnB,GAAeJ,EAAQvM,EAASwF,EAAY,CAAC,gBAC7CwJ,GACFxJ,EACA,SACA,SACA6G,GACAwB,GAAUtB,EAAQ,aAAcuB,IAIpC,IAAImB,QAAuB1C,EAAOU,YAAY,0BACvB,OAAnBgC,GAA8C,SAAnBA,SACrB1C,EAAOW,WAAW,0BAI5B,IAAIvN,EAAQK,EAAQiB,MAAMxwB,GAAMA,EAAE8uB,SAAS7zB,MAAM,oBACjD,MAAMwjC,EAAc,IAAItT,GAAU,IAAIgP,GAClChU,EACA+I,EACA,kBACA,CACIjN,QAAQqV,GACJoB,GAAgB,mCAAmCpB,YACnDvC,EAAW,SAAU,SAAU,EAElC,EACD7S,WAAW8Z,EAAkB1E,GACzBvC,EAAW,SAAU,SAAUiH,EAAW1E,EAE7C,KAGHoH,QAAqBD,EAAYd,aAIvC,GADAzO,EAAQwP,EAAalO,MAAMxwB,GAAqB,qBAAfA,EAAE8uB,gBACrB9nB,IAAVkoB,EAAqB,CACrB,MAAMyP,QAAwB5C,GAAkB7M,EAAO,IAAIxI,UACrDiW,GAAkBb,EAAQ6C,EACnC,CAaD,SAVMzC,GACFJ,EACA4C,EACA3J,EACAqG,IAKJlM,EAAQwP,EAAalO,MAAMxwB,GAAqB,oBAAfA,EAAE8uB,gBACrB9nB,IAAVkoB,EAAqB,OACfqP,GACFxJ,EACA,SACA,SA5OkB,KA8OlB+G,EAAOH,OAAO,YAAY,EAAM0B,IAGpC,IAAIuB,QAAkB9C,EAAOU,YAAY,wBACpCoC,IACDA,EAAY,SAGhB,IAAIC,EAAcnD,EAAO,OAAS,QAClC3G,EAAW8J,EAAa,QAAS,GACjC,MAAMC,QAAwB/C,GAC1B7M,EACA,IAAI7I,GAAW,mCAEbyV,EAAOiD,OACTH,QACMhH,GAAwBkH,IAC7B9C,IACGjH,EAAW8J,EAAa,QAAS7C,EAAS,UAG5CF,EAAOW,WACT,gBAAgBmC,IAAYlD,EAAO,QAAU,KAEpD,OAGKQ,GAAeJ,EAAQ4C,EAAc3J,EAAYsG,IAKJ,cAAxCS,EAAOU,YAAY,uBACpB+B,GACFxJ,EACA,SACA,SACA6G,GACAE,EAAOH,OAAO,cAAc,EAAM0B,IAK1CnO,EAAQK,EAAQiB,MAAMxwB,GAAMA,EAAE8uB,SAASE,SAAS,uBAClChoB,IAAVkoB,UACM4M,EAAOW,WAAW,8BAClBZ,GAAeC,EAAQ5M,EAAO6F,EAAY,mBAIhD2G,SACM6C,GACFxJ,EACA,OACA,OAnSgB,IAqShB+G,EAAOW,WAAW,kBAG9B,CClWA,MAIMuC,GAAqB,MAYrB,MAAOC,WAAiB51B,MAC1BjC,YAAY8G,GACRxG,MAAMwG,GACNte,KAAKkpB,KAAO,UACf,EAOC,MAAO4jB,WAAsBrzB,MAI/BjC,YAAY5S,EAAgB0Z,GACxBxG,MAAM,2BAA2BlT,MAAW0Z,KAC5Cte,KAAK4E,OAASA,EACd5E,KAAKsvC,kBAAoBhxB,EACzBte,KAAKkpB,KAAO,eACf,QA+BQqmB,GAcT/3B,cACIxX,KAAKksC,OAAS,KACdlsC,KAAKwvC,KAAO,KACZxvC,KAAKyvC,MAAQ,KAEbzvC,KAAK0vC,yBAA0B,EAC/B1vC,KAAK2vC,gBAAkB,KACvB3vC,KAAK4vC,eAAiB,KACtB5vC,KAAK6vC,mBAAqB,IAC7B,CAKGC,kBACA,OACoB,OAAhB9vC,KAAKksC,QACLlsC,KAAKksC,OAAO6D,QACZ/vC,KAAKksC,OAAO8D,eAAe,GAAGC,WAAW,GAAGC,OAEnD,CAOOnlB,kCACJ,GAAoB,OAAhB/qB,KAAKksC,OACL,MAAM,IAAImD,GAAS,uCAIvB,IAAIc,EAAMnwC,KAAKksC,OAAQ8D,eAAe,GAAGC,WAAW,GAAGG,WAAW,GAClE,GAA6B,IAAzBD,EAAIE,UAAUjxC,OACd,MAAM,IAAIiwC,GAAS,2CAGvBrvC,KAAKwvC,KAAO,KACZxvC,KAAKyvC,MAAQ,KACb,IAAK,IAAIa,KAAYH,EAAIE,UAAW,CAEhC,GADAE,GAAkB,qBAAsBD,GAClB,SAAlBA,EAAS3vB,KACT,MAAM,IAAI0uB,GAAS,kCAGvB,GAA2B,OAAvBiB,EAASE,UAAoB,CAC7B,GAAkB,OAAdxwC,KAAKwvC,KAGL,MAAM,IAAIH,GAAS,uCAFnBrvC,KAAKwvC,KAAOc,EAASG,cAI5B,MAAM,GAA2B,QAAvBH,EAASE,UAAqB,CACrC,GAAmB,OAAfxwC,KAAKyvC,MAGL,MAAM,IAAIJ,GAAS,wCAFnBrvC,KAAKyvC,MAAQa,EAASG,cAI7B,CACJ,CACDF,GAAkB,kBAAmBvwC,KAAKwvC,KAAM,UAAWxvC,KAAKyvC,OAEhE,UACUzvC,KAAKksC,OAAQwE,OAEnB,UACU1wC,KAAKksC,OAAQ32B,OACtB,CAAC,MAAO+V,GAER,OAEKtrB,KAAKksC,OAAQyE,oBAAoB,SACjC3wC,KAAKksC,OAAQ0E,eAAe,EACrC,CAAC,MAAOtlB,GAQL,MAN4B,OAAxBtrB,KAAK4vC,iBACL5vC,KAAK4vC,eAAetkB,GACpBtrB,KAAK2vC,gBAAkB,KACvB3vC,KAAK4vC,eAAiB,MAGpBtkB,CACT,CAG4B,OAAzBtrB,KAAK2vC,kBACL3vC,KAAK2vC,qBAAgBv4B,GACrBpX,KAAK2vC,gBAAkB,KACvB3vC,KAAK4vC,eAAiB,KAE7B,CAMD7kB,0BACI,GAAoB,OAAhB/qB,KAAKksC,OAIT,aAAa,IAAIvhB,SAAQ,CAACC,EAASkb,KAC/B9lC,KAAK6vC,mBAAqBjlB,CAAO,GAExC,CAQDG,qBAAqB0iB,EAAiC,UAQlD,OALIp1B,UAAUw4B,UAAUvD,SAAS,mBACvBttC,KAAK8wC,oBACXrD,WAGS,IAAI9iB,SAAQ,CAACC,EAAS0I,KAC/BtzB,KAAK2vC,gBAAkB/kB,EACvB5qB,KAAK4vC,eAAiBtc,CAAM,GAEnC,CAQDvI,gBACI,IAAIgmB,QAAgB14B,UAAU24B,IAAIC,aAClCnI,GAAgB,4BAA6BiI,GACtB,IAAnBA,EAAQ3xC,OACRY,KAAKksC,OAAS6E,EAAQ,IAKtBjI,GACI,+DAEJ9oC,KAAKksC,aAAe7zB,UAAU24B,IAAIE,cAAc,CAC5CC,QAAS,CACL,CACIC,UApOG,IAqOHC,aApOM,GAqONC,aApOM,OAyOtBxI,GAAgB,oBAAqB9oC,KAAKksC,QAErClsC,KAAK0vC,0BACNr3B,UAAU24B,IAAInc,iBAAiB,cAAeC,IACtCA,EAAMoX,SAAWlsC,KAAKksC,SACtBpD,GAAgB,2BACgB,OAA5B9oC,KAAK6vC,qBACL7vC,KAAK6vC,wBAAmBz4B,GACxBpX,KAAK6vC,mBAAqB,MAEjC,IAGLx3B,UAAU24B,IAAInc,iBAAiB,WAAW9J,MAAO+J,IAC7CgU,GAAgB,wBAChB9oC,KAAKksC,OAASpX,EAAMoX,OAGpB,IAAIqF,EAA2C,OAAxBvxC,KAAK4vC,eAC5B,UACU5vC,KAAKwxC,2BACd,CAAC,MAAOlmB,GAGL,IAAKimB,EACD,MAAMjmB,CAEb,KAGLtrB,KAAK0vC,yBAA0B,SAG7B1vC,KAAKwxC,2BACd,CASOzmB,sBACJ,IAGI0mB,EAHAC,EAAW,CACX9yB,KAAM,IAIV,EAAG,CACC,IAAI+yB,QAAmB3xC,KAAKksC,OAAQ0F,WAAW5xC,KAAKwvC,KAAO,IACvDqC,GAAW,IAAIpY,aAAcC,OAAOiY,EAAW1wB,MAEnDwwB,EAAaI,EAAS5H,UAAU,EAAG,GACnC,IAAI6H,EAAcD,EAAS5H,UAAU,GAGrC,GAFAnB,GAAgB,aAAa2I,KAAcK,KAExB,SAAfL,EAEAC,EAAS9yB,MAAQkzB,OACd,GAAmB,SAAfL,EAEPC,EAAS9yB,MAAQkzB,EAAc,SAC5B,IAAmB,SAAfL,EAKP,MAAM,IAAI3E,GAAc2E,EAAYK,GAHpCJ,EAASK,SAAWD,CAIvB,QAEmB,SAAfL,GAET,OAAOC,CACV,CAUD3mB,iBAAiBif,GAEb,GAAIA,EAAQ5qC,OAAS,GACjB,MAAM,IAAI4yC,WAId,IAAIC,GAAY,IAAIplB,aAAcI,OAAO+c,GAIzC,aAHMhqC,KAAKkyC,YAAYD,GACvBnJ,GAAgB,WAAYkB,GAErBhqC,KAAKmyC,eACf,CAUDpnB,kBAAkBse,GACd,IAAI+I,EACJ,IACIA,SL1ORC,EK4OgBryC,KAAK6sC,WAAW,UAAUxD,KL3O1ClD,EKpGmB,ILsGZ,IAAIxb,SAAQ,CAACC,EAAS0I,KAEzB,IAAIgf,GAAW,EACXC,EAAMxR,YAAW,KAEjBuR,GAAW,EACXhf,EAAO,IAAI4S,GAAaC,GAAS,GAClCA,GAGHkM,EACKG,MAAMhqC,IACE8pC,GACD1nB,EAAQpiB,EACX,IAEJiqC,OAAOtlC,IACCmlC,GACDhf,EAAOnmB,EACV,IAEJulC,SAAQ,KACAJ,GACD3c,aAAa4c,EAChB,GACH,MKmNA3zB,IACL,CAAC,MAAO0M,GAGL,KAAIA,aAAiBwhB,IAAiC,QAAhBxhB,EAAM1mB,QAGxC,MAAM0mB,EAFN8mB,EAAO,IAId,CLzPO,IACZC,EACAlM,EK4PI,OAAOiM,EAAOA,EAAK9Y,OAAS,IAC/B,CASOvO,yBACJ,IACI,IAAIqnB,SAAcpyC,KAAK4sC,YACnB,sBACA3V,cACJ,GAAImb,EAEA,OAAO7wC,KAAK40B,IAAIwc,SAASP,EAAM,IAnXrB,WAqXjB,CAAC,MAAO9mB,GAER,CAGD,OA7XsB,SA8XzB,CAOOP,sBACJzJ,EACA6jB,GAEA,IAAI79B,EAAI,EACJsrC,EAAiBtxB,EAAOwB,WAC5B,KAAO8vB,EAAiB,GAAG,CACvB,IAAI56B,EAAQsJ,EAAOQ,MACfxa,EAAI8nC,IACH9nC,EAAI,GAAK8nC,IAEV9nC,EAAI,KAAS,GACbipC,GACI,aAAav4B,EAAM8K,iCAAiC8vB,kBAA+BtrC,KAGvFA,EAAI,IAAO,GACX69B,GACK7jB,EAAOwB,WAAa8vB,GAAkBtxB,EAAOwB,kBAIhD9iB,KAAKkyC,YAAYl6B,GAEvB46B,GAAkB56B,EAAM8K,WACxBxb,GAAK,CACR,CAED69B,EAAW,EACd,CAEDpa,kBAAkB9J,GACd,IAAI7gB,QAAkCJ,KAAKksC,OAAQgG,YAC/ClyC,KAAKyvC,MACLxuB,GAEJ,GAAmB,OAAf7gB,EAAIwE,OACJ,MAAM,IAAIyqC,GAAS,iCAAiCjvC,EAAIwE,UAE5D,GAAIxE,EAAIyyC,eAAiB5xB,EAAK6B,WAC1B,MAAM,IAAIusB,GACN,8CAA8CpuB,EAAK6B,6CACd1iB,EAAIyyC,gBAGpD,CAWD9nB,aACIye,EACAloB,EACA6jB,EAAoC,CAAC2I,IAAD,IAEpChF,GACI,8BAA8BU,MAAcloB,EAAOwB,oBAIvD,IAAIgwB,EAAUxxB,EAAOwB,WAAWiwB,SAAS,IAAIC,SAAS,EAAG,KACzD,GAAuB,IAAnBF,EAAQ1zC,OACR,MAAM,IAAI0tC,GACN,OACA,2BAA2BgG,2BAKnC,IAAIG,QAAqBjzC,KAAK6sC,WAAW,YAAYiG,KACrD,QAA8B17B,IAA1B67B,EAAalB,SACb,MAAM,IAAIjF,GACN,OACA,4CAA4CmG,EAAar0B,QAGjE,IAAIs0B,EAAeP,SAASM,EAAalB,SAAW,IACpD,GAAImB,IAAiB5xB,EAAOwB,WACxB,MAAM,IAAIgqB,GACN,OACA,oBAAoBoG,8BAAyC5xB,EAAOwB,oBAI5EgmB,GAAgB,oBAAoBxnB,EAAOwB,0BACrC9iB,KAAKmzC,gBAAgB7xB,EAAQ6jB,GAEnC2D,GAAgB,+CACV9oC,KAAKmyC,eACd,CAWDpnB,qBACIye,EACAlK,EACA6F,EAAoC,CAAC2I,IAAD,IAEpC,MAAMsF,EAAc9T,EAAMR,iBAC1BgK,GAAgB,aAAasK,cAAwB5J,KAGrD,IAAIsJ,EAAUM,EAAYL,SAAS,IAAIC,SAAS,EAAG,KACnD,GAAuB,IAAnBF,EAAQ1zC,OACR,MAAM,IAAI0tC,GACN,OACA,2BAA2BgG,2BAKnC,IAAIG,QAAqBjzC,KAAK6sC,WAAW,YAAYiG,KACrD,QAA8B17B,IAA1B67B,EAAalB,SACb,MAAM,IAAIjF,GACN,OACA,4CAA4CmG,EAAar0B,QAIjE,IAAIs0B,EAAeP,SAASM,EAAalB,SAAW,IACpD,GAAImB,IAAiBE,EACjB,MAAM,IAAItG,GACN,OACA,oBAAoBoG,8BAAyCE,WAIrEtK,GAAgB,oBAAoBsK,WAEpC,IAAIC,EAAe,EACfC,EAAqB,EACrBC,EAAU,EAmBdpO,EAAW,GAEX,IAAIqO,QAA2BrH,GAC3B7M,EAGA,IAAIsL,GAAcwE,IAvBFrkB,MAAOphB,UACjB3J,KAAKkyC,YAAYvoC,GACvB0pC,GAAgB1pC,EAAImZ,WAEhBuwB,EAAeC,GAAsB,UACrCnO,EAAWkO,EAAeD,GAC1BE,EAAqBD,GAGrBA,EAAeE,GAAW,WAC1BzK,GACI,QAAQuK,GAAgB,YAAYD,GAAe,UAEvDG,EAAUF,EACb,GASoDD,IAEzD,GAAII,IAAuBJ,EACvB,MAAM,IAAI35B,MACN,uBAAuB+5B,qBAAsCJ,KAGrE,GAAIC,IAAiBD,EACjB,MAAM,IAAI35B,MACN,iBAAiB45B,qBAAgCD,KAIzDjO,EAAW,GAEX2D,GAAgB,+CACV9oC,KAAKmyC,eACd,CAUDpnB,aACIsD,EAAiB,GACjBolB,GAAgB,EAChBhG,EAAiC,UAE7Bpf,EAAOjvB,OAAS,QACVY,KAAK6sC,WAAW,UAAUxe,WAE1BruB,KAAK6sC,WAAW,UAGtB4G,SACMzzC,KAAK0tC,eAAeD,EAEjC,CAcD1iB,gBACIye,EACAjT,EACA4O,EAAoC,CAAC2I,IAAD,IAGsB,cAA/C9tC,KAAK4sC,YAAY,YAAYpD,OACpCA,GAAa,UAAaxpC,KAAK4sC,YAAY,iBAG/C,IAAI8G,QAAkB1zC,KAAK2zC,mBACvBC,QAAmB5L,GACnBzR,EAAKzU,MAAM,EAAG+xB,KAGdzL,EAAa7R,EAAKvnB,KAClB8kC,GAAW,EACf,IACI,IAAIC,EAAeC,GAAuBJ,GACrB,OAAjBG,IACA3L,EAAa2L,EAAa59B,OAAS49B,EAAa5wB,UAChD2wB,GAAW,EAElB,CAAC,MAAOxoB,GAER,CAI2D,cAAjDtrB,KAAK4sC,YAAY,cAAcpD,aAGhCxpC,KAAK6sC,WAAW,4BAA4BrD,aAE5CxpC,KAAK6sC,WACP,4BAA4BrD,KAAapB,MAK7C7R,EAAKvnB,KAAO0kC,IAAcI,IAC1BhL,GAAgB,GAAGU,wCACnBjT,QJ1dLxL,eAAuBwL,GAC1B,IAAIzsB,EAAS,CACTqZ,UAAW,KACXhN,OAAQogB,EAAKvnB,KAAO,KACpBs4B,OAAQ,EACRlmB,MAAO,GAGPkmB,EAAS,GACb,KAAO/Q,EAAKvnB,KAAO,GAAG,CAClB,IAAIyJ,EAAYlX,KAAK40B,IAAII,EAAKvnB,KApMf,UAqMfs4B,EAAO/kB,KAAK,CACR5B,KAAMkmB,GAAUoN,IAChB99B,OAAQsC,EAAY3O,EAAOqZ,UAC3BlC,KAAMsV,EAAKzU,MAAM,EAAGrJ,KAExB8d,EAAOA,EAAKzU,MAAMrJ,EACrB,CAED,OAAOkvB,GAAY79B,EAAQw9B,EAC/B,CIscyB4M,CAAe3d,IAGhCuS,GACI,YAAYvS,EAAKvnB,iBAAiBw6B,MAAckK,qBAEpD,IAAIS,EAAS,EACTC,EAAY,EAChB,UAAW,IAAIjb,KJnchBpO,gBAA0BwL,EAAY8d,GAKzC,GAJAvL,GACI,aAAavS,EAAKvnB,+BAA+BqlC,iBAGjD9d,EAAKvnB,MAAQqlC,EAMb,OALAvL,GAAgB,mDACV,CACF7nB,WAAY+mB,GAAwBzR,GACpC5T,MAAO4T,EAAKvnB,OAKpB,IAGIlF,EAASm9B,SAHUe,GACnBzR,EAAKzU,MAAM,EAAG4kB,MAGlB,GAAe,OAAX58B,EACA,MAAM,IAAI88B,GAAW,8BAIzB98B,EAAOsX,MAAQ,EACfmV,EAAOA,EAAKzU,MAAM4kB,IAElB,IAAI4N,EAAkC,GAClCC,EAAiB,EACrB,IAAK,IAAIjtC,EAAI,EAAGA,EAAIwC,EAAOw9B,OAAQhgC,IAAK,CACpC,IAGI0Q,EAAQuvB,SAHgBS,GACxBzR,EAAKzU,MAAM,EAAG6kB,MAGlB3uB,EAAMiJ,KAAOsV,EAAKzU,MAAM6kB,GAAmBA,GAAoB3uB,EAAMwvB,WACrEjR,EAAOA,EAAKzU,MAAM6kB,GAAoB3uB,EAAMwvB,WAE5C,IAAIgN,EAAiBH,GA5HV3N,GAAmBC,IAFdW,EA8HgCgN,GA5HSl1C,OARjE,SAA4BkoC,GACxB,OAAOA,EACFnoC,KAAK6Y,GAAUA,EAAMiJ,KAAMjS,OAC3BxP,QAAO,CAACkoC,EAAOh/B,IAAMg/B,EAAQh/B,GAAG,EACzC,CAKsB+rC,CAAmBnN,IA+HjC,GAHAiJ,GACI,WAAWjpC,WAAW0Q,EAAM2I,SAAS3I,EAAMwvB,qBAAqBxvB,EAAM7B,kBAAkBq+B,qBAExFA,GAAkBx8B,EAAMwvB,UAExB+I,GAAkB,wCAClB+D,EAAY/xB,KAAKvK,GAEjBu8B,GAAkBv8B,EAAM7B,OAASrM,EAAOqZ,cACrC,CAIH,IAAIuxB,EAAcjN,GAAoB6M,GACtCA,EAAY/xB,KAAK,CACb5B,KAAMkmB,GAAU8N,KAChBx+B,OAAQrM,EAAOqM,OAASu+B,EACxBzzB,KAAM,IAAI+iB,KAAK,IACfwD,UAAW,IAEf+I,GACI,gBACIzmC,EAAOqM,uBACMu+B,kBACb5qC,EAAOqM,OAASu+B,2BACMjN,GACtB6M,aAGR,IAAIM,QAAmBjN,GAAY79B,EAAQwqC,GAC3CxL,GACI,YAAY8L,EAAW5lC,wBAAwBslC,EAAYl1C,sBAEzD,CACF6hB,WAAY+mB,GAAwB4M,GACpCjyB,MAAO4xB,GAKXhE,GACI,sCAAsCmE,6BAE1CJ,EAAc,CACV,CACI3zB,KAAMkmB,GAAU8N,KAChBx+B,OAAQu+B,EACRzzB,KAAM,IAAI+iB,KAAK,IACfwD,UAAW,GAEfxvB,GAEJu8B,EAAiB,CACpB,CACJ,CArLL,IAAwBjN,EAwLpB,GACIgN,EAAYl1C,OAAS,IACpBk1C,EAAYl1C,OAAS,GAAKk1C,EAAY,GAAG3zB,OAASkmB,GAAU8N,MAC/D,CACE,IAAIC,QAAmBjN,GAAY79B,EAAQwqC,GAC3CxL,GACI,mBAAmB8L,EAAW5lC,wBAAwBslC,EAAYl1C,sBAEhE,CACF6hB,WAAY+mB,GAAwB4M,GACpCjyB,MAAO4xB,EAEd,CACL,CIwVgCM,CAAiBte,EAAMmd,SACrC1zC,KAAKmvC,OAAO3F,EAAWrQ,EAAMlY,MAAOmrB,IACtCjH,GAAYiP,EAAYhI,EAAWjT,EAAMxW,OAASylB,EAAW,IAGjEU,GAAgB,6BACV9oC,KAAK6sC,WAAW,SAASrD,KAE/B2K,GAAU,EACVC,GAAajb,EAAMxW,MAGvBmmB,GAAgB,WAAWU,UAAkB2K,aAChD,CAcDppB,oBACIye,EACAC,EACAnK,EACA6F,EAAoC,CAAC2I,IAAD,IAEpC,GAA0D,cAA/C9tC,KAAK4sC,YAAY,YAAYpD,KAAyB,CAC7D,IAAIgF,QAAgBxuC,KAAK4sC,YAAY,gBACrC,GAAgB,OAAZ4B,EACA,MAAM,IAAI/0B,MAAM,wBAEpB,GAAIgwB,IAASC,GAAcE,QACvBJ,GAAa,IAAMgF,MAChB,CACH,GAAI/E,IAASC,GAAcC,MACvB,MAAM,IAAIlwB,MAAM,4BAA4BgwB,KAEhDD,GAAa,IAAMiF,GAAaD,EACnC,CACJ,MAAM,GAAI/E,IAASC,GAAcC,MAC9B,MAAM,IAAIlwB,MACN,uCAAuC+vB,6BAI/CV,GACI,YAAYxJ,EAAMR,6BAA6B0K,WAE7CxpC,KAAK80C,eAAetL,EAAWlK,EAAO6F,GAE5C2D,GAAgB,6BACV9oC,KAAK6sC,WAAW,SAASrD,KAE/BV,GAAgB,WAAWU,IAC9B,CAUDze,eACIwL,EACA4O,EAAoC,CAAC2I,IAAD,IAGpChF,GAAgB,WAAWvS,EAAKvnB,oBAEhC,IAAIiS,QAAa+mB,GAAwBzR,SACnCv2B,KAAKmvC,OAAO,WAAYluB,EAAMkkB,GAEpC2D,GAAgB,4BACV9oC,KAAK6sC,WAAW,QAEtB/D,GAAgB,UAAUvS,EAAKvnB,mBAClC,CAaD+b,sBACIwL,EACAuV,EACA2B,EACAtI,EAAsC,CAAC2I,IAAD,IAEtC,aAAaiH,GAAgB/0C,KAAMu2B,EAAMuV,EAAM2B,EAAatI,EAC/D,EAGL,IAAYuE,GAKN,SAAU+E,GAAauG,GACzB,GAAoB,MAAhBA,EACA,MAAO,IAEX,GAAoB,MAAhBA,EACA,MAAO,IAEX,MAAM,IAAIv7B,MAAM,kCAAoCu7B,EACxD,EAbA,SAAYtL,GACRA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,MAAA,GAAA,OACH,CAHD,CAAYA,KAAAA,GAGX,CAAA","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}